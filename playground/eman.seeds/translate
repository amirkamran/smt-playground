#!/bin/bash
# just translates the given corpus, no reference to evaluate against

## Save our own copy of moses

if [ -z "$BINARIES" ]; then
  echo "Set \$BINARIES to the step containing compiled tools"
  exit 1
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

if [ -z "$MERTEXP" ] || [ -z "$TESTCORP" ]; then
  echo "You must set: "
  echo "  \$MERTEXP to the directory that contains the model, incl. all files, the optimized ini will be used"
  echo "  \$TESTCORP to the corpus for evaluation"
  echo "and optionally"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$JOBS to number of jobs or 0 for serial"
  echo "  \$ITER to the ITER-th BEST at... (will use run(ITER+1).moses.ini)"
  exit 1
fi

[[ -d ../exp.mert.$MERTEXP ]] && MERTEXP=exp.mert.$MERTEXP

if [[ ! -d ../$MERTEXP ]]; then
  echo "Experiment not found: $MERTEXP"
  exit 1
fi

JOBS=${JOBS:-10}

if [ ! -z "$ITER" ]; then
  iterprefix=run$(($ITER+1)).
  itertag=ITER$ITER
fi

echo `cat ../$MERTEXP/eman.tag`"$itertag"TEST$TESTCORP > eman.tag

if [ -z "$REFAUG" ]; then
  eval `cat ../$MERTEXP/eman.vars | grep 'REFAUG='`
  echo "Inheriting REFAUG: $REFAUG"
fi

MODELEXP=`cat ../$MERTEXP/info.modelexp`
SAVEMODELEXP=$MODELEXP
eval `cat ../$MODELEXP/eman.vars` || exit 1
MODELEXP=$SAVEMODELEXP
cat << KONEC > eman.vars
MERTEXP=$MERTEXP
TESTCORP=$TESTCORP
MOSESFLAGS="$MOSESFLAGS"
GRIDFLAGS="$GRIDFLAGS"
JOBS=$JOBS
ITER=$ITER
KONEC
echo $MODELEXP > ./info.modelexp
echo $MERTEXP > info.mertexp

echo $MERTEXP > ./eman.deps
echo $BINARIES >> eman.deps

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# clone some importnant executables
wiseln $MOSESCMD ./moses || exit 1

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1

../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || exit 1

echo Checking eval corp size
[ `wc -l < evaluation.in` -gt 0 ] || exit 1

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | $SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi


# for running this command, qsub is allowed, although we're going to submit jobs ourselves
# echo "no" > qsub-allowed

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"

if [ $JOBS == 0 ]; then
  GRIDARGS=""
  MOSESPARALLELIZER=""
else
  GRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' -feed-decoder-via-stdin "
  MOSESPARALLELIZER="$MOSESPARALLEL $GRIDARGS -decoder "
fi


cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
renice 10 \$\$

mydir=\`pwd\`

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" | tee FAILED >&2; exit 1 ; }

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
  --symlink \\
  ../$MERTEXP/mert-tuning/"$iterprefix"moses.ini || die "Failed to clone"

\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Failed to absolutize"

\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval ./moses.abs.ini evaluation.in || die "Failed to filter"

$MOSESPARALLELIZER \\
  ./moses \\
  $MOSESFLAGS \\
  -input-file ./evaluation.in \\
  -config ./filtered-for-eval/moses.ini \\
| gzip -c \\
> evaluation.opt.out.gz \\
|| die "Failed to translate"

echo "Detokenizing evaluation.opt.out"
zcat evaluation.opt.out.gz \\
| \$SCRIPTS_ROOTDIR/recaser/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
| gzip -c \\
> evaluation.opt.txt.gz \\
  || die "Failed to detokenize"

echo "You could prepare detailed output for manual inpection:"
echo ./moses -input-file ./evaluation.in -config ./filtered-for-eval-opt/moses.ini \\
  -verbose 3 \\
  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > evaluation.opt.verbose

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

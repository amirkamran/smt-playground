#!/bin/bash
# Prepare a moses.ini file by combining:
#   translation model
#   (optional reordering model)
#   language models

set -o pipefail
function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

if [ -z "$TMS" ] || [ -z "$LMS" ] \
  ; then
  echo "You must set: "
  echo "  \$TMS to the extracted phrases, separate TMs with a colon"
  echo "  \$LMS to tgtfactoridx:lmstep:::tgtfactoridx:lmstep:::tgtfactoridx:lmstep"
  echo "And optionally:"
  echo "  \$RMSTEP to reordering models"
  echo "  \$BINARIES if you don't want to inherit them from TMS"
  exit 1
fi

# Load variables from TMS
for tm in `echo $TMS | tr ':' ' '`; do
  [ -e ../$tm/eman.vars ] || die "Bad translation model: $tm"
done

SAVEBINARIES=$BINARIES
# inherit all variables
for tm in `echo $TMS | tr ':' ' '`; do
  source ../$tm/eman.vars
done

if [ -z "$SAVEBINARIES" ] || [ "$BINARIES" == "$SAVEBINARIES" ]; then
  # inheriting, ignoring our SAVEBINARIES
  true
else
  # using our own
  BINARIES=$SAVEBINARIES
  echo $BINARIES >> eman.deps
fi

SCRIPTS_ROOTDIR="`pwd`/../$BINARIES/moses/scripts"
WORKSPACE="`pwd`/../$BINARIES/"

# Load variables from RMexp
if [ -z "$RMSTEP" ]; then
  REORDERING=distance
  REORDFACTORS="0-0"
  DOTREORDTAG=""
else
  [ "$SRCAUG" == $(cat ../$RMSTEP/var-SRCAUG) ] || die "Incompatible SRCAUGs"
  [ "$TGTAUG" == $(cat ../$RMSTEP/var-TGTAUG) ] || die "Incompatible TGTAUGs"
  REORDERING=`cat ../$RMSTEP/var-REORDERING` || die "Missed REORDERING"
  REORDFACTORS=`cat ../$RMSTEP/var-REORDFACTORS` || die "Missed REORDFACTORS"
  REORDTAG=`cat ../$RMSTEP/var-REORDTAG` || die "Missed REORDTAG"
  [ ! -z "$REORDERING" ] && [ ! -z "$REORDFACTORS" ] && [ ! -z "$REORDTAG" ] \
    || die "Bad reordering model: $RMSTEP"
  DOTREORDTAG=".$REORDTAG"
fi

cat > eman.vars << KONEC
BINARIES=$BINARIES
TMS=$TMS
RMSTEP=$RMSTEP
LMS=$LMS
SRCCORP=$SRCCORP
TGTCORP=$TGTCORP
ALISTEP=$ALISTEP
ALICORP=$ALICORP
SRCAUG=$SRCAUG
TGTAUG=$TGTAUG
ALIAUG=$ALIAUG
DECODINGSTEPS=$DECODINGSTEPS
REORDERING=$REORDERING
REORDFACTORS=$REORDFACTORS
KONEC

echo $SRCAUG > var-SRCAUG
echo $TGTAUG > var-TGTAUG

for tm in `echo $TMS | tr ':' ' '`; do
  echo $tm >> eman.deps
  tmtag=$tmtag"TM"`cat ../$tm/eman.tag`
done

[ -z "$RMSTEP" ] || echo $RMSTEP >> eman.deps

## Create the tag based on LMs
i=1
for lm in `echo $LMS | sed 's/:::/ /g'`; do
  eval `makearg --delim=: $lm factor lmstep lmtype`
  echo $lmstep >> eman.deps
  # default to kenlm
  lmtypetag=${lmtype:-ken}
  order=`cat ../$lmstep/var-ORDER` || die "Missing: ../$lmstep/var-ORDER"
  i=$(($i+1))
  factor=`echo $factor | sed 'y/\,/+/'`
  lmtag=$lmtag"LM$factor-$order-"`cat ../$lmstep/eman.tag`-$lmtypetag
done
i=$(($i-1))

# XXX beru promenne z prvniho TM
tm_first=`echo "$TMS" | cut -d: -f1`
eval "cat ../$tm_first/eman.vars | grep 'THRESHOLD\|CUTOFF'"
if [ ! -z "$THRESHOLD" ]; then
  SIGFILTERTAG=SIG$THRESHOLD"N"$CUTOFF
fi

if [ $SRCCORP == $TGTCORP ] ; then
  echo SRC$SRCCORP+$SRCAUG.TGT+$TGTAUG.ALI$ALIAUG.$tmtag.$lmtag.$DECODINGSTEPS$DOTREORDTAG$SIGFILTERTAG > eman.tag
else
  echo SRC$SRCCORP+$SRCAUG.TGT$TGTCORP+$TGTAUG.ALI$ALIAUG.$tmtag.$lmtag.$DECODINGSTEPS$DOTREORDTAG$SIGFILTERTAG > eman.tag
fi


# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0


DECRYPT=../tools/decrypt_mapping_steps_for_training.pl
[ -x $DECRYPT ] || die "Missing: $DECRYPT"

DECRYPTEDSTEPS=`eval $DECRYPT $DECODINGSTEPS`

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

mydir=\`pwd\`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

renice 10 \$\$

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

## Clone the TMs
i=0
for tm in \`echo $TMS | tr ':' ' '\`; do
  i=\$((\$i + 1))
  for f in ../\$tm/model/*gz ; do
    mkdir -p tm.\$i/model
    ../../scripts/wiseln \$f ./tm.\$i/model/\`basename \$f\` || die "Failed to clone \$f in \$tm"
  done
done


## Cloning reordering model
if [ ! -z "$RMSTEP" ]; then
  cd model || die "Chdir failed"
  for f in ../../$RMSTEP/model/reordering-table*gz ; do
    ../../scripts/wiseln \$f ./\`basename \$f\` || die "Failed to clone \$f"
  done
  cd \$mydir || die "Chdir back failed"
fi


## Clone the lms
echo "Cloning LMs"
i=1
for lm in \`echo $LMS | sed 's/:::/ /g'\`; do
  eval \`makearg --delim=: \$lm factor lmstep lmtype\`
  echo "Cloning lm from \$lmstep, using lmtype \$lmtype"
  if [ x\$lmtype == xblm ]; then
    numericlmtype=1
    lmsuffix=blm
  elif [ x\$lmtype == xflm ]; then
    numericlmtype=7
    lmsuffix=flm
  else    
    numericlmtype=8
    lmsuffix=lm
  fi

  if [ \$lmsuffix == flm ]; then
    ../../scripts/wiseln ../\$lmstep/config.prepared.flm ./lm.\$i.\$lmsuffix \\
      || die "Failed to link flm: ../\$lmstep/config.prepared.flm"
  else
    ../../scripts/wiseln ../\$lmstep/corpus.\$lmsuffix ./lm.\$i.\$lmsuffix \\
      || die "Failed to link lm: ../\$lmstep/corpus.\$lmsuffix"
  fi

  order=\`cat ../\$lmstep/var-ORDER\` || die "Missing: ../\$lmstep/var-ORDER"

  lmopts="\$lmopts --lm \$factor:\$order:\$mydir/lm.\$i.\$lmsuffix:\$numericlmtype"
  i=\$((\$i+1))
done
i=\$((\$i-1))

echo lmopts: \$lmopts

i=0
for tm in \`echo $TMS | tr ':' ' '\`; do
  i=\$((\$i + 1))
  cd tm.\$i/
  \$SCRIPTS_ROOTDIR/training/train-model.perl \\
    --force-factored-filenames \\
    --first-step 9 --last-step 9 \\
    --root-dir . \\
    --alignment-file=alignment \\
    --alignment=custom \\
    --corpus=corpus/corpus \\
    --f src --e tgt \\
    --reordering $REORDERING \\
    --reordering-factors $REORDFACTORS \\
    \$lmopts \\
    $DECRYPTEDSTEPS \\
  || die "Failed to create moses.ini"
  cd \$mydir
done

mkdir model
../../scripts/merge_moses_models.pl tm.*/model/moses.ini > ./model/moses.ini \
  || die "Merge moses.ini failed"

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC


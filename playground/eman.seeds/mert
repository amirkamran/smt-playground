#!/bin/bash
# eman seed for running mert on a moses model

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar MODELSTEP type=reqstep help='where is the model (moses.ini) incl. all files' \
  defvar DEVCORP help='the corpus for tuning; use colon to delimit more corpora (the source side will be taken from the first one only)' \
  defvar TESTCORP help='the corpus for evaluation' \
  defvar SRCAUG inherit=MODELSTEP help='the source lang+factors' \
  defvar REFAUG inherit=MODELSTEP:TGTAUG \
    help='the target (reference) lang+factors' \
  defvar SEARCH default=cube help='the search type (beam or cube)' \
  defvar MOSESFLAGS default='' help='further flags for moses' \
  defvar MERTFLAGS default='' help='further flags for mert.pl' \
  defvar GRIDFLAGS default='' help='further flags for qsub' \
  defvar STACK default='' help='stacksize for beam search' \
  defvar TAGPREF default='' help='eman tag prefix' \
  defvar MERTPRG default='mert' help='mert/zmert/pro (not quite tested)' \
  defvar ZMERTMETRIC default='' help='for zmert: SemPOS, SemPOS_BLEU, BLEU, TER, TER-BLEU' \
  defvar ZMERTSEMPOSSOURCE default='' help='for zmert: factors:1,2 (factors:1,2,3 for SemPOS_BLEU) or tmt' \
  defvar ZMERTSEMPOSBLEUWEIGHTS default='' help='for zmert --semposbleu-weights, e.g. 1:1' \
  defvar ZMERTFLAGS default='' help='zmert flags' \
  defvar TREEXSTEP default='' help='for zmert SemPOS tmt (used to be TMT_ROOT; untested)' \
  defvar JOBS default='15' help='decoder jobs to run, set 0 for disabling SGE altogether' \
  defvar MOSESSTEP inherit='MODELSTEP' help='where are moses scripts and binaries' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

MOSESDIR="$(eman path $MOSESSTEP)"
SCRIPTS_ROOTDIR="$MOSESDIR/moses/scripts"
MOSESCMD="$MOSESDIR/bin/moses"

#if [ "$MERTPRG" == zmert ]; then
#  [ ! -z "$ZMERTMETRIC" ] || ZMERTMETRIC=SemPOS 
#  ZMERTMETRICTAG=$ZMERTMETRIC
#  if [ "$ZMERTMETRIC" == SemPOS ] || [ "$ZMERTMETRIC" == SemPOS_BLEU ]; then
#    [ ! -z "$ZMERTSEMPOSSOURCE" ] || ZMERTSEMPOSSOURCE=tmt 
#    ZMERTMETRICTAG=$ZMERTMETRICTAG$ZMERTSEMPOSSOURCE
#    ZMERTSEMPOSSOURCEFLAG="--extract-sempos=$ZMERTSEMPOSSOURCE"
#  fi
#  if [ "$ZMERTMETRIC" == SemPOS_BLEU ]; then
#    [ ! -z "$ZMERTSEMPOSBLEUWEIGHTS" ] || ZMERTSEMPOSBLEUWEIGHTS=1:1
#    ZMERTMETRICTAG="$ZMERTMETRICTAG"WEIGHTS$ZMERTSEMPOSBLEUWEIGHTS
#    ZMERTSEMPOSSOURCEFLAG=$ZMERTSEMPOSSOURCEFLAG" --semposbleu-weights=$ZMERTSEMPOSBLEUWEIGHTS"
#  fi
#  MERTTAG=ZMERT$ZMERTMETRICTAG
#fi


#eman add-tag $TAGPREF`eman tag $MODELSTEP`"DEV"$DEVCORP".S"$SEARCH$STACK$MERTTAG .
# ignoring tags now

#echo SETTING eman.tag: `cat eman.tag`

echo $MODELSTEP > info.modelexp

MODELSTEP=$(eman path $MODELSTEP)

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# Prepare testbleu.
gunzip $PLAYGROUND/../src/testbleu.gz -c > ./testbleu \
  || die "Cannot extract testbleu binary!"
chmod +x ./testbleu

firstdevcorp=$(echo $DEVCORP | cut -d: -f1)

# create local copies of the corpora
$PLAYGROUND/corpman --dump $firstdevcorp/$SRCAUG > tuning.in \
  || die "Failed to create tuning.in from $firstdevcorp/$SRCAUG"
refidx=0
for devcorp in $(echo $DEVCORP | tr ':' ' '); do
  $PLAYGROUND/corpman --dump $devcorp/$REFAUG > tuning.ref.$refidx \
    || die "Failed to create tuning.ref.$refidx from $devcorp/$REFAUG"
  [ `wc -l < tuning.in` == `wc -l < tuning.ref.$refidx` ] \
    || die "Mismatching number of lines in tuning.ref.$refidx taken from $devcorp/$REFAUG"
  refidx=$(($refidx+1))
done
$PLAYGROUND/corpman --dump $TESTCORP/$SRCAUG > evaluation.in || die "evaluation.in"
$PLAYGROUND/corpman --dump $TESTCORP/$REFAUG > evaluation.ref.0 || die "evaluation.ref"

echo Checking tune and eval corp sizes
[ `wc -l < tuning.in` -gt 0 ] || die "Empty tuning.in"
[ `wc -l < evaluation.in` -gt 0 ] || die "Empty evaluation.in"
[ `wc -l < evaluation.in` == `wc -l < evaluation.ref.0` ] || die "Mismatching evaluation.ref.0"

$PLAYGROUND/../scripts/reduce_factors.pl 0 < evaluation.ref.0 > evaluation.ref.0.factor0 \
  || die "Failed to cut factor 0 of evaluation.ref.0"


TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | $SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
MERTMOSES="\$SCRIPTS_ROOTDIR/training/mert-moses.pl"
ZMERTMOSES="\$SCRIPTS_ROOTDIR/training/zmert-moses.pl"

if [ ! -z "$STACK" ]; then
  MOSESFLAGS="$MOSESFLAGS -s $STACK"
fi

if [ $JOBS -eq 0 ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

case "$MERTPRG" in
zmert)
  cat << KONEC > command.mert
$ZMERTMOSES \
  --working-dir=\`pwd\`/mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  --mertdir=\$SCRIPTS_ROOTDIR/../../moses/zmert/ \\
  --metric="$ZMERTMETRIC" $ZMERTSEMPOSSOURCEFLAG \\
    $ZMERTFLAGS \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 6 $MOSESFLAGS $SEARCHFLAG" \\
  || die "Mert failed"
KONEC
;;
mert)
  cat << KONEC > command.mert
$MERTMOSES \
  --working-dir=\`pwd\`/mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 6 $MOSESFLAGS $SEARCHFLAG" \\
  || die "Mert failed"
KONEC
;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

# init grid environment
. /net/projects/SGE/user/sge_profile

# Blocked for the moment, we don't use sempos
#if [ -d "$TMT_ROOT" ]; then
#  # ensuring tectomt is actually inited!
#  pushd $TMT_ROOT ||  die "Can't chdir to TMT_ROOT $TMT_ROOT"
#  . ./config/init_devel_environ.sh
#  [ "\$TMT_OK" == 1 ] || die "Failed to init TectoMT"
#  popd
#fi

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=${SCRIPTS_ROOTDIR}

export MERTFLAGS="$MERTFLAGS"
echo export MERTFLAGS="$MERTFLAGS"

# clone some importnant executables
$PLAYGROUND/../scripts/wiseln $MOSESCMD ./moses || die "Failed to clone moses"

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \
  $MODELSTEP/model/moses.ini \
  || die "Failed to clone $MODELSTEP/model/moses.ini"

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1


\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Absolutize failed"

# This is the actual mert to run
`cat command.mert`

# Mert finished, apply the moses.ini to independent test set
[ -e filtered-for-eval-opt ] \
|| \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-opt \\
  ./mert-tuning/moses.ini evaluation.in \\
  || die "Filter for eval failed"

$MOSESPARALLELIZER \\
  -input-file ./evaluation.in \\
  -alignment-output-file ./evaluation.opt.ali \\
  -config ./filtered-for-eval-opt/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.opt.out \\
   || die "Translation of eval failed"

echo "Tuned BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
if [ -e ./testbleu ]; then
  ./testbleu evaluation.ref.0.factor0 < evaluation.opt.out | tee BLEU.opt \\
    || die "BLEU of evaluation.opt.out set failed"
fi

echo "Detokenizing evaluation.opt.out"
\$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
  < evaluation.opt.out > evaluation.opt.txt

# Apply also the non-optimized weights, just to double check mert did something
\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-std \\
  ./mert-tuning/run1.moses.ini evaluation.in || die "Filter for std failed"

$MOSESPARALLELIZER \\
  ./moses -input-file ./evaluation.in \\
  -alignment-output-file ./evaluation.std.ali \\
  -config ./filtered-for-eval-std/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.std.out \\
   || die "Translation of std.eval failed"

echo "Default BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.std.out | tee BLEU.std
if [ -e ./testbleu ]; then
  ./testbleu evaluation.ref.0 < evaluation.std.out | tee BLEU.std \\
    || die "BLEU of evaluation.std.out set failed"
fi

echo "Detokenizing evaluation.std.out"
\$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
< evaluation.std.out > evaluation.std.txt

echo "You could use the following to prepare detailed output for manual inpection"
echo ./moses -input-file ./evaluation.in -config \
  ./filtered-for-eval-opt/moses.ini \\
  -verbose 3 \\
  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > evaluation.opt.verbose

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

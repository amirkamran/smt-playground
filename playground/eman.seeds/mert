#!/bin/bash
# eman seed for running mert on a moses model

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }
set -o pipefail

if [ -z "$MODELSTEP" ] || [ -z "$DEVCORP" ] \
  || [ -z "$TESTCORP" ] \
  || [ -z "$REFAUG" ] \
  ; then
  echo "You must set: "
  echo "  \$MODELSTEP to the directory that contains the model, incl. all files"
  echo "  \$DEVCORP to the corpus for tuning"
  echo "  \$TESTCORP to the corpus for evaluation"
  echo "  \$REFAUG to the target (reference) lang+factors"
  echo "and optionally"
  echo "  \$SEARCH to beam or cube"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$MERTFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$SERIAL to yes to disable qsub"
  echo "  \$STACK to stacksize"
  echo "  \$TAGPREF to tag prefix"
  echo "  \$MERTPRG to mert, zmert (and hopefully new-mert later)"
  echo "  \$ZMERTMETRIC for zmert, to SemPOS, SemPOS_BLEU, BLEU, TER, TER-BLEU"
  echo "  \$ZMERTSEMPOSSOURCE for zmert SemPOS, to factors:1,2 (factors:1,2,3 for SemPOS_BLEU) or tmt"
  echo "  \$ZMERTSEMPOSBLEUWEIGHTS for --semposbleu-weights, e.g. 1:1"
  echo "  \$ZMERTFLAGS for zmert flags"
  echo "  \$TMT_ROOT for zmert SemPOS TMT_ROOT"
  echo "  \$BINARIES if you don't want to inherit them from MODELSTEP"
  exit 1
fi

echo $MODELSTEP > eman.deps

# Load variables from MODEL
[ -e ../$MODELSTEP/eman.vars ] || die "Bad translation model: $MODELSTEP"
SAVEBINARIES=$BINARIES
# inherit all variables
eval `cat ../$MODELSTEP/eman.vars` || exit 1

if [ -z "$SAVEBINARIES" ] || [ "$BINARIES" == "$SAVEBINARIES" ]; then
  # inheriting, ignoring our SAVEBINARIES
  true
else
  # using our own
  BINARIES=$SAVEBINARIES
  echo $BINARIES >> eman.deps
fi

SCRIPTS_ROOTDIR="`pwd`/../$BINARIES/moses/scripts"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

SCORENBEST=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/scorenbest.asm
TESTBLEU=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/testbleu.asm

[ ! -z "$SEARCH" ] || SEARCH=cube
[ ! -z "$MERTPRG" ] || MERTPRG=mert


if [ "$MERTPRG" == zmert ]; then
  [ ! -z "$ZMERTMETRIC" ] || ZMERTMETRIC=SemPOS 
  ZMERTMETRICTAG=$ZMERTMETRIC
  if [ "$ZMERTMETRIC" == SemPOS ] || [ "$ZMERTMETRIC" == SemPOS_BLEU ]; then
    [ ! -z "$ZMERTSEMPOSSOURCE" ] || ZMERTSEMPOSSOURCE=tmt 
    ZMERTMETRICTAG=$ZMERTMETRICTAG$ZMERTSEMPOSSOURCE
    ZMERTSEMPOSSOURCEFLAG="--extract-sempos=$ZMERTSEMPOSSOURCE"
  fi
  if [ "$ZMERTMETRIC" == SemPOS_BLEU ]; then
    [ ! -z "$ZMERTSEMPOSBLEUWEIGHTS" ] || ZMERTSEMPOSBLEUWEIGHTS=1:1
    ZMERTMETRICTAG="$ZMERTMETRICTAG"WEIGHTS$ZMERTSEMPOSBLEUWEIGHTS
    ZMERTSEMPOSSOURCEFLAG=$ZMERTSEMPOSSOURCEFLAG" --semposbleu-weights=$ZMERTSEMPOSBLEUWEIGHTS"
  fi
  MERTTAG=ZMERT$ZMERTMETRICTAG
fi


echo $TAGPREF`cat ../$MODELSTEP/eman.tag`"DEV"$DEVCORP".S"$SEARCH$STACK$MERTTAG > eman.tag

#echo SETTING eman.tag: `cat eman.tag`

echo $MODELSTEP > info.modelexp

cat << KONEC > eman.vars
BINARIES=$BINARIES
MODELSTEP=$MODELSTEP
DEVCORP=$DEVCORP
TESTCORP=$TESTCORP
SRCAUG=$SRCAUG
REFAUG=$REFAUG
SEARCH=$SEARCH
MERTFLAGS="$MERTFLAGS"
GRIDFLAGS="$GRIDFLAGS"
MOSESFLAGS="$MOSESFLAGS"
SERIAL=$SERIAL
STACK=$STACK
MERTPRG=$MERTPRG
ZMERTMETRIC="$ZMERTMETRIC"
ZMERTSEMPOSSOURCE=$ZMERTSEMPOSSOURCE
ZMERTSEMPOSBLEUWEIGHTS=$ZMERTSEMPOSBLEUWEIGHTS
ZMERTFLAGS="$ZMERTFLAGS"
TMT_ROOT=$TMT_ROOT
KONEC

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# create local copies of the corpora
../augmented_corpora/augment.pl --dump $DEVCORP/$SRCAUG > tuning.in || die "tuning.in"
../augmented_corpora/augment.pl --dump $DEVCORP/$REFAUG > tuning.ref.0 || die "tuning.ref"
../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || die "evaluation.in"
../augmented_corpora/augment.pl --dump $TESTCORP/$REFAUG > evaluation.ref.0 || die "evaluation.ref"

echo Checking tune and eval corp sizes
[ `wc -l < tuning.in` -gt 0 ] || die "Empty tuning.in"
[ `wc -l < evaluation.in` -gt 0 ] || die "Empty evaluation.in"
[ `wc -l < tuning.in` == `wc -l < tuning.ref.0` ] || die "Mismatching tuning.ref.0"
[ `wc -l < evaluation.in` == `wc -l < evaluation.ref.0` ] || die "Mismatching evaluation.ref.0"

../../scripts/reduce_factors.pl 0 < evaluation.ref.0 > evaluation.ref.0.factor0 \
  || die "Failed to cut factor 0 of evaluation.ref.0"


TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | $SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
MERTMOSES="\$SCRIPTS_ROOTDIR/training/mert-moses.pl"
ZMERTMOSES="\$SCRIPTS_ROOTDIR/training/zmert-moses.pl"

if [ ! -z "$STACK" ]; then
  MOSESFLAGS="$MOSESFLAGS -s $STACK"
fi

[ ! -z "$JOBS" ] || JOBS=15

if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

case "$MERTPRG" in
zmert)
  cat << KONEC > command.mert
$ZMERTMOSES \
  --working-dir=mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  --mertdir=\$SCRIPTS_ROOTDIR/../../moses/zmert/ \\
  --metric="$ZMERTMETRIC" $ZMERTSEMPOSSOURCEFLAG \\
    $ZMERTFLAGS \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 6 $MOSESFLAGS $SEARCHFLAG" \\
  || die "Mert failed"
KONEC
;;
mert)
  #--obo-scorenbest=\`pwd\`/scorenbest
  cat << KONEC > command.mert
$MERTMOSES \
  --working-dir=mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 6 $MOSESFLAGS $SEARCHFLAG" \\
  || die "Mert failed"
KONEC
;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment
. /net/projects/SGE/user/sge_profile

mydir=\`pwd\`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

renice 10 \$\$

# core files limited to 1 byte
ulimit -c 1

if [ -d "$TMT_ROOT" ]; then
  # ensuring tectomt is actually inited!
  pushd $TMT_ROOT ||  die "Can't chdir to TMT_ROOT $TMT_ROOT"
  . ./config/init_devel_environ.sh
  [ "\$TMT_OK" == 1 ] || die "Failed to init TectoMT"
  popd
fi

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=${SCRIPTS_ROOTDIR}

export MERTFLAGS="$MERTFLAGS"
echo export MERTFLAGS="$MERTFLAGS"

# clone some importnant executables
../../scripts/wiseln $MOSESCMD ./moses || die "Failed to clone moses"
../../scripts/wiseln $SCORENBEST ./scorenbest || die "Failed to clone scorenbest"
../../scripts/wiseln $TESTBLEU ./testbleu || die "Failed to clone testbleu"

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \
  ../$MODELSTEP/model/moses.ini \
  || die "Failed to clone ../$MODELSTEP/model/moses.ini"

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1


\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Absolutize failed"

`cat command.mert`


\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-opt \\
  ./mert-tuning/moses.ini evaluation.in \\
  || die "Filter for eval failed"

$MOSESPARALLELIZER \\
  -input-file ./evaluation.in \\
  -config ./filtered-for-eval-opt/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.opt.out \\
   || die "Translation of eval failed"

echo "Tuned BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
./testbleu evaluation.ref.0.factor0 < evaluation.opt.out | tee BLEU.opt \\
  || die "BLEU of evaluation.opt.out set failed"

echo "Detokenizing evaluation.opt.out"
\$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
  < evaluation.opt.out > evaluation.opt.txt


\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-std \\
  ./mert-tuning/run1.moses.ini evaluation.in || die "Filter for std failed"

$MOSESPARALLELIZER \\
  ./moses -input-file ./evaluation.in \\
  -config ./filtered-for-eval-std/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.std.out \\
   || die "Translation of std.eval failed"

echo "Default BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.std.out | tee BLEU.std
./testbleu evaluation.ref.0 < evaluation.std.out | tee BLEU.std \\
  || die "BLEU of evaluation.std.out set failed"

echo "Detokenizing evaluation.std.out"
\$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
< evaluation.std.out > evaluation.std.txt

echo "You could use the following to prepare detailed output for manual inpection"
echo ./moses -input-file ./evaluation.in -config \
  ./filtered-for-eval-opt/moses.ini \\
  -verbose 3 \\
  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > evaluation.opt.verbose

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

#!/bin/bash
# Dan's WMT corpora preparation. An eman step seed that knows ÚFAL paths to source files downloaded from the WMT web.
# The step preprocesses the downloaded corpus, saves the result and registers it with corpman.
# This solution is probably temporary. We may later want to replace it by standard corpus steps.

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

# Ensure all the required variables are set (or provide the default)
PLAYGROUND=$(cd .. ; pwd -P)
echo PLAYGROUND=$PLAYGROUND
STATMT=$PLAYGROUND/..
SCRIPTS=$STATMT/scripts
eman \
     defvar CORPUS help='news9euro|czeng|un|gigafren|yandex|news9all|gigaword|wmt2008|...|wmt2013|dev2014' \
     defvar PAIR default='' help='select language pair of newseuro and un; empty for other corpora' \
     defvar LANGUAGE help='language code (create separate step for each language)' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

if ! [ -z "$PAIR" ] ; then
  REGCORPUS="$CORPUS.$PAIR"
else
  REGCORPUS=$CORPUS
fi
echo The corpus will be registered as "$REGCORPUS".

# Create corpman info.
# The first field "-1" indicates that there are no columns in the corpus file.
# The last field "0" indicates that this corpus is not derived automatically from other corpora.
$PLAYGROUND/corpman register -- corpus.txt.gz -1 $REGCORPUS $LANGUAGE form -1 0 \
  || die "Cannot register corpus"

# Get the command that will find the corpus in the ÚFAL network and cat it.
# The command will be generated but it will not be checked now whether the files actually are there.
READINPUT=$($PLAYGROUND/ufal-wmt-data.pl $CORPUS $LANGUAGE $PAIR)
if [ -z "$READINPUT" ] ; then
  die "Cannot figure out where to get the corpus"
fi

# Don't continue if we are not preparing the step yet
[ -z "$INIT_ONLY" ] || exit 0

cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
set -o pipefail
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }

expected_nl=-1
echo Processing $READINPUT
$READINPUT \\
  | $SCRIPTS/specchar.pl -l $LANGUAGE \\
  | $SCRIPTS/tok-dan.pl \\
  | $SCRIPTS/fill_empty_sentences.pl \\
  | $SCRIPTS/escape_pipe_lt_gt.pl \\
  | gzip -c > corpus.txt.gz \\
  || die "Failed to prepare the corpus"
echo "Checking output number of lines of corpus.txt.gz"
nl=\$(zcat corpus.txt.gz | wc -l)
if [ \$expected_nl -eq -1 ]; then
  echo "Re-registering the corpus with \$nl lines."
  $PLAYGROUND/corpman register -- corpus.txt.gz -1 $REGCORPUS $LANGUAGE form \$nl 0 \\
    || die "Cannot register corpus"
else
  # just a check
  [ "\$nl" -eq "\$expected_nl" ] \\
    || die "Mismatched number of lines, expected \$expected_nl, got \$nl"
fi

$PLAYGROUND/corpman reindex \\
  || echo "Failed to force reindexing"

echo Done.
eman succeed \$mydir

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

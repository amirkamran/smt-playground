#!/bin/bash
# Dan's WMT corpora preparation. An eman step seed that knows ÃšFAL paths to source files downloaded from the WMT web.
# The step preprocesses the downloaded corpus, saves the result and registers it with corpman.
# This solution is probably temporary. We may later want to replace it by standard corpus steps.

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

# Ensure all the required variables are set (or provide the default)
# Note that we also require STATMT, which is constant w.r.t. individual experiments.
# However, we do not define it as one of the variables defining the step (because its value will be the same in all our experiments).
# It points to the current user's working copy of the StatMT repository. You should set it in your login config file.
[ -z "$STATMT" ] && die "\$STATMT must contain the full path to the root of your working copy of the StatMT repository (one level above playground)"
SCRIPTS=$STATMT/scripts
PLAYGROUND=$STATMT/playground
eman \
     defvar CORPUS help='newseuro|un|gigafren|newsall|gigaword|wmt2008|...|wmt2012' \
     defvar NEPAIR default='' help='select language pair of newseuro; empty for other corpora' \
     defvar LANGUAGES help='codes of languages to process, space-delimited' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

###!!!
# Create corpman info, the last field "1" indicates that this corpus is derived
# automatically
$PLAYGROUND/corpman register -- corpus.txt.gz -1 $OUTCORP $OUTLANG $OUTFACTS $OUTLINECOUNT $DERIVED \
|| die "Can't register corpus"

###!!!
READINPUT="zcat /net/data/wmt2012/giga-fren.release2.\$l.gz"

# Don't continue if we are not preparing the step yet
[ -z "$INIT_ONLY" ] || exit 0

cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
set -o pipefail
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }

for l in $LANGUAGES ; do
  echo Processing $READINPUT
  $READINPUT | $SCRIPTS/tok-dan.pl | $SCRIPTS/fill_empty_sentences.pl | $SCRIPTS/escape_pipe_lt_gt.pl | gzip -c > corpus.\$l.txt.gz \\
  || die "Failed to prepare the corpus"
  echo "Checking output number of lines of corpus.\$l.txt.gz"
  nl=\$(zcat corpus.\$l.txt.gz | wc -l)
done


if [ $OUTLINECOUNT -eq -1 ]; then
  echo "Re-registering the corpus with \$nl lines."
  $PLAYGROUND/corpman register -- corpus.txt.gz -1 $OUTCORP $OUTLANG $OUTFACTS \$nl $DERIVED \\
    || die "Can't register corpus"
else
  # just a check
  [ "\$nl" -eq $OUTLINECOUNT ] \\
  || die "Mismatched number of lines, expected $OUTLINECOUNT, got \$nl"
fi

rm -f \$mydir/../corpman.index || echo "Failed to force reindexing"

echo Done.
eman succeed \$mydir

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

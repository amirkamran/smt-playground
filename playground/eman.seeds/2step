#!/bin/bash
## Save our own copy of moses

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }
set -o pipefail

TESTBLEU=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/testbleu.asm

if [ -z "$PHASE1MERT" ] \
|| [ -z "$BINARIES" ] \
|| [ -z "$PHASE2MERT" ]; then
  echo "You must set: "
  echo "  \$BINARIES to the step containing compiled tools"
  echo "  \$PHASE1MERT to the directory that contains the mert for phase 1"
  echo "  \$PHASE2MERT to the directory that contains the mert for phase 2"
  echo "and optionally"
  echo "  \$TESTCORP to the corpus for evaluation (defaults to the one of phase1"
  echo "    SRCAUG is implied by PHASE1MERT"
  echo "    REFAUG is implied by PHASE2MERT"
  echo "and optionally"
  echo "  \$SEARCH to beam or cube"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$SERIAL to yes to disable qsub"
  echo "  \$STACK to stacksize"
  echo "  \$TAGPREF to tag prefix"
  exit 1
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

[ ! -z "$SEARCH" ] || SEARCH=beam

[ ! -z "$TESTCORP" ] || eval `cat ../$PHASE1MERT/eman.vars | grep TESTCORP`

echo $PHASE1MERT > eman.deps
echo $PHASE2MERT >> eman.deps
echo $BINARIES >> eman.deps

eval `cat ../$PHASE1MERT/eman.vars | grep SRCAUG`
[ ! -z "$SRCAUG" ] || die "Missed SRCAUG"
eval `cat ../$PHASE2MERT/eman.vars | grep REFAUG`
[ ! -z "$REFAUG" ] || die "Missed REFAUG"
MIDAUG=`cat ../$PHASE2MERT/eman.vars | grep SRCAUG | cut -d= -f2`
[ ! -z "$MIDAUG" ] || die "Missed MIDAUG"

echo "$TAGPREF"SRC"$SRCAUG".MID"$MIDAUG".TGT"$REFAUG".$SEARCH$STACK.FIRST.`cat ../$PHASE1MERT/eman.tag`.SECOND.`cat ../$PHASE2MERT/eman.tag` > eman.tag

echo SETTING eman.tag: `cat eman.tag`


cat << KONEC > eman.vars
BINARIES=$BINARIES
PHASE1MERT=$PHASE1MERT
PHASE2MERT=$PHASE2MERT
TESTCORP=$TESTCORP
SRCAUG=$SRCAUG
REFAUG=$REFAUG
SEARCH=$SEARCH
MOSESFLAGS="$MOSESFLAGS"
GRIDFLAGS="$GRIDFLAGS"
SERIAL=$SERIAL
STACK=$STACK
KONEC

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

PHASE1TESTCORP=`cat ../$PHASE1MERT/eman.vars | grep TESTCORP | cut -d= -f2`
[ ! -z "$PHASE1TESTCORP" ] || die "Missed PHASE1TESTCORP"


# clone some importnant executables
wiseln $MOSESCMD ./moses || die "Failed to clone moses"
wiseln $TESTBLEU ./testbleu || die "Failed to clone testbleu"


../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || die "evaluation.in"
../augmented_corpora/augment.pl --dump $TESTCORP/$REFAUG > evaluation.ref.0 || die "evaluation.ref"

echo Checking tune and eval corp sizes
[ `wc -l < evaluation.in` -gt 0 ] || die "Empty evaluation.in"
[ `wc -l < evaluation.in` == `wc -l < evaluation.ref.0` ] || die "Mismatching evaluation.ref.0"

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/+.*//'`
if ! echo "test" | $SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"

if [ ! -z "$STACK" ]; then
  MOSESFLAGS="$MOSESFLAGS -s $STACK"
fi

[ ! -z "$JOBS" ] || JOBS=15

if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" | tee FAILED >&2; exit 1 ; }

renice 10 \$\$

# core files limited to 1 byte
ulimit -c 1

phase1dir=../$PHASE1MERT
phase2dir=../$PHASE2MERT

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=${SCRIPTS_ROOTDIR}

if [ $PHASE1TESTCORP == $TESTCORP ]; then
  echo "No need to translate first step, reuse output from $PHASE1MERT"
  cp \$phase1dir/evaluation.opt.out ./evaluation.mid
else
  echo "Will translate evaluation.in with $PHASE1MERT"

  ## Clone the moses.ini and source files
  mkdir phase1model || die "mkdir failed"
  cd phase1model || die "mkdir failed"
  \$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
    ../\$phase1dir/moses.abs.ini || die "clone failed"
  # Absolutize
  \$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini \\
    > moses.abs.ini || die "Absolutize failed"
  # Apply weights
  ../../tools/apply_weights_from_moses_ini.pl \\
    ../\$phase1dir/mert-tuning/moses.ini < moses.abs.ini > moses.opt.ini \\
    || die "Apply failed"
  cd ..
  # Filter for our input
  \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-phase1 \\
    ./phase1model/moses.opt.ini evaluation.in \\
    || die "Filter for phase 1 failed"

  $MOSESPARALLELIZER \\
    -input-file ./evaluation.in \\
    -config ./filtered-for-phase1/moses.ini \\
    | sed 's/^ *//' \\
    | sed 's/ *$//' \\
    > evaluation.mid \\
     || die "Translation of phase 1 failed"
fi

## Clone the moses.ini and source files
mkdir phase2model || die "mkdir failed"
cd phase2model || die "mkdir failed"
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
  ../\$phase2dir/moses.abs.ini || die "clone failed"
# Absolutize
\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini \\
  > moses.abs.ini || die "Absolutize failed"
# Apply weights
../../tools/apply_weights_from_moses_ini.pl \\
  ../\$phase2dir/mert-tuning/moses.ini < moses.abs.ini > moses.opt.ini \\
  || die "Apply failed"
cd ..
# Filter for our input
\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-phase2 \\
  ./phase2model/moses.opt.ini evaluation.mid \\
  || die "Filter for phase 2 failed"

$MOSESPARALLELIZER \\
  -input-file ./evaluation.mid \\
  -config ./filtered-for-phase2/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.opt.out \\
   || die "Translation of phase 2 failed"

echo "Final BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
./testbleu evaluation.ref.0 < evaluation.opt.out | tee BLEU.opt \\
  || die "BLEU of evaluation.opt.out set failed"

echo "Detokenizing evaluation.opt.out"
\$SCRIPTS_ROOTDIR/recaser/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
  < evaluation.opt.out > evaluation.opt.txt

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

#!/bin/bash
# just translates the given corpus, no reference to evaluate against
#
# also outputs the alignments produced by Moses

## Save our own copy of moses

if [ -z "$MERTEXP" ] \
|| [ -z "$BINARIES" ] \
|| [ -z "$TESTCORP" ]; then
  echo "You must set: "
  echo "  \$BINARIES to the step containing compiled tools"
  echo "  \$MERTEXP to the directory that contains the model, incl. all files, the optimized ini will be used"
  echo "  \$TESTCORP to the corpus for evaluation"
  echo "and optionally"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$JOBS to number of jobs or 0 for serial"
  echo "  \$ITER to the ITER-th BEST at... (will use run(ITER+1).moses.ini)"
  exit 1
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

[[ -d ../exp.mert.$MERTEXP ]] && MERTEXP=exp.mert.$MERTEXP

if [[ ! -d ../$MERTEXP ]]; then
  echo "Experiment not found: $MERTEXP"
  exit 1
fi

JOBS=${JOBS:-10}

if [ ! -z "$ITER" ]; then
  iterprefix=run$(($ITER+1)).
  itertag=ITER$ITER
fi

echo `cat ../$MERTEXP/eman.tag`"$itertag"TEST$TESTCORP > eman.tag

if [ -z "$REFAUG" ]; then
  eval `cat ../$MERTEXP/eman.vars | grep 'REFAUG='`
  echo "Inheriting REFAUG: $REFAUG"
fi

MODELEXP=`cat ../$MERTEXP/info.modelexp`
SAVEMODELEXP=$MODELEXP
eval `cat ../$MODELEXP/eman.vars` || exit 1
MODELEXP=$SAVEMODELEXP

# hack to make toa look like align
[ -z "ALISYM" ] || ALISYM=gdfa
[ -z "OUTALILABEL" ] \
  || OUTALILABEL=$ALISYM-$(echo $REFAUG-$SRCAUG | tr '+.' '--')

# XXX musim prohodit src a tgt aug?
cat << KONEC > eman.vars
BINARIES=$BINARIES
MERTEXP=$MERTEXP
TESTCORP=$TESTCORP
MOSESFLAGS="$MOSESFLAGS"
GRIDFLAGS="$GRIDFLAGS"
OUTALILABEL="$OUTALILABEL"
ALISYM="$ALISYM"
JOBS=$JOBS
ITER=$ITER
CORPUS=$TESTCORP-toa
SRCALIAUG=$REFAUG
TGTALIAUG=$SRCAUG
KONEC
echo $MODELEXP > ./info.modelexp
echo $MERTEXP > info.mertexp

echo $MERTEXP > ./eman.deps
echo $BINARIES >> eman.deps

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# clone some importnant executables
../../scripts/wiseln $MOSESCMD ./moses || exit 1

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1

../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || exit 1

echo Checking eval corp size
[ `wc -l < evaluation.in` -gt 0 ] || exit 1

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | $SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi


# for running this command, qsub is allowed, although we're going to submit jobs ourselves
# echo "no" > qsub-allowed

SRC_LANG="`echo $SRCAUG | cut -d+ -f1`"
SRC_FACT="`echo $SRCAUG | cut -d+ -f2- | tr '+' '|'`"
TGT_LANG="`echo $REFAUG | cut -d+ -f1`"
TGT_FACT="`echo $REFAUG | cut -d+ -f2- | tr '+' '|'`"

# auxiliary script submitted for each chunk of input
# run with args: lines_max index
cat << KONEC > toa.job
#!/bin/bash

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

mydir=`pwd`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

index_formatted=\`printf "%05d" \$QRUNCMD_JOBNUM\`

# copy STDIN
tempfile=\$mydir/input\$index_formatted
while read line; do
  echo "\$line" >> \$tempfile;
done;
$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl \\
  filtered-for-eval\$index_formatted ./moses.abs.ini \$tempfile 2>&1 \\
  || die "Failed to filter"

# create a named pipe to redirect Moses output
fifoname=/mnt/h/tmp/\`mktemp | xargs basename\`
mkfifo \$fifoname || die "Failed to create named pipe"
gzip -c <\$fifoname >evaluation\$index_formatted.opt.out.gz &

./moses -v 2 -search-algorithm 1 \\
  $MOSESFLAGS \\
  -input-file \$tempfile \\
  -config ./filtered-for-eval\$index_formatted/moses.ini \\
  2>&1 >\$fifoname \\
  | ../get_alignment.pl | gzip -c >alignment\$index_formatted.gz \\
  || die "Failed to translate"

rm \$fifoname
rm \$tempfile
KONEC

chmod +x toa.job

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
renice 10 \$\$

mydir=\`pwd\`

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \\
  --symlink \\
  ../$MERTEXP/mert-tuning/"$iterprefix"moses.ini || die "Failed to clone"

\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Failed to absolutize"

cat evaluation.in | ../../scripts/qruncmd -jobs=30 -split-to-size=5000 ./toa.job || die "Failed to filter and translate"

ls alignment?*.gz | sort -n | xargs zcat > alignment
ls evaluation?*.opt.out.gz | sort -n | xargs zcat > evaluation.opt.out

# rm alignment?*.gz evaluation?*opt.out.gz
gzip alignment
gzip evaluation.opt.out

mkdir ../augmented_corpora/$TESTCORP-toa
../../scripts/wiseln ../augmented_corpora/$TESTCORP/LINECOUNT ../augmented_corpora/$TESTCORP-toa
gzip -c < evaluation.in > ../augmented_corpora/$TESTCORP-toa/$SRC_LANG.gz
../../scripts/wiseln evaluation.opt.out.gz ../augmented_corpora/$TESTCORP-toa/$TGT_LANG.gz 
../../scripts/wiseln alignment.gz ../augmented_corpora/$TESTCORP-toa/$OUTALILABEL.gz 
echo "$SRC_FACT" >../augmented_corpora/$TESTCORP-toa/$SRC_LANG.info
echo "$TGT_FACT" >../augmented_corpora/$TESTCORP-toa/$TGT_LANG.info
echo ali > ../augmented_corpora/$TESTCORP-toa/$OUTALILABEL.info

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

#!/bin/bash
# eman seed for compiling moses

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

# Ensure all the required variables are set (or provide the default)
eman defvar SRILMSTEP default='' help='where is SRILM compiled, or empty' \
     defvar IRSTLMSTEP default='' help='where is IRSTLM compiled, or empty' \
     defvar VWSTEP default='' type=optstep help='where is Vowpal Wabbit compiled, or empty (implies to use the damt_phrase branch of Moses' \
     defvar BOOSTPATH inherit=VWSTEP:BOOSTPATH default='' help='compile against a non-system-wide boost' \
     defvar MOSESBRANCH default='' help='check out a custom branch of Moses' \
     defvar BJAMARGS default=' --kenlm-max-order=6 -a ' help='any extra arguments for the compilation of Moses' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

if [ ! -z "$VWSTEP" ]; then
  [ -z "$MOSESBRANCH" ] || [ "$MOSESBRANCH" == damt_phrase ] \
    || die "Using VWSTEP implies MOSESBRANCH=damt_phrase, you ask for $MOSESBRANCH"

  MOSESBRANCH=damt_phrase
  VWBOOSTPATH=$(eman get-var $VWSTEP BOOSTPATH)

  # ensure that moses and vw have the same boost
  [ "$BOOSTPATH" == "$VWBOOSTPATH" ] \
    || die "Boost paths of mosesgiza and vw are incompatible: $BOOSTPATH vs. $VWBOOSTPATH"
fi

cat > eman.command << KONEC
#!/bin/bash -x
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
set -x # detailed logging of eman.command
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte


# Obtain GIZA++
tar xzf ../../src/giza-pp.tgz || die "giza-pp missing"
cd giza-pp || die "Failed to chdir to giza-pp"
## Not patching, otherwise giza often segfaults
#patch -p1 < ../../../src/giza-pp.patch-for-300words \
#  || die "Failed to patch GIZA"
patch -p1 < ../../../src/giza-pp.patch-against-binsearch \
  || die "Failed to patch GIZA"
cd GIZA++-v2 && make -j4 && make -j4 snt2cooc.out && cd ../ || die "GIZA failed"
cd mkcls-v2 && make -j4 && cd ../ || die "mkcls failed"
cd ../ || die "chdir back failed"

mkdir -p bin || die "Can't make bindir"
ln -s ../giza-pp/GIZA++-v2/GIZA++ ../giza-pp/GIZA++-v2/snt2cooc.out \
   ../giza-pp/mkcls-v2/mkcls bin/

# Obtain Moses
echo "Obtaining Moses"
git clone https://github.com/moses-smt/mosesdecoder.git moses \\
|| die "Failed to clone moses"

cd moses || die "Chdir failed"
[ -z "$MOSESBRANCH" ] || git checkout $MOSESBRANCH \\
|| die "Failed to check out branch $MOSESBRANCH"

[ -z "$SRILMSTEP" ] || SRILMARG=" --with-srilm=\`eman path $SRILMSTEP\`/srilm "
[ -z "$IRSTLMSTEP" ] || IRSTLMARG=" --with-irstlm=\`eman path $IRSTLMSTEP\`/install "
[ -z "$VWSTEP" ] || VWARG=" --with-vw=\`eman path $VWSTEP\`/vowpal_wabbit "
[ -z "$BOOSTPATH" ] || BOOSTARGS=" --with-boost=$BOOSTPATH "
BJAMARGS="$BJAMARGS "

./bjam -j4 --with-giza=\$mydir/bin \\
  \$SRILMARG \$IRSTLMARG \$BJAMARGS \$BOOSTARGS \$VWARG || die "Build failed"
chmod -R a+rx .

cd ../ || die "chdir back failed"

cd bin || die "chdir to bin/ failed"
ln -s ../moses/bin/moses \\
   ../moses/bin/moses_chart \\
   ../moses/bin/symal \\
   ./ \\
|| die "symlinking failed"


# Standard command footer
set +x # no more detailed logging of eman.command
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

#!/bin/bash
# eman seed for Discriminative Lexicon Model cept-table and the corresponding
# extract-file

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar ALISTEP default='' type=optstep \
    help="the step where alignment was constructed, implied by ALICORP+ALISYM+ALILABEL" \
  defvar MOSESSTEP type=reqstep inherit=ALISTEP:GIZASTEP \
    help="the step containing compiled tools" \
  defvar SRCCORP inherit=ALISTEP:CORPUS \
    help="source corpus name" \
  defvar TGTCORP same_as=SRCCORP help="target corpus name, can be omitted if equal to SRCCORP" \
  defvar SRCAUG help="the string describing lang+factors of src corpus" \
  defvar TGTAUG help="the string describing lang+factors of tgt corpus" \
  defvar ALICORP same_as=SRCCORP help="alignment corpus name, can be omitted if equal to SRCCORP" \
  defvar ALISYM default='gdfa' help='which alignment to use for the translation model' \
  defvar ALILABEL inherit=ALISTEP \
    help="the custom label as given when creating the alignment" \
  defvar ALIORREVALI default='ali' \
    help="set to 'ali' for standard usecase but to 'revali' for revgdfa etc." \
  defvar EMAN_MEM default='6g' help="memory limit at cluster" \
  defvar EMAN_DISK default='20g' help="required free space at temp" \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

PLAYGROUND=`eman path`

# check for qsub
[ -n "`which qsub`" ] || export JOBS=0
[ -n "`qsub -help nonexistent-file 2>&1 | grep GE 2>/dev/null`" ] || export JOBS=0

MOSESSTEPDIR=`eman path $MOSESSTEP`
SCRIPTS_ROOTDIR="$MOSESSTEPDIR/moses/scripts"

if [ ! -z "$ALISTEP" ]; then
  # check (if the alistep is indeed an align step and not a trick like idali)
  # whether the corpus matches
  KNOWNALICORPUS=$(eman getvar $ALISTEP CORPUS | perl -pe 's/^"(.*)"$/$1/')
  [ "$KNOWNALICORPUS" == "$SRCCORP" ] \
    || [ "$KNOWNALICORPUS" == "" ] \
    || die "Nonmatching alistep: different corpus: $KNOWNALICORPUS vs $SRCCORP"
  KNOWNALILABEL=$(eman getvar $ALISTEP ALILABEL | perl -pe 's/^"(.*)"$/$1/')
  [ "$KNOWNALILABEL" == "$ALILABEL" ] \
    || [ "$KNOWNALILABEL" == "" ] \
    || die "Nonmatching alistep: different ALILABEL: $KNOWNALILABEL vs $ALILABEL"
fi

# Don't continue if we are not preparing the step yet
[ -z "$INIT_ONLY" ] || exit 0

cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
set -o pipefail
mydir=\$(pwd)
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

function mkcorpus() {
  $PLAYGROUND/corpman --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman \$1))
  if [ "\${step_file_col[2]}" == "-1" ]; then
    STEPPATH=\$(eman path \${step_file_col[0]})
    $PLAYGROUND/../scripts/wiseln \$STEPPATH/\${step_file_col[1]} \\
      \$2.gz \
    || die "Failed to clone \$2 corpus \$1"
  else
    echo "Selecting the column from \$step_file_col"
    eval \$($PLAYGROUND/corpman --cmd \$1) \\
    | gzip -c > \$2.gz
  fi
}

mkcorpus $SRCCORP/$SRCAUG corpus.src
mkcorpus $TGTCORP/$TGTAUG corpus.tgt
mkcorpus $ALICORP/$ALISYM-$ALILABEL+ali alignment.orig
# we can't rely on the factor revali because concatenated corpora like
# c-news+c-fiction/foo+revali would be attempted per parts
if [ "$ALIORREVALI" == revali ]; then
  echo "Reversing the alignment..."
  zcat alignment.orig.gz \\
  | ../../scripts/reverse_alignment.pl \\
  | gzip -c > alignment.gz
else
  ln -s alignment.orig.gz alignment.gz
fi

alilen=\`zcat alignment.gz | wc -l\`
srclen=\`zcat corpus.src.gz | wc -l\`
tgtlen=\`zcat corpus.tgt.gz | wc -l\`
if [[ \$alilen -ne \$srclen ]] \\
   || [[ \$alilen -ne \$tgtlen ]] \\
; then
  echo "Incompatible corpus lengths:"
  echo "\$alilen  alignment.custom.gz"
  echo "\$srclen  corpus.src.gz"
  echo "\$tgtlen  corpus.tgt.gz"
  die "Dying for incompatible corpus lengths"
fi

\$SCRIPTS_ROOTDIR/training/extract_words_dlm.py \\
  <(zcat corpus.src.gz) \\
  <(zcat corpus.tgt.gz) \\
  <(zcat alignment.gz) \\
| tee >(gzip -c > extract-file.gz) \\
| \$SCRIPTS_ROOTDIR/training/make_index_dlm.py \\
| gzip -c > cept-table.gz \\
|| die "Failed to prepare the context factors file"

echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

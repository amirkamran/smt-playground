#!/bin/bash
# eman seed for running mert to combine various mt systems

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }
set -o pipefail

if [ -z "$SYSTEMS" ] || [ -z "$DEVCORP" ] \
  || [ -z "$TARGMODEL" ] \
  || [ -z "$TESTCORP" ] \
  || [ -z "$SRCAUG" ] \
  || [ -z "$REFAUG" ] \
  ; then
  echo "You must set: "
  echo "  \$SYSTEMS to ':::'-delimited lists of translation steps (eval, mert, 2step, ...)"
  echo "            each is expected to produce evaluation.opt.{out,ali}"
  echo "            (and later allow eman tb -s /=TESTCORP\$/=...\$)"
  echo "  \$TARGMODEL to the s.model. containing the moses.ini to apply on the target side"
  echo "  \$DEVCORP to the corpus for tuning ... expected to match with SYSTEMS/TESTCORP"
  echo "  \$TESTCORP to the corpus for evaluation (not used yet)"
  echo "  \$SRCAUG to the source lang+factors"
  echo "  \$REFAUG to the target (reference) lang+factors"
  echo "and optionally"
  echo "  \$BILANGFLAGS to things like --featset=arclevel,primarcs"
  echo "  \$SEARCH to beam or cube"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$MERTFLAGS to any further flags"
  echo "  \$GRIDFLAGS to any further flags"
  echo "  \$SERIAL to yes to disable qsub"
  echo "  \$STACK to stacksize"
  echo "  \$TAGPREF to tag prefix"
  echo "  \$BINARIES to the dir of executables"
  exit 1
fi

USERBINARIES=$BINARIES

echo $TAGPREF$SYSTEMS"DEV"$DEVCORP".S"$SEARCH$STACK$MERTTAG > eman.tag

sid=1
rm -f systems
for s in `echo $SYSTEMS | sed 's/:::/ /g'`; do
  echo Including system $sid: $s
  echo $s >> systems
  echo $s >> eman.deps
  sysbinaries=`grep BINARIES ../$s/eman.vars | cut -d= -f2-`
  if [ -z "$INHERBINARIES" ]; then
    INHERBINARIES=$sysbinaries
  else
    if [ "$INHERBINARIES" != "$sysbinaries" ]; then
      if [ -z "$USERBINARIES" ]; then
        die "Conflicting binaries: $INHERBINARIES vs $sysbinaries, specify BINARIES=..."
      else
        # the user provides something, so the conflict does not matter
        # just remember there are no unambiguous binaries to inherit
        INHERBINARIES=conflicting
      fi
    fi
  fi
  sid=$(($sid+1))
done
numsystems=$(($sid-1))
echo $numsystems > numsystems

if [ -z "$USERBINARIES" ]; then
  # inheriting, ignoring our SAVEBINARIES
  BINARIES="$INHERBINARIES"
else
  # user has supplied the binaries
  BINARIES=$USERBINARIES
  if [ "$USERBINARIES" != "$INHERBINARIES" ]; then
    # not unambiguously inherited, our go the deps.
    echo $BINARIES >> eman.deps
  fi
fi

SCRIPTS_ROOTDIR="`pwd`/../$BINARIES/moses/scripts"
MOSESCMD="`pwd`/../$BINARIES/bin/moses"

TESTBLEU=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/testbleu.asm

[ ! -z "$SEARCH" ] || SEARCH=cube

[ ! -z "$JOBS" ] || JOBS=15

[ $JOBS == 0 ] && SERIAL=yes

cat << KONEC > eman.vars
BINARIES=$BINARIES
SYSTEMS=$SYSTEMS
TARGMODEL=$TARGMODEL
DEVCORP=$DEVCORP
TESTCORP=$TESTCORP
SRCAUG=$SRCAUG
REFAUG=$REFAUG
SEARCH=$SEARCH
BILANGFLAGS="$BILANGFLAGS"
MERTFLAGS="$MERTFLAGS"
GRIDFLAGS="$GRIDFLAGS"
MOSESFLAGS="$MOSESFLAGS"
SERIAL=$SERIAL
STACK=$STACK
KONEC

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# create local copies of the corpora
../augmented_corpora/augment.pl --dump $DEVCORP/$SRCAUG > tuning.in || die "tuning.in"
../augmented_corpora/augment.pl --dump $DEVCORP/$REFAUG > tuning.ref.0 || die "tuning.ref"
#../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || die "evaluation.in"
#../augmented_corpora/augment.pl --dump $TESTCORP/$REFAUG > evaluation.ref.0 || die "evaluation.ref"

#echo Checking tune and eval corp sizes
#[ `wc -l < evaluation.in` -gt 0 ] || die "Empty evaluation.in"
#[ `wc -l < evaluation.in` == `wc -l < evaluation.ref.0` ] || die "Mismatching evaluation.ref.0"

#../../scripts/reduce_factors.pl 0 < evaluation.ref.0 > evaluation.ref.0.factor0 \
#  || die "Failed to cut factor 0 of evaluation.ref.0"

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
if ! echo "test" | $SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
MERTMOSES="\$SCRIPTS_ROOTDIR/training/mert-moses.pl"

if [ ! -z "$STACK" ]; then
  MOSESFLAGS="$MOSESFLAGS -s $STACK"
fi


if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment
. /net/projects/SGE/user/sge_profile

mydir=\`pwd\`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

renice 10 \$\$

# core files limited to 1 byte
ulimit -c 1

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=${SCRIPTS_ROOTDIR}

SRILMDIR1="\`cat ../$BINARIES/srilm.path\`/bin/"
SRILMDIR2="\`cat ../$BINARIES/srilm.path\`/bin/i686/"
export PATH=\$SRILMDIR1:\$SRILMDIR2:\$PATH
  # for ngram-count

export MERTFLAGS="$MERTFLAGS"
echo export MERTFLAGS="$MERTFLAGS"

# clone some importnant executables
../../scripts/wiseln $MOSESCMD ./moses || die "Failed to clone moses"
../../scripts/wiseln $TESTBLEU ./testbleu || die "Failed to clone testbleu"

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \
  ../$TARGMODEL/model/moses.ini \
  || die "Failed to clone ../$TARGMODEL/model/moses.ini"

# Construct empty-phrasetable
echo -n "void ||| void ||| 0.0" \
| ../$BINARIES/moses/misc/processPhraseTable -ttable 0 0 - -nscores 1 \
    -out empty-phrasetable

# Construct the lattice from the hypotheses and the corpus
sid=1
rm -f hypcorpus.text
for s in \`cat systems\`; do
  paste ../\$s/evaluation.opt.out ../\$s/evaluation.opt.ali \\
  | gzip -c \\
  > system.\$sid.outali.gz \\
  || die "Failed to get output or ali from \$s"
  cat ../\$s/evaluation.opt.out \\
  >> hypcorpus.text \\
  || die "Failed to append hypcorpus.text"
  sid=\$((\$sid+1))
done

gzip hypcorpus.text || die "Failed to gzip hypcorpus.text"

# Construct hyplm
HYPORDER=3
zcat hypcorpus.text.gz | ngram-count -order \$HYPORDER \\
  -text - \\
  -lm hypcorpus.lm \\
  $LMFLAGS \\
  -interpolate -kndiscount \\
|| die "Failed to prepare hypcorpus.lm"

gzip hypcorpus.lm || die "Failed to gzip hypcorpus.lm"

# create the input lattice as FSA
../../scripts/make_bilang_for_syscomb.pl tuning.in system.*.outali.gz \
| gzip -c \
> tuning.bilang.gz \
|| die "Failed to make bilang"

zcat tuning.bilang.gz \\
| ../../scripts/bilang2rover.pl $numsystems \\
    --tokenize-at-underscore \\
    $BILANGFLAGS \\
| gzip -c \\
> tuning.fsa.gz


# guess link parameter count
linkparams=\$(zcat tuning.fsa.gz | head -n1 | cut -d" " -f4 | tr , '\n' | wc -l)

mv moses.ini moses.orig.ini || die "Failed to move moses.ini"
../tools/fix_moses_ini_for_syscomb.pl empty-phrasetable \\
  hypcorpus.lm.gz \$HYPORDER \\
  --link-param-count=\$linkparams \\
  < moses.orig.ini > moses.ini \\
|| die "Failed to modify moses.ini"


\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Absolutize failed"


zcat tuning.fsa.gz \
| \$SCRIPTS_ROOTDIR/generic/fsa2plf.pl \
> tuning.in

[ \`wc -l < tuning.in\` == \`wc -l < tuning.ref.0\` ] \
  || die "Mismatching tuning.ref.0 and tuning.in"

#--obo-scorenbest=\`pwd\`/scorenbest
$MERTMOSES \
  --no-filter-phrase-table \\
  --inputtype=2 \\
  --working-dir=mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 0 -verbose 0 $MOSESFLAGS $SEARCHFLAG" \\
  --starting-weights-from-ini \
  || die "Mert failed"

# \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-opt \\
#   ./mert-tuning/moses.ini evaluation.in \\
#   || die "Filter for eval failed"
# 
# $MOSESPARALLELIZER \\
#   -input-file ./evaluation.in \\
#   -config ./filtered-for-eval-opt/moses.ini \\
#   | sed 's/^ *//' \\
#   | sed 's/ *$//' \\
#   > evaluation.opt.out \\
#    || die "Translation of eval failed"
# 
# echo "Tuned BLEU:"
# #\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
# ./testbleu evaluation.ref.0.factor0 < evaluation.opt.out | tee BLEU.opt \\
#   || die "BLEU of evaluation.opt.out set failed"
# 
# echo "Detokenizing evaluation.opt.out"
# \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
#   < evaluation.opt.out > evaluation.opt.txt
# 
# 
# \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-std \\
#   ./mert-tuning/run1.moses.ini evaluation.in || die "Filter for std failed"
# 
# $MOSESPARALLELIZER \\
#   ./moses -input-file ./evaluation.in \\
#   -alignment-output-file ./evaluation.ali \\
#   -config ./filtered-for-eval-std/moses.ini \\
#   | sed 's/^ *//' \\
#   | sed 's/ *$//' \\
#   > evaluation.std.out \\
#    || die "Translation of std.eval failed"
# 
# echo "Default BLEU:"
# #\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.std.out | tee BLEU.std
# ./testbleu evaluation.ref.0 < evaluation.std.out | tee BLEU.std \\
#   || die "BLEU of evaluation.std.out set failed"
# 
# echo "Detokenizing evaluation.std.out"
# \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
# < evaluation.std.out > evaluation.std.txt
# 
# echo "You could use the following to prepare detailed output for manual inpection"
# echo ./moses -input-file ./evaluation.in -config \
#   ./filtered-for-eval-opt/moses.ini \\
#   -verbose 3 \\
#   2>&1
# #  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
# #  | head -c 300k \\
# #  > evaluation.opt.verbose

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

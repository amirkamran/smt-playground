#!/bin/bash
# eman seed for running mert to combine various mt systems

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=$(eman path)

eman \
  defvar SYSTEMS \
    help="':::'-delimited lists of translation steps (eval, mert, 2step, ...), each is expected to allow eman tb -s /=TESTCORP\$/=...\$)" \
  defvar TARGMODELSTEP type=reqstep \
    help="the s.model. containing the moses.ini to apply on the target side" \
  defvar DEVCORP \
    help="the corpus for tuning ... expected to match with SYSTEMS/TESTCORP" \
  defvar SRCAUG default="" \
    help="language+factors to translate" \
  defvar REFAUG default="" \
    help="language that will be created by translating" \
  defvar BILANGFLAGS default="" \
    help="things like --featset=arclevel,primarcs for bilang2rover" \
  defvar MAKEBFLAGS default="" \
    help="things like --force-similar-alignment for make_bilang_for_syscomb" \
  defvar HYPLMORDER default=3 \
    help="the order of the LM based on the hypothesesm, default 3, zero to disable" \
  defvar SEARCH default=cube help='the search type (beam or cube)' \
  defvar JOBS default=15 help='how many jobs to spawn (0 to disable SGE)' \
  defvar GRIDFLAGS default='' help='further flags for qsub' \
  defvar MOSESFLAGS default=''  help='further flags for moses' \
  defvar MOSESSTEP type=reqstep \
    help="the step containing compiled tools" \
  defvar SRILMSTEP type=reqstep help='where is srilm compiled' \
  defvar COMBMERTSTEP type=optstep \
    help="the combmert where we optimized the weights" \
|| exit 1

eval `eman bash-loadvars`

#USERBINARIES=$BINARIES

# echo $TAGPREF$SYSTEMS"DEV"$DEVCORP".S"$SEARCH$STACK$MERTTAG > eman.tag

sid=1
rm -f systems
rm -f eman.deps
for s in `echo $SYSTEMS | sed 's/:::/ /g'`; do
  echo Including system $sid: $s
  echo $s >> systems
  eman add-deps . $s
#  sysbinaries=`grep BINARIES ../$s/eman.vars | cut -d= -f2-`
#  if [ -z "$INHERBINARIES" ]; then
#    INHERBINARIES=$sysbinaries
#  else
#    if [ "$INHERBINARIES" != "$sysbinaries" ]; then
#      if [ -z "$USERBINARIES" ]; then
#        die "Conflicting binaries: $INHERBINARIES vs $sysbinaries, specify BINARIES=..."
#      else
#        # the user provides something, so the conflict does not matter
#        # just remember there are no unambiguous binaries to inherit
#        INHERBINARIES=conflicting
#      fi
#    fi
#  fi
  sid=$(($sid+1))
done
numsystems=$(($sid-1))
echo $numsystems > numsystems

#if [ -z "$USERBINARIES" ]; then
#  # inheriting, ignoring our SAVEBINARIES
#  BINARIES="$INHERBINARIES"
#else
#  # user has supplied the binaries
#  BINARIES=$USERBINARIES
#  if [ "$USERBINARIES" != "$INHERBINARIES" ]; then
#    # not unambiguously inherited, our go the deps.
#    echo $BINARIES >> eman.deps
#  fi
#fi

# convert the dependencies to absolute paths
SRILMDIR=`eman path $SRILMSTEP`
MOSESSTEPDIR=$(eman path $MOSESSTEP)
SCRIPTS_ROOTDIR="$MOSESSTEPDIR/moses/scripts"
MOSESCMD="$MOSESSTEPDIR/bin/moses"

[ $JOBS == 0 ] && SERIAL=yes

firstdevcorp=$(echo $DEVCORP | cut -d: -f1)

# create local copies of the corpora
$PLAYGROUND/corpman --dump $firstdevcorp/$SRCAUG > tuning.in \
  || die "Failed to create tuning.in from $firstdevcorp/$SRCAUG"
refidx=0
for devcorp in $(echo $DEVCORP | tr ':' ' '); do
  $PLAYGROUND/corpman --dump $devcorp/$REFAUG > tuning.ref.$refidx \
    || die "Failed to create tuning.ref.$refidx from $devcorp/$REFAUG"
  [ `wc -l < tuning.in` == `wc -l < tuning.ref.$refidx` ] \
    || die "Mismatching number of lines in tuning.ref.$refidx taken from $devcorp/$REFAUG"
  refidx=$(($refidx+1))
done

echo Checking tuning corp size
[ `wc -l < tuning.in` -gt 0 ] || die "Empty tuning.in"

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0


#TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/^\(..\).*/\1/'`
#if ! echo "test" | $SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl \
#       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
#  echo "Defaulting to 'en' as the targetlang for detokenizer."
#  TARGETLAN_FOR_DETOKENIZER=en
#fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
MERTMOSES="\$SCRIPTS_ROOTDIR/training/mert-moses.pl"

if [ ! -z "$STACK" ]; then
  MOSESFLAGS="$MOSESFLAGS -s $STACK"
fi


if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' $GRIDFLAGS -p -100 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' $GRIDFLAGS -p -100 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

# init grid environment; sometimes needed for ./augment.pl
. /net/projects/SGE/user/sge_profile

SRILMDIR1="\$(cat $SRILMDIR/srilm.path)/bin/"
SRILMDIR2="\$(cat $SRILMDIR/srilm.path)/bin/i686/"

export PATH=\$SRILMDIR1:\$SRILMDIR2:\$PATH
  # for ngram-count

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=${SCRIPTS_ROOTDIR}

export MERTFLAGS="$MERTFLAGS"
echo export MERTFLAGS="$MERTFLAGS"

# clone some importnant executables
../../scripts/wiseln $MOSESCMD ./moses || die "Failed to clone moses"

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \
  ../$TARGMODEL/model/moses.ini \
  || die "Failed to clone ../$TARGMODEL/model/moses.ini"

# Construct empty-phrasetable
echo -n "void ||| void ||| 0.0" \
| $MOSESSTEPDIR/moses/misc/processPhraseTable -ttable 0 0 - -nscores 1 \
    -out empty-phrasetable

# Construct the lattice from the hypotheses and the corpus
sid=1
rm -f hypcorpus.text
for s in \`cat systems\`; do
  paste ../\$s/evaluation.opt.out ../\$s/evaluation.opt.ali \\
  | gzip -c \\
  > system.\$sid.outali.gz \\
  || die "Failed to get output or ali from \$s"
  cat ../\$s/evaluation.opt.out \\
  >> hypcorpus.text \\
  || die "Failed to append hypcorpus.text"
  sid=\$((\$sid+1))
done

gzip hypcorpus.text || die "Failed to gzip hypcorpus.text"

if [ $HYPLMORDER != 0 ]; then
  # Construct hyplm
  if zcat hypcorpus.text.gz | ngram-count -order $HYPLMORDER \\
      -text - \\
      -lm hypcorpus.lm \\
      $LMFLAGS \\
      -interpolate -kndiscount; then
    echo "hypcorpus.lm succeeded with knsmooth"
  else
    zcat hypcorpus.text.gz | ngram-count -order $HYPLMORDER \\
      -text - \\
      -lm hypcorpus.lm \\
      $LMFLAGS \\
      -interpolate \\
    || die "Failed to prepare hypcorpus.lm"
  fi
  gzip hypcorpus.lm || die "Failed to gzip hypcorpus.lm"
fi

echo "Creating bilang (flags: $MAKEBFLAGS)"
# create the input lattice as FSA
../../scripts/make_bilang_for_syscomb.pl $tuningevaluation.in system.*.outali.gz \\
    $MAKEBFLAGS \\
| gzip -c \\
> $tuningevaluation.bilang.gz \\
|| die "Failed to make bilang"

zcat $tuningevaluation.bilang.gz \\
| ../../scripts/bilang2rover.pl $numsystems \\
    --tokenize-at-underscore \\
    $BILANGFLAGS \\
| gzip -c \\
> $tuningevaluation.fsa.gz


# guess link parameter count
linkparams=\$(zcat $tuningevaluation.fsa.gz | head -n1 | cut -d" " -f4 | tr , '\n' | wc -l)

mv moses.ini moses.orig.ini || die "Failed to move moses.ini"
../tools/fix_moses_ini_for_syscomb.pl empty-phrasetable \\
  hypcorpus.lm.gz $HYPLMORDER \\
  --link-param-count=\$linkparams \\
  < moses.orig.ini > moses.ini \\
|| die "Failed to modify moses.ini"


\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Absolutize failed"


zcat $tuningevaluation.fsa.gz \
| \$SCRIPTS_ROOTDIR/generic/fsa2plf.pl \
> $tuningevaluation.fsa.in

[ \`wc -l < $tuningevaluation.fsa.in\` == \`wc -l < $tuningevaluation.ref.0\` ] \
  || die "Mismatching $tuningevaluation.ref.0 and $tuningevaluation.fsa.in"

if [ ! -z "$COMBMERT" ]; then
  echo "Using weights from $COMBMERT"

  ../tools/apply_weights_from_moses_ini.pl ../$COMBMERT/mert-tuning/moses.ini \\
  < ./moses.abs.ini > moses.abs.opt.ini \\
  || die "Failed to apply weights from $COMBMERT"

  $MOSESPARALLELIZER \\
    -input-file ./$tuningevaluation.fsa.in \\
    -config ./moses.abs.opt.ini \\
    -inputtype 2 \\
    | sed 's/^ *//' \\
    | sed 's/ *$//' \\
    > evaluation.opt.out \\
     || die "Translation of eval failed"
  
  echo "Tuned BLEU:"
  #\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
  ./testbleu evaluation.ref.0 < evaluation.opt.out | tee BLEU.opt \\
    || die "BLEU of evaluation.opt.out set failed"

  echo "Detokenizing evaluation.opt.out"
  \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
    < evaluation.opt.out > evaluation.opt.txt
else
  echo "Training our weights"

  #--obo-scorenbest=\`pwd\`/scorenbest
  $MERTMOSES \
    --no-filter-phrase-table \\
    --inputtype=2 \\
    --working-dir=mert-tuning \\
    \`pwd\`/$tuningevaluation.fsa.in \\
    \`pwd\`/$tuningevaluation.ref. \\
    \`pwd\`/moses \\
    \`pwd\`/moses.abs.ini \\
    $MERTGRIDARGS \\
    \$MERTFLAGS \\
    --decoder-flags="-dl 0 -verbose 0 $MOSESFLAGS $SEARCHFLAG" \\
    --starting-weights-from-ini \
    || die "Mert failed"
fi
#--obo-scorenbest=\`pwd\`/scorenbest

# \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-opt \\
#   ./mert-tuning/moses.ini evaluation.in \\
#   || die "Filter for eval failed"
# 
# 
# 
# \$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-std \\
#   ./mert-tuning/run1.moses.ini evaluation.in || die "Filter for std failed"
# 
# $MOSESPARALLELIZER \\
#   ./moses -input-file ./evaluation.in \\
#   -alignment-output-file ./evaluation.ali \\
#   -config ./filtered-for-eval-std/moses.ini \\
#   | sed 's/^ *//' \\
#   | sed 's/ *$//' \\
#   > evaluation.std.out \\
#    || die "Translation of std.eval failed"
# 
# echo "Default BLEU:"
# #\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.std.out | tee BLEU.std
# ./testbleu evaluation.ref.0 < evaluation.std.out | tee BLEU.std \\
#   || die "BLEU of evaluation.std.out set failed"
# 
# echo "Detokenizing evaluation.std.out"
# \$SCRIPTS_ROOTDIR/tokenizer/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
# < evaluation.std.out > evaluation.std.txt
# 
# echo "You could use the following to prepare detailed output for manual inpection"
# echo ./moses -input-file ./evaluation.in -config \
#   ./filtered-for-eval-opt/moses.ini \\
#   -verbose 3 \\
#   2>&1
# #  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
# #  | head -c 300k \\
# #  > evaluation.opt.verbose

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

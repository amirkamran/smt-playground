#!/bin/bash
# Prepare moses translation model, i.e. extract phrases

set -o pipefail
function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

if [ -z "$DECODINGSTEPS" ] \
  || [ -z "$SRCCORP" ] \
  || [ -z "$SRCAUG" ] \
  || [ -z "$TGTAUG" ] \
  || ( [ -z "$ALIAUG" ] && [ -z "$ALISTEP" ] ) \
  || ( [ -z "$BINARIES" ] && [ -z "$ALISTEP" ] ) \
  ; then
  echo "You must set: "
  echo "  \$BINARIES to the step containing compiled tools; inherited from ALISTEP"
  echo "  \$SRCCORP to source corpus name"
  echo "  \$TGTCORP to target corpus name, can be omitted if equal to SRCCORP"
  echo "  \$SRCAUG to the string describing lang+factors of src corpus"
  echo "  \$TGTAUG same for target, e.g. cs+0+1+pos+lc"
  echo "  \$ALICORP to target corpus name, can be omitted if equal to SRCCORP"
  echo "  \$ALIAUG to the string describing the 'language', e.g. 'ali'"
  echo "    or \$ALISTEP to the step where alignment was constructed"
  echo "  \$DECODINGSTEPS to specification of decoding steps, e.g. 0a1-0+1-1"
  echo "And optionally:"
  echo "  \$REORDERING to reordering models, eg. orientation-bidirectional-fe"
  echo "  \$REORDFACTORS to factors to use, eg. 0,1-0+0-0"
  echo "  \$TRAININGFLAGS to flags for train-factored-phrase-model.perl"
  echo "And optionally for sigfiltering:"
  echo "  \$THRESHOLD to a+e, a-e of a number (see moses/sigtest-filter)"
  echo "  \$CUTOFF to phrase-table cutoff"
  exit 1
fi

# TGT and ALI corp default to srccorp
[ ! -z "$TGTCORP" ] || TGTCORP=$SRCCORP
[ ! -z "$ALICORP" ] || ALICORP=$SRCCORP

# get ali corpus and aug from alistep
if [ ! -z "$ALISTEP" ]; then
  ALICORP=`cat ../$ALISTEP/eman.vars | grep ^CORPUS | cut -d= -f2`
  ALIAUG=`cat ../$ALISTEP/eman.vars | grep ^OUTALILABEL | cut -d= -f2`
  echo $ALISTEP >> eman.deps

  # inherit binaries
  [ ! -z "$BINARIES" ] \
    || BINARIES=`cat ../$ALISTEP/eman.vars | grep ^BINARIES | cut -d= -f2`
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"
WORKSPACE="`pwd`/../$BINARIES/"

echo $BINARIES >> eman.deps


[ ! -z "$CUTOFF" ] || CUTOFF=0

if echo "$DECODINGSTEPS" | grep , ; then
  echo "\$DECODINGSTEPS ($DECODINGSTEPS) contains a comma! Use 'a' instead, e.g. 0a1-0+1-1"
  exit 1
fi

if [ -z "$REORDERING" ]; then
  REORDERING=distance
  REORDFACTORS="0-0"
  DOTREORDTAG=""
else
  if [ -z "$REORDFACTORS" ]; then
    echo "Set \$REORDFACTORS to the factors to use!"
    exit 1
  fi
  DOTREORDTAG=`echo ".$REORDERING.r$REORDFACTORS" | sed 's/\([a-z][a-z]\)[a-z]*/\1/g'`
fi

cat << KONEC > eman.vars
BINARIES=$BINARIES
SRCCORP=$SRCCORP
TGTCORP=$TGTCORP
ALICORP=$ALICORP
SRCAUG=$SRCAUG
TGTAUG=$TGTAUG
ALISTEP=$ALISTEP
ALIAUG=$ALIAUG
DECODINGSTEPS=$DECODINGSTEPS
REORDERING=$REORDERING
REORDFACTORS=$REORDFACTORS
TRAININGFLAGS="$TRAININGFLAGS"
CUTOFF=$CUTOFF
THRESHOLD=$THRESHOLD
KONEC

echo $SRCAUG > var-SRCAUG
echo $TGTAUG > var-TGTAUG

if [ $SRCCORP == $TGTCORP ] ; then
  echo SRC$SRCCORP+$SRCAUG.TGT+$TGTAUG.ALI$ALIAUG.DEC$DECODINGSTEPS$DOTREORDTAG > eman.tag
else
  echo SRC$SRCCORP+$SRCAUG.TGT$TGTCORP+$TGTAUG.ALI$ALIAUG.DEC$DECODINGSTEPS$DOTREORDTAG > eman.tag
fi

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

DECRYPT=$WORKSPACE/../tools/decrypt_mapping_steps_for_training.pl
[ -x $DECRYPT ] || die "Missing: $DECRYPT"

DECRYPTEDSTEPS=`eval $DECRYPT $DECODINGSTEPS`


cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

mydir=\`pwd\`

set -o pipefail
function die() { echo XXX; echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

renice 10 \$\$

## Prepare the corpus from more factors
export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

mkdir corpus

cd corpus
wiseln \`../../augmented_corpora/augment.pl $SRCCORP/$SRCAUG\` corpus.src.gz \\
  || die "Failed to clone source corpus"
wiseln \`../../augmented_corpora/augment.pl $TGTCORP/$TGTAUG\` corpus.tgt.gz \\
  || die "Failed to clone target corpus"
cd ..

wiseln \`../augmented_corpora/augment.pl --ignore-blank-lines $ALICORP/$ALIAUG\` alignment.custom.gz \
  || die "Failed to clone alignment file"

alilen=\`zcat alignment.custom.gz | wc -l\`
srclen=\`zcat corpus/corpus.src.gz | wc -l\`
tgtlen=\`zcat corpus/corpus.tgt.gz | wc -l\`
if [[ \$alilen -ne \$srclen ]] \\
   || [[ \$alilen -ne \$tgtlen ]] \\
; then
  echo "Incompatible corpus lengths:"
  echo "\$alilen  alignment.custom.gz"
  echo "\$srclen  corpus.src.gz"
  echo "\$tgtlen  corpus.tgt.gz"
  die "Dying for incompatible corpus lengths"
fi

mkdir model

tempdir=\`mktemp -d /mnt/h/tmp/exp.model.XXXXXX\`
echo "COPYING SELF TO TEMPDIR: \$tempdir"
rsync -avz --exclude 'log*' --exclude '*.hardlink' * \$tempdir/ \\
  || die "Failed to rsync"
echo "COPIED, used disk space:"

df \$tempdir

if \\
  \$SCRIPTS_ROOTDIR/training/train-model.perl \\
        --force-factored-filenames \\
	    --first-step 4 --last-step 6 \\
	    --root-dir \$tempdir \\
	    --alignment-file=alignment \\
	    --alignment=custom \\
	    --corpus=corpus/corpus \\
	    --f src --e tgt \\
        $TRAININGFLAGS \\
	    $DECRYPTEDSTEPS \\
  && echo "Now will filter translation models" \\
  && $WORKSPACE/../tools/filter-several-phrasetables.pl \\
        --srccorp=$SRCCORP --srcaug=$SRCAUG \\
        --tgtcorp=$TGTCORP --tgtaug=$TGTAUG \\
        --cutoff=$CUTOFF --threshold=$THRESHOLD \\
        --workspace=$WORKSPACE \\
        \$tempdir/model/phrase-table.* \\
  && echo "Now will extract generation models" \\
  && \$SCRIPTS_ROOTDIR/training/train-model.perl \\
        --force-factored-filenames \\
	    --first-step 8 --last-step 8 \\
	    --root-dir \$tempdir \\
	    --alignment-file=alignment \\
	    --alignment=custom \\
	    --corpus=corpus/corpus \\
	    --f src --e tgt \\
        $TRAININGFLAGS \\
	    $DECRYPTEDSTEPS \\
; then
  success=1
  rm -f \$tempdir/model/extract* # delete temporary files of extracted phrases
  echo "COPYING TEMPDIR \$tempdir BACK"
  rsync -uavz \$tempdir/* ./ || exit 1
  echo "COPIED"

  echo Deleting \$tempdir
  rm -rf \$tempdir
else
  success=0
  rsync -uavz \$tempdir/log* ./ || exit 1
  echo "ONLY log copied back. Majority of files left here: \$tempdir"
fi

[ \$success == 1 ] || die "THERE WERE ERRORS!! See above."

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

#!/bin/bash
# Prepare moses translation model, i.e. extract phrases

set -o pipefail
function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

eman \
  defvar ALISTEP type=reqstep default='' help="the step where alignment was constructed" \
  defvar type=reqstep inherit=ALISTEP BINARIES \
    help="the step containing compiled tools; inherited from ALISTEP" \
  defvar SRCCORP help="source corpus name, CORPUS from ALISTEP is used if omitted" \
  defvar TGTCORP sameas=SRCCORP help="target corpus name, can be omitted if equal to SRCCORP" \
  defvar SRCAUG help="the string describing lang+factors of src corpus" \
  defvar TGTAUG help="the string describing lang+factors of tgt corpus" \
  defvar ALICORP sameas=SRCCORP help="target corpus name, can be omitted if equal to SRCCORP" \
  defvar ALIAUG inherit=ALISTEP:OUTALILABEL \
    help="the string describing the 'language', e.g. 'ali'" \
  defvar DECODINGSTEPS help="specification of decoding steps, e.g. 0a1-0+1-1" \
  defvar REORDERING default='distance' \
    help="reordering models, eg. orientation-bidirectional-fe" \
  defvar REORDFACTORS default='0-0' help="factors to use, eg. 0,1-0+0-0" \
  defvar TRAININGFLAGS default='' help="flags for train-factored-phrase-model.perl" \
  defvar THRESHOLD default='' help="a+e, a-e of a number (see moses/sigtest-filter)" \
  defvar CUTOFF default=0 help="phrase-table cutoff" \
|| exit 1

eval `eman bash-loadvars`

[ -z $ALISTEP ] || ALISTEP=`eman path $ALISTEP`
PLAYGROUND=`eman path`
BINARIES=`eman path $BINARIES`
SCRIPTS_ROOTDIR="$BINARIES/moses/scripts"

if echo "$DECODINGSTEPS" | grep , ; then
  echo "\$DECODINGSTEPS ($DECODINGSTEPS) contains a comma! Use 'a' instead, e.g. 0a1-0+1-1"
  exit 1
fi

if [ -z "$REORDERING" ]; then
  REORDERING=distance
  REORDFACTORS="0-0"
  DOTREORDTAG=""
else
  if [ -z "$REORDFACTORS" ]; then
    echo "Set \$REORDFACTORS to the factors to use!"
    exit 1
  fi
  DOTREORDTAG=`echo ".$REORDERING.r$REORDFACTORS" | sed 's/\([a-z][a-z]\)[a-z]*/\1/g'`
fi

if [ $SRCCORP == $TGTCORP ] ; then
  eman add-tag "SRC$SRCCORP+$SRCAUG.TGT+$TGTAUG.ALI$ALIAUG.DEC$DECODINGSTEPS$DOTREORDTAG"
else
  eman add-tag "SRC$SRCCORP+$SRCAUG.TGT$TGTCORP+$TGTAUG.ALI$ALIAUG.DEC$DECODINGSTEPS$DOTREORDTAG"
fi

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

DECRYPT=$PLAYGROUND/tools/decrypt_mapping_steps_for_training.pl
[ -x $DECRYPT ] || die "Missing: $DECRYPT"

DECRYPTEDSTEPS=`eval $DECRYPT $DECODINGSTEPS`

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

mydir=\`pwd\`

set -o pipefail
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }

renice 10 \$\$

function mkcorpus() {
  $PLAYGROUND/corpman --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman \$1))
  if [ "\${step_file_col[2]}" == "-1" ]; then
    $PLAYGROUND/../scripts/wiseln $PLAYGROUND/\${step_file_col[0]}/\${step_file_col[1]} \\
      corpus.\$2.gz \
    || die "Failed to clone \$2 corpus \$1"
  else
    echo "Selecting the column from \$step_file_col"
    eval \$($PLAYGROUND/corpman --cmd $1) \\
    | gzip -c > corpus.\$2.gz
  fi
}

## Prepare the corpus from more factors
export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

mkdir corpus

cd corpus
mkcorpus $SRCCORP/$SRCAUG corpus.src
mkcorpus $SRCCORP/$SRCAUG corpus.tgt
cd ..

if [ ! -z "$ALISTEP" ]; then
  $PLAYGROUND/../scripts/wiseln $ALISTEP/alignment.gz alignment.custom.gz \
    || die "Failed to clone alignment file"
else
  mkcorpus $ALICORP/$ALIAUG alignment.custom
fi

alilen=\`zcat alignment.custom.gz | wc -l\`
srclen=\`zcat corpus/corpus.src.gz | wc -l\`
tgtlen=\`zcat corpus/corpus.tgt.gz | wc -l\`
if [[ \$alilen -ne \$srclen ]] \\
   || [[ \$alilen -ne \$tgtlen ]] \\
; then
  echo "Incompatible corpus lengths:"
  echo "\$alilen  alignment.custom.gz"
  echo "\$srclen  corpus.src.gz"
  echo "\$tgtlen  corpus.tgt.gz"
  die "Dying for incompatible corpus lengths"
fi

mkdir model

maintempdir=/mnt/h/tmp
[ -d \$maintempdir ] || maintempdir=/tmp

tempdir=\`mktemp -d \$maintempdir/exp.model.XXXXXX\`
echo "COPYING SELF TO TEMPDIR: \$tempdir"
rsync -avz --exclude 'log*' --exclude '*.hardlink' * \$tempdir/ \\
  || die "Failed to rsync"
echo "COPIED, used disk space:"

df \$tempdir

if \\
  \$SCRIPTS_ROOTDIR/training/train-model.perl \\
        --force-factored-filenames \\
	    --first-step 4 --last-step 6 \\
	    --root-dir \$tempdir \\
	    --alignment-file=alignment \\
	    --alignment=custom \\
	    --corpus=corpus/corpus \\
	    --f src --e tgt \\
        --score-options="--WordAlignment" \\
        $TRAININGFLAGS \\
	    $DECRYPTEDSTEPS \\
  && echo "Now will filter translation models" \\
  && $PLAYGROUND/tools/filter-several-phrasetables.pl \\
        --srccorp=$SRCCORP --srcaug=$SRCAUG \\
        --tgtcorp=$TGTCORP --tgtaug=$TGTAUG \\
        --cutoff=$CUTOFF --threshold=$THRESHOLD \\
        --workspace=$BINARIES \\
        \$tempdir/model/phrase-table.* \\
  && echo "Now will extract generation models" \\
  && \$SCRIPTS_ROOTDIR/training/train-model.perl \\
        --force-factored-filenames \\
	    --first-step 8 --last-step 8 \\
	    --root-dir \$tempdir \\
	    --alignment-file=alignment \\
	    --alignment=custom \\
	    --corpus=corpus/corpus \\
	    --f src --e tgt \\
        $TRAININGFLAGS \\
	    $DECRYPTEDSTEPS \\
; then
  success=1
  rm -f \$tempdir/model/extract* # delete temporary files of extracted phrases
  echo "COPYING TEMPDIR \$tempdir BACK"
  rsync -uavz \$tempdir/* ./ || exit 1
  echo "COPIED"

  echo Deleting \$tempdir
  rm -rf \$tempdir
else
  success=0
  rsync -uavz \$tempdir/log* ./ || exit 1
  echo "ONLY log copied back. Majority of files left here: \$tempdir"
fi

[ \$success == 1 ] || die "THERE WERE ERRORS!! See above."

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

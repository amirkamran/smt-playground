#!/bin/bash

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

set -o pipefail

if [ -z "$BINARIES" ]; then
  echo "Set \$BINARIES to the step containing compiled tools"
  exit 1
fi

SCRIPTS_ROOTDIR="`cat ../$BINARIES/scripts.rootdir`"
BINDIR="`pwd`../$BINARIES/bin/"

if [ -z "$LMS" ] \
|| [ -z "$HELDOUT" ]; then
  echo "You must set: "
  echo "  \$LMS to colon-delimited list of lm experiments"
  echo "  \$HELDOUT to the shortname of corpus"
  echo "And optionally: "
  echo "  \$BINARIZE=yes to binarize the model"
  echo "  \$PROMISEAUGMATCH=yes to ignore difference in corpaugs"
  exit 1
fi

if [[ ! -d "$SRILMDIR1" ]] || [[ ! -d "$SRILMDIR2" ]]; then
  echo "   SRILMDIR1: $SRILMDIR1"
  echo "or SRILMDIR2: $SRILMDIR2"
  echo "not found."
  exit 1
fi

if [[ x$BINARIZE == xyes ]] && [[ ! -d "$IRSTLMDIR" ]] ; then
  echo "   IRSTLMDIR: $IRSTLMDIR"
  echo "not found."
  exit 1
fi

if [ x$BINARIZE == xyes ]; then
  lmtypetag=.blm
else
  lmtypetag=
fi

echo $BINARIES > eman.deps

first=1
for lmexp in ${LMS//:/ }; do
  echo $lmexp >> eman.deps # add the dependency
  [ -d ../$lmexp ] || die "Not found: $lmexp"
  thisorder=`cat ../$lmexp/var-ORDER`
  thisaug=`cat ../$lmexp/eman.vars | grep CORPAUG | cut -d= -f2`
  if [ $first == 1 ] ; then
    FILELIST=../$lmexp/corpus.lm
    NAMELIST=`cat ../$lmexp/var-CORP`
    first=0
  else
    # extend the filelists
    FILELIST=$FILELIST,../$lmexp/corpus.lm
    NAMELIST=$NAMELIST++`cat ../$lmexp/var-CORP`
  fi
  if [ -z "$ORDER" ] ; then
    ORDER=$thisorder
    CORPAUG=$thisaug
  else
    [ x$thisorder == x$ORDER ] \
    || die "Mismatch in ORDER: Expected $ORDER, $lmexp has $thisorder"
    [ x$thisaug == x$CORPAUG ] || [ x$PROMISEAUGMATCH == xyes ] \
    || die "Mismatch in CORPAUG: Expected $CORPAUG, $lmexp has $thisaug"
  fi
done

[ ! -z $ORDER ] || die "Failed to determine LM order"
[ ! -z $CORPAUG ] || die "Failed to determine LM augment"

# Remember the core settings
echo MIX.$NAMELIST+$CORPAUG.$ORDER$lmtypetag > eman.tag

cat << KONEC > eman.vars
LMS=$LMS
HELDOUT=$HELDOUT
CORPAUG=$CORPAUG
ORDER=$ORDER
BINARIZE=$BINARIZE
KONEC

echo $ORDER > var-ORDER
echo $NAMELIST > var-CORP


TMP=/mnt/h/tmp


cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment; sometimes needed for ./augment.pl
. /net/projects/SGE/user/sge_profile

mydir=\`pwd\`

renice 10 \$\$
function die() { echo "\$@" | tee \$mydir/FAILED >&2; exit 1 ; }
set -o pipefail

export PATH=\$PATH:$BINDIR
export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

echo WORKSPACE: $WORKSPACE
export WORKSPACE=$WORKSPACE

export PATH=$SRILMDIR1:$SRILMDIR2:\$PATH

echo "Using this ngram-count:"
which ngram

HELDOUTSOURCE=\`../augmented_corpora/augment.pl $HELDOUT/$CORPAUG\`
echo "Got HELDOUTSOURCE: \$HELDOUTSOURCE"

[ -s "\$HELDOUTSOURCE" ] || die "Failed to prepare heldout corpus";

wiseln \$HELDOUTSOURCE heldout.text.gz \
  || die "Failed to make local backup of corpus \$HELDOUTSOURCE"

zcat heldout.text.gz > heldout.text

echo Mixing LMS...
\$WORKSPACE/moses/scripts/ems/support/interpolate-lm.perl \\
  --tuning heldout.text \\
  --name corpus.lm \\
  --lm $FILELIST \\
  --srilm=$SRILMDIR2 \\
  --tempdir=$TMP \\
  || die "Mixing models failed"

if [ x$BINARIZE == xyes ]; then
  $IRSTLMDIR/compile-lm corpus.lm corpus.blm \\
  || die "Binarization FAILED"
fi

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh eman.command
fi

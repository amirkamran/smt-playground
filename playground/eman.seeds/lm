#!/bin/bash

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }

set -o pipefail

if [ -z "$CORP" ] \
|| [ -z "$CORPAUG" ] \
|| [ -z "$BINARIES" ] \
|| [ -z "$ORDER" ]; then
  echo "You must set: "
  echo "  \$BINARIES to the step containing compiled tools"
  echo "  \$CORP to the shortname of corpus"
  echo "  \$CORPAUG to the factors used for lm"
  echo "  \$ORDER to lm order"
  echo "And optionally: "
  echo "  \$PARTS to number of parts to use when building a huge lm"
  echo "  \$BINARIZE=yes to binarize the model"
  exit 1
fi

BINDIR="`pwd`../$BINARIES/bin/"

if [ ! -f ../$BINARIES/srilm.path ]; then
  echo "SRILM not found in $BINARIES"
  exit 1
fi

SRILMDIR1="`cat ../$BINARIES/srilm.path`/bin/"
SRILMDIR2="`cat ../$BINARIES/srilm.path`/bin/i686/"

if [ x$BINARIZE == xyes ]; then
  if [ ! -f ../$BINARIES/irstlm.path ]; then
    echo "Asking for LM binarization and IRSTLM not found in $BINARIES";
    exit 1
  fi
  IRSTLMDIR="`cat ../$BINARIES/irstlm.path`/bin/"
  lmtypetag=.blm
else
  lmtypetag=
fi

if [ -z "$PARTS" ]; then
  PARTS=1
fi

# Remember the core settings
echo $CORP+$CORPAUG.$ORDER$lmtypetag > eman.tag

cat << KONEC > eman.vars
BINARIES=$BINARIES
CORP=$CORP
CORPAUG=$CORPAUG
ORDER=$ORDER
BINARIZE=$BINARIZE
PARTS=$PARTS
KONEC

echo $ORDER > var-ORDER
echo $CORP > var-CORP

echo $BINARIES > eman.deps


# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# Run checks in the preparation phase
[ -d ../augmented_corpora/$CORP ] || die "Can't find corpus $CORP"

# Emit the main script to be used in the running phase

KNDISCOUNTSFROMTHREE=`seq 3 $ORDER | sed 's/\(.*\)/-kndiscount\1/' | tr '\n' ' '`

cat << KONEC > eman.command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment; sometimes needed for ./augment.pl
. /net/projects/SGE/user/sge_profile

mydir=\`pwd\`

renice 10 \$\$
function die() { echo "\$@" >&2 ; echo FAILED > \$mydir/eman.status ; exit 1 ; }
set -o pipefail

export TMP=/mnt/h/tmp

export PATH=\$PATH:$BINDIR

export PATH=$SRILMDIR1:$SRILMDIR2:\$PATH

echo "Using this ngram-count:"
which ngram-count
echo "Using this make-big-lm:"
which make-big-lm

CORPSOURCE=\`../augmented_corpora/augment.pl $CORP/$CORPAUG\`
echo "Got CORPSOURCE: \$CORPSOURCE"

[ -s "\$CORPSOURCE" ] || die "Failed to prepare corpus";

../../scripts/wiseln \$CORPSOURCE corpus.text.gz \
  || die "Failed to make local backup of corpus \$CORPSOURCE"

echo Generating model from corpus...
if [ $PARTS == 1 ]; then
  echo "Simple counting"
  if zcat corpus.text.gz | ngram-count -order $ORDER \\
    -text - \\
    -lm corpus.lm \\
    -interpolate -kndiscount; then
    echo "Succeeded."
  else
    echo Second attempt, skip bigrams in knsmoothing
    zcat corpus.text.gz | ngram-count -order $ORDER \\
      -text - \\
      -lm corpus.lm \\
      -interpolate $KNDISCOUNTSFROMTHREE \\
    || die "ngram-count FAILED even with bigrams not knsmoothed"
  fi
else
  tempdir=\`mktemp -d /mnt/h/tmp/exp.lm.XXXXXX\`
  echo Counting in $PARTS parts, tempdir=\$tempdir
  zcat corpus.text.gz | split_even $PARTS \$tempdir/part --gzip \
  || die "Splitting FAILED"
  ls \$tempdir/part*.gz > \$tempdir/filelist

  echo Making batch counts
  make-batch-counts \$tempdir/filelist 1 zcat \$tempdir \\
    -order $ORDER \\
    -interpolate -kndiscount \\
    || die "make-batch-counts FAILED"

  echo Merging batch counts
  merge-batch-counts \$tempdir \\
    || die "merge-batch-counts FAILED"

  make-big-lm -read \$tempdir/*.ngrams.gz \\
    -name \$tempdir/biglm \\
    -order $ORDER \\
    -interpolate -kndiscount \\
    -lm \`pwd\`/corpus.lm \\
    || die "make-big-lm FAILED"

  echo Removing \$tempdir
  rm -rf \$tempdir
fi

if [ x$BINARIZE == xyes ]; then
  $IRSTLMDIR/compile-lm corpus.lm corpus.blm \\
  || die "Binarization FAILED"
fi

echo DONE > \$mydir/eman.status

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

#!/bin/bash
# eman seed for fake word alignment: given two corpora with identical number of words
# on each line, produces identity: 0-0 1-1 ...
# useful for training a recaser

function die() { echo "$@" >&2; exit 1; }
set -o pipefail  # safer pipes

PLAYGROUND=`eman path` # eman playground directory

# Ensure all the required variables are set (or provide the default)
eman \
  defvar CORPUS help='the corpus name' \
  defvar SRCALIAUG help='lang+factors for the source side' \
  defvar TGTALIAUG help='lang+factors for the target side' \
  defvar ALILABEL default='' \
    help='alignment "corpus" name, generated automatically if not given' \
|| exit 1

# Set local bash variables
eval `eman bash-loadvars`

if [ -z "$ALILABEL" ]; then
  export ALILABEL="$(echo $SRCALIAUG-$TGTALIAUG | tr '+.' '--')-ident"
  eman defvar ALILABEL
fi

# add source and target corpora to deps
eval $($PLAYGROUND/corpman --factorindex --init $CORPUS/$SRCALIAUG --bashvars=srccorpstep=stepname,srccorplen=linecount)
[ ! -z "$srccorpstep" ] || die "Missing source corpus"
eval $($PLAYGROUND/corpman --factorindex --init $CORPUS/$TGTALIAUG --bashvars=tgtcorpstep=stepname,tgtcorplen=linecount)
[ ! -z "$tgtcorpstep" ] || die "Missing target corpus"

[ $tgtcorplen == $srccorplen ] || die "Mismatching corpora lengths: src $srccorplen lines, tgt $tgtcorplen"

eman add-deps . $srccorpstep $tgtcorpstep

$PLAYGROUND/corpman register -- alignment.gz -1 $CORPUS gdfa-$ALILABEL ali $srccorplen \

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# Run checks in the preparation phase

# Emit the main script to be used in the running phase
cat > eman.command << KONEC
#!/bin/bash
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
mydir=\$(pwd)
set -o pipefail
function die() { echo "\$@" >&2 ; eman fail \$mydir ; exit 1 ; }
renice 10 \$\$
ulimit -c 1 # core files limited to 1 byte

function mkcorpus() {
  # If local copy of corpus already exists (we are running 'eman continue') remove it first.
  rm -f corpus.\$2.gz
  $PLAYGROUND/corpman --factorindex --wait \$1 || die "Failed to prepare \$1"
  step_file_col=(\$($PLAYGROUND/corpman --factorindex \$1))
  step_file=\$(eman path \${step_file_col[0]})/\${step_file_col[1]}
  scripts=$PLAYGROUND/../scripts
  # Source corpus contains just one column.
  if [ "\${step_file_col[2]}" == "-1" ]; then
    # Every token contains just the required factors.
    if [ "\${step_file_col[3]}" == "-1" ]; then
      \$scripts/wiseln \$step_file corpus.\$2.gz \\
      || die "Failed to clone \$2 corpus \$1"
    # There are additional factors that must be filtered out.
    else
      echo "Selecting the factors from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | \$scripts/reduce_factors.pl \${step_file_col[3]} | gzip -c > corpus.\$2.gz
      ###!!! The following did not work because the corpus was gzipped. The above should be better.
      #\$scripts/reduce_factors.pl \${step_file_col[3]} < \$step_file | gzip -c > corpus.\$2.gz
    fi
  # There are more than one column, the required column must be extracted.
  else
    # Every token contains just the required factors.
    if [ "\${step_file_col[3]}" == "-1" ]; then
      echo "Selecting the column from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | gzip -c > corpus.\$2.gz
    # There are additional factors that must be filtered out.
    else
      echo "Selecting the column and factors from \$step_file_col"
      eval \$($PLAYGROUND/corpman --factorindex --cmd \$1) | \$scripts/reduce_factors.pl \${step_file_col[3]} | gzip -c > corpus.\$2.gz
    fi
  fi
}

mkcorpus $CORPUS/$SRCALIAUG src
mkcorpus $CORPUS/$TGTALIAUG tgt

zcat < corpus.src.gz > corpus.src
zcat < corpus.tgt.gz > corpus.tgt

# align
paste corpus.src corpus.tgt | perl -lne '
my (\$s, \$t) = split "\\t";
my \$wc = scalar(split " ", \$s);
exit 1 if \$wc != scalar(split " ", \$t);
print join(" ", map { "\$_-\$_" } 0 .. \$wc - 1);
' | gzip -c > alignment.gz || die "Failed to align"

# Standard command footer
echo Done.
eman succeed \$mydir
echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC


#!/bin/bash
## Save our own copy of moses

function die() { echo "$@" | tee FAILED >&2; exit 1 ; }
set -o pipefail

echo MOSESCMD: $MOSESCMD
if [[ ! -x "$MOSESCMD" ]]; then
  echo "Set \$MOSESCMD to the binary of moses!"
  exit 1
fi

if [ -z "$SCRIPTS_ROOTDIR" ]; then
  echo "Set \$SCRIPTS_ROOTDIR accordingly!"
  exit 1
fi

SCORENBEST=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/scorenbest.asm
TESTBLEU=/home/bojar/diplomka/granty/euromatrix/treedecode/trunk/testbleu.asm

if [ -z "$MODELEXP" ] || [ -z "$DEVCORP" ] \
  || [ -z "$TESTCORP" ] \
  || [ -z "$REFAUG" ] \
  ; then
  echo "You must set: "
  echo "  \$MODELEXP to the directory that contains the model, incl. all files"
  echo "  \$DEVCORP to the corpus for tuning"
  echo "  \$TESTCORP to the corpus for evaluation"
  echo "  \$REFAUG to the target (reference) lang+factors"
  echo "and optionally"
  echo "  \$SEARCH to beam or cube"
  echo "  \$MOSESFLAGS to any further flags"
  echo "  \$MERTFLAGS to any further flags"
  echo "  \$SERIAL to yes to disable qsub"
  exit 1
fi

[ ! -z "$SEARCH" ] || SEARCH=beam

echo `cat ../$MODELEXP/TAG`"DEV"$DEVCORP".S"$SEARCH > TAG

echo SETTING TAG: `cat TAG`

SAVEMODELEXP=$MODELEXP
eval `cat ../$MODELEXP/VARS` || exit 1
MODELEXP=$SAVEMODELEXP

echo $MODELEXP > deps

echo $MODELEXP > info.modelexp

cat << KONEC > VARS
MODELEXP=$MODELEXP
DEVCORP=$DEVCORP
TESTCORP=$TESTCORP
SRCAUG=$SRCAUG
REFAUG=$REFAUG
SEARCH=$SEARCH
MERTFLAGS="$MERTFLAGS"
MOSESFLAGS="$MOSESFLAGS"
SERIAL=$SERIAL
KONEC

# Stop here if we are just initing ourselves
[ -z "$INIT_ONLY" ] || exit 0

# clone some importnant executables
wiseln $MOSESCMD ./moses || die "Failed to clone moses"
wiseln $SCORENBEST ./scorenbest || die "Failed to clone scorenbest"
wiseln $TESTBLEU ./testbleu || die "Failed to clone testbleu"


../augmented_corpora/augment.pl --dump $DEVCORP/$SRCAUG > tuning.in || die "tuning.in"
../augmented_corpora/augment.pl --dump $DEVCORP/$REFAUG > tuning.ref.0 || die "tuning.ref"
../augmented_corpora/augment.pl --dump $TESTCORP/$SRCAUG > evaluation.in || die "evaluation.in"
../augmented_corpora/augment.pl --dump $TESTCORP/$REFAUG > evaluation.ref.0 || die "evaluation.ref"

echo Checking tune and eval corp sizes
[ `wc -l < tuning.in` -gt 0 ] || die "Empty tuning.in"
[ `wc -l < evaluation.in` -gt 0 ] || die "Empty evaluation.in"
[ `wc -l < tuning.in` == `wc -l < tuning.ref.0` ] || die "Mismatching tuning.ref.0"
[ `wc -l < evaluation.in` == `wc -l < evaluation.ref.0` ] || die "Mismatching evaluation.ref.0"

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/+.*//'`
if ! echo "test" | $SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
MERTMOSES="\$SCRIPTS_ROOTDIR/training/mert-moses.pl"

[ ! -z "$JOBS" ] || JOBS=15

if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' -p -200 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' \$MERTFLAGS -decoder ./moses"
fi

case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

cat << KONEC > command
# This is the command to be run here
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" | tee FAILED >&2; exit 1 ; }

renice 10 \$\$

# core files limited to 1 byte
ulimit -c 1

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

## Clone the moses.ini and source files
\$SCRIPTS_ROOTDIR/training/clone_moses_model.pl \
  ../$MODELEXP/model/moses.ini \
  || die "Failed to clone ../$MODELEXP/model/moses.ini"

## We're using irstlm, change the lmodel-file type:
# ../set_lm_type.pl ./moses.ini || die "Failed to set lmtype" || exit 1


\$SCRIPTS_ROOTDIR/training/absolutize_moses_model.pl ./moses.ini > moses.abs.ini || die "Absolutize failed"

$MERTMOSES \
  --obo-scorenbest=\`pwd\`/scorenbest \\
  --working-dir=mert-tuning \\
  \`pwd\`/tuning.in \\
  \`pwd\`/tuning.ref. \\
  \`pwd\`/moses \\
  \`pwd\`/moses.abs.ini \\
  $MERTGRIDARGS \\
  \$MERTFLAGS \\
  --decoder-flags="-dl 6 $MOSESFLAGS $SEARCHFLAG" \\
  || die "Mert failed"


\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-opt \\
  ./mert-tuning/moses.ini evaluation.in \\
  || die "Filter for eval failed"

$MOSESPARALLELIZER \\
  -input-file ./evaluation.in \\
  -config ./filtered-for-eval-opt/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.opt.out \\
   || die "Translation of eval failed"

echo "Tuned BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
./testbleu evaluation.ref.0 < evaluation.opt.out | tee BLEU.opt \\
  || die "BLEU of evaluation.opt.out set failed"

echo "Detokenizing evaluation.opt.out"
\$SCRIPTS_ROOTDIR/recaser/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
  < evaluation.opt.out > evaluation.opt.txt


\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-std \\
  ./mert-tuning/run1.moses.ini evaluation.in || die "Filter for std failed"

$MOSESPARALLELIZER \\
  ./moses -input-file ./evaluation.in \\
  -config ./filtered-for-eval-std/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.std.out \\
   || die "Translation of std.eval failed"

echo "Default BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.std.out | tee BLEU.std
./testbleu evaluation.ref.0 < evaluation.std.out | tee BLEU.std \\
  || die "BLEU of evaluation.std.out set failed"

echo "Detokenizing evaluation.std.out"
\$SCRIPTS_ROOTDIR/recaser/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
< evaluation.std.out > evaluation.std.txt

echo "You could use the following to prepare detailed output for manual inpection"
echo ./moses -input-file ./evaluation.in -config \
  ./filtered-for-eval-opt/moses.ini \\
  -verbose 3 \\
  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > evaluation.opt.verbose

date > DONE

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

if [ "$RUN" == "yes" ]; then
  sh command
fi

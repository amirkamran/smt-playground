#!/bin/bash
# simple script to run evaluation at a given step

function die() {
  echo "$@" >&2
  exit 1
}
set -o pipefail

[ ! -z "$1" ] || die "usage: $0 exp-identifier run-index"

e=`./manager.pl --guess $1`

cd $e || die "Not an experiment: $e";

run=$2
[ ! -z "$run" ] || run=best

if [ $run == best ]; then
  run=`pickre --pick --re='BEST at ([0-9]+)' log.o* \
  | pickre --re=' => ([0-9.]+)' \
  | numsort n1 \
  | head -n1 \
  | cut -f2`
  echo "Best run so far: $run"
fi

inif=mert-tuning/run$run.moses.ini
newinif=moses.abs.run$run.ini
[ -e $inif ] || die "Can't find $inif"
[ ! -e $newinif ] || die "Won't replace $newinif"

../tools/apply_weights_from_moses_ini.pl $inif < moses.abs.ini \
  > $newinif \
  || die "Failed to apply weights from $inif to moses.abs.ini"
inif=$newinif

eval `grep '^export SCRIPTS_ROOTDIR' command`
eval `cat VARS` # to set e.g. REFAUG

[ ! -z "$SEARCH" ] || SEARCH=cube
case "$SEARCH" in
beam)
  SEARCHFLAG="-search-algorithm 0"
  ;;
cube)
  SEARCHFLAG="-search-algorithm 1"
  ;;
*)
  die "Bad search algorithm: $SEARCH"
  ;;
esac

TARGETLAN_FOR_DETOKENIZER=`echo $REFAUG | sed 's/+.*//'`
if ! echo "test" | $SCRIPTS_ROOTDIR/recaser/detokenizer.perl \
       -u -l $TARGETLAN_FOR_DETOKENIZER > /dev/null 2>&1 ; then 
  echo "Defaulting to 'en' as the targetlang for detokenizer."
  TARGETLAN_FOR_DETOKENIZER=en
fi

MOSESPARALLEL="\$SCRIPTS_ROOTDIR/generic/moses-parallel.pl"
JOBS=${JOBS:=10}

if [ "$SERIAL" = yes ]; then
  GRIDARGS=""
  MOSESPARALLELIZER="./moses $SEARCHFLAG $MOSESFLAGS"
else
  MERTGRIDARGS="--jobs=$JOBS --queue-flags=' -p -200 -cwd -S /bin/bash ' "
  MOSESGRIDARGS="--jobs=$JOBS --queue-parameters=' -p -200 -cwd -S /bin/bash ' "
  MOSESPARALLELIZER="$MOSESPARALLEL $MOSESGRIDARGS -decoder-parameters '$SEARCHFLAG $MOSESFLAGS' \$MERTFLAGS -decoder ./moses"
fi

cat << KONEC > command-eval-at-$run
# This is the command to be run here
echo "#!/bin/bash"
echo "=============================="
echo "== Started:   "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="

# init grid environment
. /net/projects/SGE/user/sge_profile

set -o pipefail
function die() { echo "\$@" | tee FAILED >&2; exit 1 ; }

renice 10 \$\$

# core files limited to 1 byte
ulimit -c 1

export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR
echo export SCRIPTS_ROOTDIR=$SCRIPTS_ROOTDIR

\$SCRIPTS_ROOTDIR/training/filter-model-given-input.pl filtered-for-eval-run$run \\
  $inif evaluation.in \\
  || die "Filter for eval failed"

$MOSESPARALLELIZER \\
  -input-file ./evaluation.in \\
  -config ./filtered-for-eval-run$run/moses.ini \\
  | sed 's/^ *//' \\
  | sed 's/ *$//' \\
  > evaluation.run$run.out \\
   || die "Translation of eval failed"

echo "Tuned BLEU:"
#\$SCRIPTS_ROOTDIR/generic/multi-bleu.perl evaluation.ref. < evaluation.opt.out | tee BLEU.opt
./testbleu evaluation.ref.0 < evaluation.run$run.out | tee BLEU.run$run \\
  || die "BLEU of evaluation.run$run.out set failed"

echo "Detokenizing evaluation.opt.out"
\$SCRIPTS_ROOTDIR/recaser/detokenizer.perl -u -l $TARGETLAN_FOR_DETOKENIZER \\
  < evaluation.run$run.out > evaluation.run$run.txt

#echo "You could use the following to prepare detailed output for manual inpection"
#echo ./moses -input-file ./evaluation.in -config \
#  ./filtered-for-eval-opt/moses.ini \\
#  -verbose 3 \\
#  2>&1
#  | skipbetween '^Translation Option Collection' '^total hypotheses generated' \\
#  | head -c 300k \\
#  > evaluation.opt.verbose

date > DONE-run$run

echo "=============================="
echo "== Ended:     "\`date '+%Y%m%d-%H%M'\`
echo "== Hostname:  "\`hostname\`
echo "== Directory: "\`pwd\`
echo "=============================="
KONEC

chmod 755 command-eval-at-$run

if [ "$RUN" == "yes" ]; then
  bash command-eval-at-$run
else
  echo "Now run:"
  echo "  cd $e; nohup nice ./command-eval-at-$run > log-at-$run &"
  echo "or"
  echo "  cd $e; qsubmit ./command-eval-at-$run --jobname log-at-$run"
fi

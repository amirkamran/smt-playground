This file lists known problems of eman, eman seeds and corpman
--------------------------------------------------------------

* Default vs. empty variables may cause problems in cloning.
  [FIXED]
  Variables of individual steps can be explicitly blank or they can be
  undefined, taking the default value. Eman always stores all variables in
  eman.vars, but when cloning tracebacks, it searches for steps with a given
  set of variables *without* consulting the default values in the seeds. It can
  thus happen, that a new step is inited in cloning instead of reusing an
  existing one. The existing step is not recognized as matching to the vars
  listed in the traceback, because they differ in non-mentioned variables (with
  default values).
  The fix: eman does init such a step but it will notice the duplication and
  remove it immediately after initing. One of the older usable steps will be
  used.

* Two means of dependencies cause confusion.
  [SOLUTION AVAILABLE]
  Corpman knows how to construct trees of steps to prepare the corpus it
  was asked for. These trees then usually become visible in eman tracebacks.
  The two conflicting means of dependency then come from corpman (the rules and
  existing corpora imply how other corpora are derived) and eman (the
  tracebacks explicitly say how to construct the needed corpora).

  Assume two steps: a downstream one (D) and a corpus one (C) created by
  corpman on demand of D. Now let's clone the traceback of D, modifying the
  underlying corpus parameters (e.g. switching to lowercase). When cloning a
  traceback, eman will first clone C into C2 and then clone D into D2. The
  trouble is if C2 (as created by eman from C) is not exactly the corpus
  corpman would create on demand of D2 (as derived from D). So when initing D2,
  corpman may actually create C3. D2 should then depend on C3, not C2. And C2
  should remain just inited and useless, never even prepared.
  Now this was the *desired* behaviour (or can you think of any better). Where
  can the desired behaviour go wrong?
  - C3 *is* actually identical to C2 but corpman did not recognize it and
    created C3.
    - This can happen if C2 does not create its corpman.info *in the init
      phrase* already.
  - Dependencies of D2 will include C2.
    - This can happen if eman too eagerly adds C2 into D2's dependencies when
      cloning it. Eman simply should not do this (it does not do it) and
      instead rely on D2 to create its dependencies as implied by the
      variables.
  - Dependencies of D2 don't include C3.
    - This can happen if D2 forgets to add the corpus obtained from corpman
      during the init phase to its dependencies.

  Another example:
  As above, we have a text traceback where a downstream step D requires (and
  depends on) a corpus C (with the specifier mycorp/mylang+myfact) created
  from another corpus B in the traceback. Let's assume that corpman
  rules allows the creation of mycorp/mylang+myfact differently, from step A,
  and that this is actually how mycorp/mylang+myfact was created in the current
  playground, leading to C'. When we try to clone the traceback, we get an
  error that C can't be made because C' already has that particular corpus.

  Solution: manually *remove* the corpus C from the traceback. Eman will assume
  D has all prerequisites ready and during the init of D, corpman will provide
  C' for mycorp/mylang+myfact. So the traceback of the successfully inited D
  will be different from the original text-only traceback.

  To remove a subtree from the traceback, use --ignore=STEP or
  --ignore=STEPTYPE. This switch is recognized both when creating the text
  traceback (eman tracebakc) as well as when cloning from a text traceback
  (eman clone).

  In our example, using --ignore=C or --ignore=corpus will make eman 'reuse'
  corpus C, i.e. assume D has all prerequisites ready, just as we wanted. Note
  though that the stepname of C will not be replaced by the name of C' anywhere
  in the traceback.

  Note: We can't use --reuse or --avoid instead of --ignore because none of the
  steps mentioned in the traceback don't exist yet.


  What if we tried avoiding the issue by *not* putting corpora into
  dependencies, so they would not appear in tracebacks at all? This will work
  but still somehow feels unnatural. (The mert seed now does that.)

  Note: you should avoid using 'corpman --dump' in the init phase like
  s.mert does now. When cloning a scenario in a clean playground, the
  'prepare' phase of s.mert suddenly waits quite long for the corpora to get
  completely finished.

* Unclear, how to assign corpus names for similar corpora
  Assume a parallel corpus of two sections: subtitles and news. You can
  word-align it either as one large parallel corpus (probably better, but
  heavier), or you can align the two sections separately. The step align
  for option 1 provides its output as a corpman 'corpus' under a specification
  like this:
    news+subtitles/gdfa-en-lemma-cs-lemma
  (Because the source corpus name was news+substitles, symmetrized using gdfa
  and aligning en+lemma to cs+lemma).
  The problem is that the same corpus description
    news+subtitles/gdfa-en-lemma-cs-lemma
  means                news/gdfa-en-lemma-cs-lemma
  concatenated with    subtitles/gdfa-en-lemma-cs-lemma,
  which is actually the option 2.

  A similar issue arises with synthetic texts (e.g. when training on the tags
  of machine-translated text): did the MT system produce tags, or did we tag
  the forms produced by the MT system? In both cases, the corpus specifier
  would like: mono/synthetic-cs+tag

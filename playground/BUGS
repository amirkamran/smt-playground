This file lists known problems of eman, eman seeds and corpman
--------------------------------------------------------------

* Default vs. empty variables may cause problems in cloning.
  Variables of individual steps can be explicitly blank or they can be
  undefined, taking the default value. Eman always stores all variables in
  eman.vars, but when cloning tracebacks, it searches for steps with a given
  set of variables *without* consulting the default values in the seeds. It can
  thus happen, that a new step is inited in cloning instead of reusing an
  existing one. The existing step is not recognized as matching to the vars
  listed in the traceback, because they differ in non-mentioned variables (with
  default values).

* Two means of dependencies cause confusion.
  Corpman knows how to construct trees of steps to prepare the corpus it
  was asked for. These trees then become visible in eman tracebacks. However,
  cloning of these tracebacks is not well tested and I'm afraid that eman
  unnecessarily regenerates many of these corpman steps.
  What's worse: having two copies of the same corpus confuses corpman.

  Discussion and proposed countermeasures:
  Assume two steps: a downstream one (D) and a corpus one (C) created by
  corpman on demand of D. Now let's clone the traceback of D, modifying the
  underlying corpus parameters (e.g. switching to lowercase). When cloning a
  traceback, eman will first clone C into C2 and then clone D into D2. The
  trouble is if C2 (as created by eman from C) is not exactly the corpus
  corpman would create on demand of D2 (as derived from D). So when initing D2,
  corpman may actually create C3. D2 should then depend on C3, not C2. And C2
  should remain just inited and useless, never even prepared.
  Now this was the *desired* behaviour (or can you think of any better). Where
  can the desired behaviour go wrong?
  - C3 *is* actually identical to C2 but corpman did not recognize it and
    created C3.
    - This can happen if C2 does not create its corpman.info *in the init
      phrase* already.
  - Dependencies of D2 will include C2.
    - This can happen if eman too eagerly adds C2 into D2's dependencies when
      cloning it. Eman simply should not do this and instead rely on D2 to
      create its dependencies as implied by the variables.
  - Dependencies of D2 don't include C3.
    - This can happen if D2 forgets to add the corpus obtained from corpman
      during the init phase to its dependencies.


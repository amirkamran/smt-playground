#!/usr/bin/env perl
# This script cooperates with eman.seeds/corpus (and possibly other eman
# seeds) and constructs factored corpus of a given specification within eman
# framework of steps.
# Upon success, it prints just one line with three columns:
#   stepname ... the name of the eman step, where the wished corpus was created
#   filename ... the file in the step directory
#   column   ... the column in the file (if -1, take the whole file)

use strict;
use warnings;

use Getopt::Long;
use File::Path;
use File::Basename;
use File::Temp qw/tempfile/;
use File::Spec;
# use File::NFSLock;
# use Fcntl qw(LOCK_EX LOCK_SH);
use Cwd;
use YAML::XS;

binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");

my $MYPATH = File::Spec->rel2abs(__FILE__);
my $mydir = dirname($MYPATH);
my $workdir = getcwd();

# command name abbreviations, identities provided for commands with no abbrevs
my %expand_abbrev = qw(
  ls list
  reg register
  reindex reindex
);
# all expanded names are also allowed:
foreach my $val (values %expand_abbrev) {
  $expand_abbrev{$val} = $val;
}


my $dirprefix = "s";
my $indexfile = "corpman.index";
my $should_save_index = 0;
  # when corpman creates some corpora, it should save the index
my $verbose = 0;
my $reindex = 0;
my $init = 0;
my $start = 0;
my $wait = 0;
my $dumpcmd = 0;
my $dump = 0;
my $show_linecount = 0;
my $factorindex = 0;
my $register = 0;
my $fakeno = 1; # the step number for dry-runs
my @bashvars = ();
my $readonly = 0;

GetOptions(
  "rootdir=s" => \$mydir,
  "reindex!" => \$reindex,
  "init!" => \$init,
  "start!" => \$start,
  "wait!" => \$wait,
  "cmd!" => \$dumpcmd,
  "dump!" => \$dump,
  "linecount!" => \$show_linecount,
  "factorindex!" => \$factorindex,
  "verbose!" => \$verbose,
  "read-only|readonly!" => \$readonly,
  "bashvars=s" => \@bashvars,
) or exit 1;

sub usage {
  print STDERR "usage: $0 corpname/lang+fact1+fact2+fact3
    or $0 register file column corpname lang fact1+fact2+fact3 linecount derived
Find or construct a factored corpus given a corpus description.
Allowed corpus descriptions:
   corpname/lang+fact1+fact2
     ... use the corpus 'corpname' in the language 'lang' and extend it with
         factors labelled fact1 and fact2
   corp1+corp2/lang+fact1+fact2
     ... concatenate the language lang of corpus 1 and 2 and emit the wished
         factors
Options:
  (nothing)  ... dry run: show which eman steps would be prepared
  --init     ... real run: use eman to init the steps
  --start    ... also start the newly created steps, implies --init
  --wait     ... wait for the final step to finish, implies --start
  --cmd      ... emit a tiny shell script that dumps the corpus to stdout,
                 implies --wait
  --dump     ... dump the corpus to stdout, implies --wait
  --linecount... print just the number of lines in the corpus
  --factorindex
             ... include the indices of factors (or -1 if all factors) in the
                 output; do not create new step just because of factor
                 extraction if there is a step with the required factor
                 together with other factors; the reduce_factors.pl script can
                 be used to extract the selected factors
  --reindex  ... search all subdirs for corpman.info files
  --bashvars=STEP=stepname,LINES=linecount
             ... emits a string for bash eval that sets bash variables STEP
                 to the output step name, LINES to corpus linecount etc.
             ... disables the default three-column output

Output:
  Tab-separated localization of the required corpus:
  step name, file name, column index:
  s.tag.3d46f29c.20120627-1348   tagged.txt.gz   -1
  If the corpus does not exist but can be constructed and corpman was not asked
  to construct it right away, the step name will start with s.fake. Steps
  really created by corpman are s.corpus. Manually created corpora may be found
  in other steps too. If --factorindex was used there will be a fourth field
  with comma-separated list of indices of factors, or -1, e.g.:
  s.tag.3d46f29c.20120627-1348   tagged.txt.gz   -1   1

Corpman must reside in the playground it is supposed to operate on.
If you run it from a different playground it will search for corpora there!
";
}

my $cmd = shift;
$cmd = $expand_abbrev{$cmd} if defined $cmd && defined $expand_abbrev{$cmd};

# Early warning about bad usage
if (! defined $cmd && ! $reindex) {
  usage();
  exit 1;
}

$reindex = 1 if defined $cmd && $cmd eq "reindex";

# switch implications
$wait = 1 if $dumpcmd || $dump || $show_linecount;
$start = 1 if $wait;
$init = 1 if $start; # start implies to init

die "Only one of the following is possible: --dump --cmd --linecout" 
  if ($dumpcmd+$dump+$show_linecount) > 1;

# constants:
my $yes_derived = 1;
my $not_derived = 0;


# first construct an index of corpora bits
my $index_last_read = undef; # used to check if we should re-read before save
my $index;
# $index->{corpname}->{language}->{fact}
#    = {   stepname=>the_directory_name,
#          filename=>filename_within_the_stepname,
#          column=>column_within_the_file; -1 could indicate the whole file,
#          factind=>factor_index_within_the_file, -1 indicates the whole file
#          linecount=>number_of_lines}
# where 'fact' *can* be a specification of several factors
my $waserror = 0;

# chdir to main dir
chdir($mydir) or die "Failed to chdir to $mydir";

# get/create index of all corpman.info files on the current playground
if ( ! -e $indexfile || $reindex ) {
  print STDERR "Indexfile not found or --reindex ($reindex); reindexing.\n";
  create_index(0); # stored in $index
  saveidx($index);
} else {
  # load existing index
  $index = loadidx();
}


# read rules from corpman.rules
my $rules = undef;

sub ensure_rules_loaded {
  # $rules will be undef until we actually need it
  # remember to call ensure_rules_loaded() before using rules!
  return $rules if defined $rules;

  my $rulestext = load_file("corpman.rules");
  # $rules->{outlang}->{outfacts} = {
  #   inlang=>input language
  #   infacts=>input factors
  #   command=>the command to run
  # }
  foreach my $line (split /\n/, $rulestext) {
    next if $line =~ /^\s*#/ || $line =~ /^\s*$/;
    my ($inlang, $infacts, $outlang, $outfacts, $command)
      = split /\t/, trim($line);
    if ($inlang eq "*" xor $outlang eq "*") {
      print STDERR "Bad rule: either none or both input and output languages have to be '*': $line\n";
      $waserror++;
    }
    $infacts =~ s/\|/+/g;
    $outfacts =~ s/\|/+/g;
    # for the construction of all factors at once
    add_rule($outlang, $outfacts, {
      'inlang'=>$inlang,
      'infacts'=>$infacts,
      'command'=>$command,
    });
    if ($outfacts =~ /[+\|]/) {
      # add also rules for two-step construction
      my $f = 0;
      foreach my $outfact (split /[+\|]/, $outfacts) {
        add_rule($outlang, $outfact, {
          'inlang'=>$outlang,
          'infacts'=>$outfacts,
          # 'command'=>"$mydir/../scripts/reduce_factors.pl $f",
          # no command, this will be lazy-extracted
        });
        $f++;
      }
    }
  }
}

exit 1 if $waserror;

if (! defined $cmd) {
  print STDERR "Nothing to do.\n";
  exit;
}

#--------------------------------------
if ($cmd eq "reindex") {
  print STDERR "Reindexed.\n";
  exit;
#--------------------------------------
} elsif ($cmd eq "register") {
  my ($file, $column, $corp, $lang, $facts, $linecount, $derived) = @ARGV;

  # all previous items are defined if the last one is
  # $derived is optional and needs not be defined
  if (! defined $linecount) {
    usage();
    exit 1;
  }
  # add or update the entry in the index, save the index and update the corpman.info file if necessary
  register($index, $workdir, $file, $column, $corp, $lang, $facts, $linecount, $derived);
#--------------------------------------
} elsif ($cmd eq "list") {
  # list all variants of the given corpus or of all corpora
  my ($corp) = @ARGV;
  if (defined $corp) {
    list_corp_variants($corp);
  } else {
    foreach my $c (sort {$a cmp $b} keys %$index) {
      list_corp_variants($c);
    }
  }
#--------------------------------------
} else {
  # user wants a corpus
  my $descr = $cmd;

  my $corp;
  my $lang;
  my $facts;
  if ($descr =~ /^(.+?)\/(.+?)\+(.*)$/) {
    $corp = $1;
    $lang = $2;
    $facts = $3;
  } else {
    die "Bad descr format: $descr";
  }
  # Factor names can be separated by pluses or by vertical bars.
  $facts =~ s/\|/+/g;

  my $entry = build_exact_factors($corp, $lang, $facts);
  my $stepname = $entry->{stepname};
  my $filename = $entry->{filename};
  my $column = $entry->{column};
  my $factind = $entry->{factind};

  # save the index if new corpora were created
  # naturally, there is a risk of race conditions of two corpmans are running
  # a corpman reindex every now and then would find any corpus duplicates
  saveidx($index) if $should_save_index;

  if ($wait) {
    my $status = load_step_status($stepname);
    if ($status ne "DONE") {
      safesystem("eman start $stepname && eman wait $stepname")
        or die "Failed to wait for $stepname to finish."
    }
  }

  my $steppath = get_step_path($stepname);
  if ($dumpcmd) {
    my $maygunzip = ($filename =~ /\.gz$/ ? "zcat" : "cat");
    print "$maygunzip $steppath/$filename";
    print " | cut -f $column" if $column != -1;
    print "\n";
  } elsif ($show_linecount) {
    print $entry->{linecount}, "\n";
  } elsif ($dump) {
    ###!!! --factorindex will not yet work as expected with --dump
    my $h = my_open("$steppath/$filename");
    if ($column == -1) {
      print while <$h>;
    } else {
      while (<$h>) {
        chomp;
        my @cols = split /\t/;
        print $cols[$column-1], "\n";
      }
    }
    close $h;
  } else {
    if (0 < scalar @bashvars) {
      foreach my $bv (@bashvars) {
        foreach my $outvar_internalvar (split /,/, $bv) {
          my ($outvar, $internalvar) = split /=/, $outvar_internalvar;
          $internalvar = $outvar if !defined $internalvar;
          my $internalval = $entry->{$internalvar};
          die "Undefined '$internalvar' when producing bash variable setter for $bv" if !defined $internalvar;
          print $outvar, "=", $internalval, "\n";
          die "Space or tab in value of $outvar (coming from $internalvar): $internalval\n"
            if $internalval =~ /\s/;
        }
      }
    } else {
      # print default details: stepname, filename, column [and factors if requested]
      print $stepname, "\t", $filename, "\t", $column;
      print "\t", $factind if($factorindex);
      print "\n";
      exit 2 if $stepname =~ /s.fake/; # indicate that the corpus does not exist
    }
  }
}

exit ($waserror != 0);
# end of main



###############################################################################
# SUBROUTINES
###############################################################################



#------------------------------------------------------------------------------
# Registers a corpus with corpman.
#
# This can only be done in the local playground.
#------------------------------------------------------------------------------
sub register {
  my $index = shift;
  my $workdir = shift;
  my $file = shift;
  my $column = shift;
  my $corp = shift;
  my $lang = shift;
  my $facts = shift;
  my $linecount = shift;
  my $derived = shift;
  my $stepname = basename($workdir);
  my $force_info_update = 0;
  my $do_register = 0;
  my $entry = $index->{$corp}->{$lang}->{$facts};
  if (defined $entry) {
    if ($entry->{stepname} eq $stepname) {
      if ($entry->{linecount} == -1) {
        $entry->{linecount} = $linecount;
        saveidx($index);
        $force_info_update = 1;
      }
    } else {
      if ($entry->{factind} == -1) {
        my $status = load_step_status($entry->{stepname});
        if ($status =~ m/^FAILED|PREPFAILED|OUTDATED$/) {
          print STDERR "Warning: corpus $entry->{stepname} is identical but has status $status!\n";
          # create_index(1); # reindex, some corpora failed and we don't know
	  ## lazier: but let's see if it will cause some confusing duplicated entries in the index
          $do_register = 1; # register the new corpus
        } else {
          die "Corpus $corp/$lang+$facts already exists ($entry->{stepname})!\n";
        }
      } else {
        print STDERR "Warning: corpus $corp/$lang+$facts is implicitly available in $entry->{stepname}!\n";
      }
    }
  } else {
    $do_register = 1; # this is a new corpus, register it
  }

  if ($do_register) {
    # add corpus to index
    add_entry_incl_entries_of_separate_factors(
        $corp, $lang, $facts, $stepname, $file, $column, $linecount, $derived);
    # save the updated index
    saveidx($index);
  }

  my $do_update_info = 1;
  # update corpman.info in the step directory
  my @info_current;
  if (-e "$workdir/corpman.info") {
    @info_current = split /\n/, load_file("$workdir/corpman.info");
  }
  my $identical = grep /\t\Q$corp\E\t\Q$lang\E\t\Q$facts/, @info_current;
  if ($identical) {
    if ($force_info_update) {
      @info_current = grep {
        $_ !~ m/\t\Q$corp\E\t\Q$lang\E\t\Q$facts\E\t(-1|$linecount)/
      } @info_current;
    } else {
      print STDERR "Corpus $corp/$lang+$facts already in corpman.info.\n";
      $do_update_info = 0;
    }
  }
  if ($do_update_info) {
    $derived = "" if ! defined $derived;
    my $new_info_line = join("\t",
        $file, $column, $corp, $lang, $facts, $linecount, $derived);
    push @info_current, $new_info_line;
    my %uniq_info = map { ($_, 1) } @info_current;
    save_file("$workdir/corpman.info", join("\n", sort keys %uniq_info));
  }
}



#------------------------------------------------------------------------------
# Lists all known variants of a corpus or of all corpora known to corpman.
#------------------------------------------------------------------------------
sub list_corp_variants {
  my $corpname = shift;
  foreach my $l (keys %{$index->{$corpname}}) {
    my %knownfacts = ();
    my $linecount = undef;
    foreach my $facts (keys %{$index->{$corpname}->{$l}}) {
      my $entry = $index->{$corpname}->{$l}->{$facts};
      foreach my $f (split /[\|\+]/, $facts) {
        $knownfacts{$f} = 1;
      }
      if ($entry->{"linecount"} != -1) {
        if (!defined $linecount) {
          $linecount = $entry->{"linecount"};
        } else {
          if ($linecount != $entry->{"linecount"}) {
            print STDERR "$corpname/$l+$facts: Mismatching number of lines. Expected $linecount, got $entry->{linecount}.\n";
            $waserror = 1;
          }
        }
      }
    }
    print $corpname, "/", $l, "+", join("+", sort {$a cmp $b} keys %knownfacts);
    $linecount = -1 if !defined $linecount;
    print "\t", $linecount;
    print "\n";
  }
}



#------------------------------------------------------------------------------
# Finds required factors in index. If they are not available and if it knows
# how to build them, it either builds them or returns the recipe.
#------------------------------------------------------------------------------
sub build_exact_factors {
  my ($corp, $lang, $facts) = @_;
  # runs lazy_build and extracts the required factor if necessary
  my $entry = lazy_build($corp, $lang, $facts);
  print STDERR "Called build_exact_factors @_\n" if $verbose;
  print STDERR "  The factind of the entry: $entry->{factind}\n" if $verbose;
  if ($entry->{"factind"} == -1
      || ($entry->{"factind"} == 0 && $entry->{"factors"} !~ /[+|]/)
      || $factorindex) {
      # XXX this check should actually also accept cases like factid=="1,2,3"
      # and factors contain 2 pluses...
    # great, the given column contains exactly the factors we asked for
    return $entry;
  } else {
    # not quite, we need to restrict to the given factor
    ###!!! DZ: This does not work. The new step cannot register new corpus with the factor
    ###!!! because it has already been registered by the current step, thus there would be conflict.
    ###!!! Instead of creating new copies of the corpus, we should provide means of identifying and extracting the factor from the existing step.
    ###!!! If the user is OK with getting just the factor index(es), they can use the following tool to extract it:
    ###!!! gunzip -c corpus.txt.gz | $STATMT/scripts/reduce_factors.pl 0,2 | gzip -c > corpus-1-3.txt.gz
    ###!!! see the new option $factorindex above...
    my $stepname = run_or_fake_corpus_step("DERIVED=1 ".
      "DEPS=$entry->{stepname} ".
      "RUN_COMMAND='cat' ".
      "STEPNAME=$entry->{stepname} ".
      "FILENAME=$entry->{filename} ".
      "COLUMN=$entry->{column} ".
      "FACTOR=$entry->{factind} ".
      "OUTCORP=$corp ".
      "OUTLANG=$lang ".
      "OUTFACTS='$facts' ".
      "OUTLINECOUNT=$entry->{linecount} ".
      "eman init corpus", [$entry->{"stepname"}]);
    my $outentry = $entry;
    # fake output entry values
    $outentry->{"stepname"} = $stepname;
    $outentry->{"filename"} = "corpus.txt.gz";
    $outentry->{"column"}= -1;
    $outentry->{"factind"}= -1;
    return $outentry;
  }
}



#------------------------------------------------------------------------------
# Builds the specified corpus.
# Returns stepname, filename, column and
#   -1 if the requested factors are exactly there
#   factor number of the *single* factor to pick
#------------------------------------------------------------------------------
sub lazy_build {
  my ($corp, $lang, $facts) = @_;
  print STDERR "Called lazy_build @_\n" if $verbose;

  # check if the whole corpus happens to be ready
  my $entry = $index->{$corp}->{$lang}->{$facts};
  if (defined $entry) {
    if ($entry->{CONFLICT}) {
      print STDERR "WARNING: The corpus $corp/$lang+$facts is in conflict, see above or reindex.\n";
    }
    if ($entry->{linecount} == -1) {
      die "The corpus $corp/$lang+$facts was registered by $entry->{stepname}, but it is not ready yet.\n";
    } else {
      return $entry;
    }
  }
    # here is the laziness: $entry->{factind} may be != -1, i.e. asking to
    # extract a factor

  if ($corp =~ /\+/) {
    # The corpus needs to be constructed by concatenation
    # First recursively build all parts
    my $linecount = 0;
    my @parts = ();
    my @deps = (); # which steps should we wait for
    foreach my $subcorp (split /\+/, $corp) {
      my $subentry = lazy_build($subcorp, $lang, $facts);
      $linecount += $subentry->{"linecount"};
      my $steppath = get_step_path($subentry->{stepname}) . "/$subentry->{filename}";
      my $subcolumn = $subentry->{"column"};
      my $subfactind = $subentry->{"factind"};
      my $cmd = "zcat $steppath";
      $cmd .= " | cut -f $subcolumn" if $subcolumn != -1;
      $cmd .= " | $mydir/../scripts/reduce_factors.pl $subfactind" if $subfactind != -1;
      push @parts, $cmd;
      push @deps, $subentry->{"stepname"};
    }
    my $stepname = run_or_fake_corpus_step("DEPS='@deps' TAKE_FROM_COMMAND='("
      .join("; ", @parts)
      .")' DERIVED=1 OUTCORP=$corp OUTLANG=$lang OUTFACTS='$facts' OUTLINECOUNT=$linecount eman init corpus", \@deps);
    my $filename = "corpus.txt.gz";
    my $column = -1;

    # add to index for further use
    return add_entry_incl_entries_of_separate_factors(
      $corp, $lang, $facts, $stepname, $filename, $column, $linecount, $yes_derived);
  }

  # the required sequence of factors, or the single factor is not available,
  # we must build it

  # if we're asked for a single factor, we know we must use rules
  # if we're asked for multiple factors, there *may* be a chance it's just a
  # different permutation of the existing ones...
  #   but we will simply lazy_build all necessary factors and combine them
  ensure_rules_loaded();

  # need to construct corpus from parts
  if ($facts =~ /[\|+]/) {
    # check if this set of factors can be constructed using a rule
    return build_using_rules($corp, $lang, $facts)
      if defined $rules->{$lang}->{$facts};

    # no, there is no rule for this particular set of factors, construct by
    # combination
    my $linecount = undef;
    # construct by combining corpus parts
    my @parts = ();
    my @deps = (); # which steps should we wait for
    foreach my $fact (split /[\|+]/, $facts) {
      # recursion:
      my $subentry = lazy_build($corp, $lang, $fact);

      die "Incompatible linecount when constructing $corp/$lang+$facts from parts: $linecount vs. $subentry->{linecount}, the latter for $fact"
        if defined $linecount && $linecount != $subentry->{"linecount"};
      $linecount = $subentry->{"linecount"};

      my $steppath = get_step_path($subentry->{stepname}) . "/$subentry->{filename}";
      my $subcolumn = $subentry->{"column"};
      push @parts, "$steppath $subentry->{column} $subentry->{factind}";
      push @deps, $subentry->{"stepname"};
    }
    # build a step that combines all these

    my $stepname = run_or_fake_corpus_step("DERIVED=1 DEPS='@deps' COMBINE_PARTS='@parts' OUTCORP=$corp OUTLANG=$lang OUTFACTS='$facts' OUTLINECOUNT=$linecount eman init corpus", \@deps);
    my $filename = "corpus.txt.gz";
    my $column = -1;

    # add to index for further use
    return add_entry_incl_entries_of_separate_factors(
      $corp, $lang, $facts, $stepname, $filename, $column, $linecount, $yes_derived);
  }

  # $facts is now just a single factor and we surely know we need to search
  # rules to construct it
  return build_using_rules($corp, $lang, $facts);
}



#------------------------------------------------------------------------------
# Derives a corpus from other corpora using corpman rules.
#------------------------------------------------------------------------------
sub build_using_rules {
  my ($corp, $lang, $facts) = @_;
  print STDERR "Called build_using_rules @_\n" if $verbose;

  my $rule = $rules->{$lang}->{$facts};
  $rule = $rules->{'*'}->{$facts} if ! defined $rule;
  die "No rule to make $corp/$lang+$facts."
    if !defined $rule;
  if ($rule->{CONFLICT}) {
    die "The rule for $corp/$lang+$facts is in conflict, see above.\n";
  }

  my $useinlang = $rule->{'inlang'};
  $useinlang = $lang if $useinlang eq "*";
  # build the input corpus for the rule
  my $subentry = lazy_build($corp, $useinlang, $rule->{"infacts"});

  return lazy_build($corp, $lang, $facts)
    if !defined $rule->{'command'};

  # apply the rule
  my $linecount = $subentry->{"linecount"};
  my $escape_command = $rule->{command};
  $escape_command =~ s/'/'"'"'/g;
  my $stepname = run_or_fake_corpus_step("DERIVED=1 DEPS='$subentry->{stepname}' RUN_COMMAND='$escape_command' STEPNAME=$subentry->{stepname} FILENAME=$subentry->{filename} COLUMN=$subentry->{column} FACTOR=$subentry->{factind} OUTCORP=$corp OUTLANG=$lang OUTFACTS='$facts' OUTLINECOUNT=$linecount eman init corpus", [$subentry->{"stepname"}]);
  my $filename = "corpus.txt.gz";
  my $column = -1;

  # add to index for further use
  return add_entry_incl_entries_of_separate_factors(
    $corp, $lang, $facts, $stepname, $filename, $column, $linecount, $yes_derived);
}



#------------------------------------------------------------------------------
# Constructs a recipe for a new eman step that would create the required
# corpus. Calls eman with the recipe if required by the user.
#------------------------------------------------------------------------------
sub run_or_fake_corpus_step {
  my $command = shift;
  my $deps = shift; # deps to wait for
  if (!$init) {
    my $fakeoutstep = "$dirprefix.fake.".($fakeno++);
    print STDERR $fakeoutstep, ": ", $command, "\n";
    return $fakeoutstep;
  }
  # we indeed issue the command to prepare the corpus
  # first invalidate our index, if it exists
  # unlink("$mydir/$indexfile");  # leave the index there!!
  # now with merge-on-save, it is not wise to remove the index
  $command = "cd $mydir && $command";
  $command .= " --start" if $start;
  print STDERR "EXECUTING: $command\n" if $verbose;
  $command .= " 2>&1";
  my $out = `$command`;
  print STDERR "--eman-stdout--\n$out\n--end-of-eman-stdout--\n" if $verbose;
  if ($out =~ /Inited: (s\.corpus\..*)/) {
    my $outstep = $1;
    print STDERR "corpman inited: $outstep\n";
    $should_save_index = 1;
    return $outstep;
  } else {
    print STDERR "Failed to get stepname!\n";
    print STDERR "Launched: $command\n";
    print STDERR "Got:\n$out\n--end-of-eman-stdout--\n";
    exit 1;
  }
}



#------------------------------------------------------------------------------
# Adds a rule to the list of rules for deriving corpora.
#------------------------------------------------------------------------------
sub add_rule {
  my ($outlang, $outfacts, $newrule) = @_;
  $outfacts =~ s/\|/+/g;
  my $oldrule = $rules->{$outlang}->{$outfacts};
  if (defined $oldrule) {
    print STDERR "Conflicting rules to produce $outlang+$outfacts: "
      ."from $newrule->{inlang}+$newrule->{infacts}"
      ." vs. "
      ."from $oldrule->{inlang}+$oldrule->{infacts}\n";
    # $waserror = 1; # Instead of dying rather prohibit the use
    $rules->{$outlang}->{$outfacts}->{"CONFLICT"} = 1;
  } else {
    $rules->{$outlang}->{$outfacts} = $newrule;
  }
}



#------------------------------------------------------------------------------
# Adds to the index one or more corpus. Adds an entry for each factor of the
# corpus, and for the combination of all factors.
#------------------------------------------------------------------------------
sub add_entry_incl_entries_of_separate_factors {
  my ($corpname, $lang, $facts, $stepname, $filename, $column, $linecount, $mayderived) = @_;
  my $newentry = {
    "stepname" => $stepname,
    "filename" => $filename,
    "column" => $column,
    "factind" => -1,
    "linecount" => $linecount,
    "isderived" => $mayderived,
    "factors" => $facts,
  };
  add_entry($corpname, $lang, $facts, $newentry, $mayderived);
  # Now add an extra entry for each factor.
  if ($facts =~ /[+\|]/) {
    # add also individual factors to support construction of the corpus
    my $factind = -1;
    foreach my $fact (split /[+\|]/, $facts) {
      $factind++;
      add_entry($corpname, $lang, $fact,
        {
          "stepname" => $stepname,
          "filename" => $filename,
          "column" => $column,
          "factind" => $factind,
          "linecount" => $linecount,
          "isderived" => 1,
          "factors" => $facts,
        },
        $yes_derived
        );
    }
  }
  return $newentry;
}



#------------------------------------------------------------------------------
# Adds a corpus to the index avoiding duplicates.
# This *could* be restricted by other variables like eman select.
#------------------------------------------------------------------------------
sub add_entry {
  my ($corpname, $lang, $facts, $newentry, $isderived) = @_;
  $facts =~ s/\|/+/g;

  print STDERR "Adding $corpname/$lang+$facts: "
      ."$newentry->{stepname}/$newentry->{filename}:$newentry->{column}"
      ."\n" if $verbose;
  my $oldentry = $index->{$corpname}->{$lang}->{$facts};
  my $should_die = undef;
  my $msg = undef;
  my $useentry = $newentry;
  my $conflict_type = "--";
  if (defined $oldentry) {
    # there are several types of conflicting sources.
    # Where do the entries come from:
    # A: manually created corpora (these have isderived==0)
    # B: automatic corpora of "all factors" (these have isderived==1 and factind==-1)
    # C: automatic corpora of "selected factor" (these have isderived==1 and factind!=-1)
    # Possible conflicts:
    # old entry, new entry, resolution
    # AA  confirm-identity-or-die
    # AB  confirm-identity-or-die
    # AC  use C iff factind of A != -1; selecting one factor from existing corpus, use A otherwise
    # BA  confirm-identity-or-die
    # BB  happens with remote playgrounds, prefer the older B
    # BC  prefer B (directly usable, C would require one more factor selection)
    # CA  as in AC above
    # CB  prefer B (directly usable, C would require one more factor selection)
    # CC  warn, use any
    #
    # confirm-identity-or-die is still implemented as a warning only, ideally,
    # it would:
    # 1. just emit a warning
    # 2. later, at 'bigreindex' check (full diff!) the files and comment in all
    # writable corpman.infos that the check was performed and was
    # successful/failed
    # -- if any of the corpman infos already knows they are equal, copy it
    # wherever we can write to
    # die only if they are not identical
    # prefer the local one, if any
    my $oldtype = get_entry_source_type($oldentry);
    my $newtype = get_entry_source_type($newentry);
    $conflict_type = join("", sort { $a cmp $b } ($oldtype, $newtype));
    if ($conflict_type eq "AC" || $conflict_type eq "CA") {
      $should_die = 0;
      my $entry_a = $oldtype eq "A" ? $oldentry : $newentry;
      my $entry_c = $oldtype eq "C" ? $oldentry : $newentry;
      if ($entry_a->{factind} == -1) {
        # A has the exact factors we need and it already exists
        # (unlike C, which is a derivable corpus)
        $useentry = $entry_a;
      } else {
        # A has more factors than we need, C stands for the factor we can extract from it
        # => use C
        $useentry = $entry_c;      
      }
    } elsif ($oldtype eq "A" || $newtype eq "A") {
      $should_die = 0;
      $msg = "Conflict involving a manually created corpus.";
    } elsif ($conflict_type eq "BB") {
      $should_die = 0;
      # Don't report any conflict, just use the older one
      $useentry = pick_older($oldentry, $newentry);
      $msg = "Conflicting derivable corpora, picking $useentry->{stepname}"
        if $verbose;
    } elsif ($conflict_type eq "CC") {
      $should_die = 0;
      # Don't report any conflict, just use the older one
      $useentry = pick_older($oldentry, $newentry);
      $msg = "Conflicting derivable corpora, picking $useentry->{stepname}"
        if $verbose;

    } elsif ($conflict_type eq "BC" || $conflict_type eq "CB") {
      $should_die = 0;
      $useentry = ($oldtype eq "B" ? $oldentry : $newentry);
    } else {
      die "Unimplemented, should never happen.";
    }
  }
  print STDERR "Conflict ($conflict_type) for $corpname/$lang+$facts: "
    ."$newentry->{stepname} vs $oldentry->{stepname}. $msg\n"
    # ."$newentry->{stepname}/$newentry->{filename}:$newentry->{column}"
    # ." vs "
    # ."$oldentry->{stepname}/$oldentry->{filename}:$oldentry->{column}\n"
    if defined $msg;
  if ($should_die) {
    # $waserror = 1; # instead of dying rather prohibit the use
    $index->{$corpname}->{$lang}->{$facts}->{"CONFLICT"} = 1;
  } else {
    $index->{$corpname}->{$lang}->{$facts} = $useentry;
  }
}

sub pick_older {
  my $oldentry = shift;
  my $newentry = shift;
  my $useentry;

  my (undef, undef, $oldhash, $olddate) = split /\./, $oldentry->{"stepname"};
  my (undef, undef, $newhash, $newdate) = split /\./, $newentry->{"stepname"};
  if (!defined $olddate || !defined $newdate) {
    # fake entries in dry run
    $useentry = $oldentry;
  } else {
    my $cmp = $olddate cmp $newdate || $oldhash cmp $newhash;
    if ($cmp <= 0) {
      # pick the older one
      # or the alphabetically earlier hash if the dates are same
      $useentry = $oldentry;
    } else {
      $useentry = $newentry;
    }
  }
  
  return $useentry;
}



#------------------------------------------------------------------------------
# Figures out whether a corpus entry is derived and whether it contains
# multiple factors. This is important for classification and resolving of
# conflicts. Return values:
#   A ... "manually" created corpora (these have isderived==0)
#         "manual" does not mean that e.g. no stochastic tagger was used
#         it means that it was not derived from other registered corpora by
#         corpman using its rules
#   B ... automatic corpora of "all factors" (these have isderived==1 and
#         factind==-1)
#   C ... automatic corpora of "selected factor" (these have isderived==1 and
#         factind!=-1)
#------------------------------------------------------------------------------
sub get_entry_source_type {
  my $entry = shift;
  my $isderived = $entry->{"isderived"} || 0;
  return "A" if ! $isderived;
  return "B" if $entry->{"factind"} == -1;
  return "C";
}

# find all corpora in the playground and add them to the index
sub create_index {
  # if reindexing during 'register', some eman steps may not have eman.status
  my $soft_checks = shift;
  #`(echo soft-checks $soft_checks, reindex $reindex, cmd $cmd @ARGV; hostname; date)  >> /net/tmp/bojar/wmt13-bojar/playground/corpman.when-reindexed`;
  print STDERR "Indexing...\n" if $verbose;
  undef $index; # discard old index
  my $subdirs_hdl = my_open("eman.subdirs");
  chomp(my @subdirs = <$subdirs_hdl>);
  for my $subdir (@subdirs) { 
    if (! -d $subdir) {
      print STDERR "Warning: skipping non-existent directory $subdir\n";
      next;
    }
    print STDERR "Searching directory $subdir\n" if $verbose;
    chdir $subdir or die "Cannot change directory to $subdir.";
    open INDFILES, "find $dirprefix.* -follow -maxdepth 1 -name corpman.info |"
      or die "Can't search for corpora";
    while (<INDFILES>) {
      chomp;
      my $fn = $_;
      print STDERR "Checking $fn\n" if $verbose;
      my @dirs = split /\//, $fn, 2;
      my $stepname = undef;
      foreach my $dir (split /\//, $fn) {
        if ($dir =~ /^s\..*\.[0-9]{8}-[0-9]{4}$/) {
          $stepname = $dir;
          last;
        }
      }
      die "Failed to guess step name from $fn" if !defined $stepname;
      next if $soft_checks && ! -f "$subdir/$stepname";     
      my $status = load_step_status("$subdir/$stepname");
      next if $status !~ /INITED|PREPARED|RUNNING|WAITING|DONE/;
      # skip all bad steps
      my $text = load_file($fn);
      foreach my $line (split /\n/, $text) {
        next if $line eq "";
        my ($filename, $column, $corpname, $lang, $facts, $linecount, $mayderived)
        = split /\t/, trim($line);
        die "Bad entry $fn: $line" if $linecount !~ /^(-1|[0-9]+)$/;
        add_entry_incl_entries_of_separate_factors(
          $corpname, $lang, $facts, $stepname, $filename, $column, $linecount, $mayderived);
      }
    }
    close INDFILES;
  }
  chdir $mydir;
  exit 1 if $waserror;
}


sub my_open {
  my $f = shift;
  if(! -e $f) {
    my $pwd = `pwd`;
    die "Not found: $f\npwd = $pwd";
  }
  my $opn;
  my $hdl;
  my $ft = `file $f`;
  # file might not recognize some files!
  if ($f =~ /\.gz$/ || $ft =~ /gzip compressed data/) {
    $opn = "zcat $f |";
  } elsif ($f =~ /\.bz2$/ || $ft =~ /bzip2 compressed data/) {
    $opn = "bzcat $f |";
  } else {
    $opn = "$f";
  }
  open $hdl, $opn or die "Can't open '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}



# Run a command very safely.
# Synopsis: safesystem(qw(echo hello)) or die;
sub safesystem {
    # print STDERR "Executing: @_\n";
    system(@_);
    if ($? == -1) {
        print STDERR "Failed to execute: @_\n  $!\n";
        exit(1);
    } elsif ($? & 127) {
        printf STDERR "Execution of: @_\n  died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
        exit(1);
    } else {
        my $exitcode = $? >> 8;
        print STDERR "Exit code: $exitcode\n" if $exitcode;
        return ! $exitcode;
    }
}



sub my_save {
  my $f = shift;
  if ($f eq "-") {
    binmode(STDOUT, ":utf8");
    return *STDOUT;
  }
  my $opn;
  my $hdl;
  # file might not recognize some files!
  if ($f =~ /\.gz$/) {
    $opn = "| gzip -c > '$f'";
  } elsif ($f =~ /\.bz2$/) {
    $opn = "| bzip2 > '$f'";
  } else {
    $opn = ">$f";
  }
  mkpath( dirname($f) );
  open $hdl, $opn or die "Can't write to '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}



sub load_file {
  my $fn = shift;
  my $out = "";
  my $h = my_open($fn);
  $out .= $_ while <$h>;
  close $h if $fn ne "-";
  return $out;
}



sub save_file {
  my $fn = shift;
  my $text = shift;
  my $h = my_save($fn);
  chomp $text;
  print $h $text;
  print $h "\n" if $text ne "";
  close $h;
}



sub trim {
  my $s = shift;
  $s =~ s/ +\t/\t/g;
  $s =~ s/\t +/\t/g;
  $s =~ s/^ +//;
  $s =~ s/ +$//;
  return $s;
}



sub load_step_status {
  print STDERR "load_step_status @_\n" if $verbose;
  my $stepname = shift;
  my $steppath = get_step_path($stepname);
  my $status = load_file($steppath."/eman.status");
  chomp $status;
  return $status;
}



sub loadidx {
  # load the index file and hash it there and back
  my $idx;
  if (-e $indexfile) {
    $index_last_read = -C $indexfile;
    $idx = Load(load_file($indexfile)."\n"); # YAML to Load the string
  }
  return $idx;
}


# $index->{corpname}->{language}->{fact}
sub merge_into_idx {
  my $idx = shift;
  my $to_insert = shift;
  foreach my $corpname (keys %$to_insert) {
    my $sub2 = $to_insert->{$corpname};
    foreach my $lang (keys %$sub2) {
      my $sub3 = $sub2->{$lang};
      foreach my $fact (keys %$sub3) {
        my $newdata = $sub3->{$fact};
	my $known = $idx->{$corpname}->{$lang}->{$fact};
	if (defined $known) {
	  if (join("\n", %$known) ne join("\n", %$newdata)) {
	    print STDERR "Warning: conflict when merging indices at $corpname/$lang+$fact\n";
	  }
	} else {
	  $idx->{$corpname}->{$lang}->{$fact} = $newdata;
	}
      }
    }
  }
  return $idx;
}

sub saveidx {
  my $idx = shift;
  # merge on save
  if (-e $indexfile && ! $reindex) {
    while (-C $indexfile > $index_last_read) {
      print STDERR "Loading index again to merge it with ours. ($index_last_read)\n";
      my $newidx = loadidx();
      $idx = merge_into_idx($idx, $newidx);
    }
  }
  my ($h, $tempname) = tempfile("eman.index.tmpXXXXXX", DIR=>cwd());
  binmode($h, ":utf8");
  print $h Dump($idx);
  close $h;
  print STDERR "Moving temp output index from $tempname to $indexfile\n"
    if $verbose;
  rename($tempname, $indexfile);
  chmod 0644, $indexfile;
}

sub get_step_path {
  print STDERR "get_step_path @_\n" if $verbose;
  my $stepname = shift;
  if (! File::Spec->file_name_is_absolute($stepname)) {
    print STDERR "  ...not absolute: $stepname\n" if $verbose;
    if (-d "$mydir/$stepname") {
      return "$mydir/$stepname";
    } else {
      chomp(my $steppath = `eman path $stepname`);
      return $steppath;
    }
  } else {
    return $stepname;
  }
}

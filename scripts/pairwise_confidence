#!/usr/bin/perl
# Calculates exact confidence intervals for pairwise (head-to-head) comparisons
# assuming binomial distribution.
# More: http://www.itl.nist.gov/div898/handbook/prc/section2/prc241.htm
# Ondrej Bojar, bojar@ufal.mff.cuni.cz
#
# detailed usage:
#   perl binomialconf.pl 66 29 \
#   | labelledxychart --blockpivot=1 --data=2,3,0,'',linespoints | gpsandbox
use strict;
use Getopt::Long;

my $conf = 95;
my $plot = 0;
my $step = 0.05;

GetOptions(
  "conf=s" => \$conf,
  "plot" => \$plot,
  "step=s" => \$step,
) or exit 1;

my $alpha = 1-$conf/100;

my $a = shift;
my $b = shift;

if (!defined $a || !defined $b) {
  print STDERR "$0 a-wins b-wins
Options:
  --conf=95     ... the confidence level
  --plot        ... to plot the distribution etc.
  --step=0.05   ... for the plot
";
  exit 1;
}

my $n = $a+$b;

if ($plot) {
  my $wins = $a;
  plot($n, $wins);
} else {
  my ($smaller, $larger) = sort ($a, $b);
  # check if larger is outside of conf. int. for smaller
  my $value_of_larger = binom_distr($n, $smaller, $larger/$n)-$alpha/2;
  if ($value_of_larger < 0) {
    print "$smaller is significantly worse than $larger\n";
  } else {
    print "$smaller is NOT significantly worse than $larger\n";
  }
  my $value_of_smaller = binom_distr($n, $larger, $smaller/$n)-1+$alpha/2;
  if ($value_of_smaller > 0) {
    print "$larger is significantly better than $smaller\n";
  } else {
    print "$larger is NOT significantly better than $smaller\n";
  }
}


sub plot {
  my $n = shift;
  my $wins = shift;
  my $p = 0;
  while ($p <= 1) {
    my $bn = binom_distr($n, $wins, $p);
    printf "upper\t%.4f\t%.4f\n", $p, $bn-$alpha/2;
    printf "lower\t%.4f\t%.4f\n", $p, $bn-1+$alpha/2;
    $p += 0.05;
  }
  print "zero\t0\t0\n";
  print "zero\t1\t0\n";
  my $rat = $wins/$n;
  printf "$wins of $n\t$rat\t-1\n";
  printf "$wins of $n\t$rat\t1\n";
  my $othwins = $n-$wins;
  my $othrat = $othwins/$n;
  printf "$othwins of $n\t$othrat\t-1\n";
  printf "$othwins of $n\t$othrat\t1\n";
  if (-t STDOUT) {
    print STDERR "# To see the plot, feed the output to the following pipe:
  | labelledxychart --blockpivot=1 --data=2,3,0,'',linespoints | gpsandbox\n";
  }
}

sub binom_distr {
  # calculates sum_k=0^Nd (N choose k) p^k (1-p)^(N-k)
  my $N = shift;
  my $Nd = shift;
  my $p = shift;
  my $sum = 0;
  for(my $k=0; $k<=$Nd; $k++) {
    $sum += binom_coef($N, $k) * $p**$k * (1-$p)**($N-$k);
  }
  return $sum;
}

sub binom_coef {
  # calculates "n choose k"
  my $n = shift;
  my $k = shift;
  my $prod = 1;
  for(my $i=1; $i<=$k; $i++) {
    $prod *= $n-$i+1;
    $prod /= $i;
  }
  return $prod;
}


exit 0;

# use PDL::Opt::NonLinear;
# 
# $x = random(5);
# $gx = rosen_grad($x);
# $fx = rosen($x);
# 
# $xtol = pdl(1e-16);
# $gtol = pdl(0.9);
# $eps = pdl(1e-10);
# $print = ones(2);
# $maxit = pdl(long, 200);
# $info = pdl(long,0);
# sub fg_func{
#        my ($f, $g, $x) = @_;
#        $f .= rosen($x);
#        $g .= rosen_grad($x);           
# }
# cgfam($fx, $gx, $x, $maxit, $eps, $xtol, $gtol,$print,$info,1,\&fg_func);

#!/usr/bin/perl -CSAD
# eman, experiment manager
#
# More info: 'eman --help' or 'eman --man'
#
# Ondrej Bojar, bojar@ufal.mff.cuni.cz
#
# BUGS: now already excluding dir self name from hash,
#       should be also removing the exp's old name before renaming
#       should include env vars in vars when cloning from scenario

use strict;
use warnings;
use 5.010;
use YAML;
use File::Temp qw/tempfile/;
use Carp;
use Term::ANSIColor;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Path;
use File::Spec;
use Cwd qw/cwd abs_path/;
use Digest::MD5 qw(md5_hex);
use Fcntl qw(LOCK_EX LOCK_NB);
# use File::NFSLock;
use FindBin qw($Bin);
use List::Util qw(min);
my $eman = $Bin."/".basename($0); # full path to ourselves

# command name abbreviations, identities provided for commands with no abbrevs
my %expand_abbrev = qw(
  retag retag
  tab tabulate
  ls list
  sel select
  cl clone
  tb traceback
  tr traceback
  tf traceforward
  rm abolish
  st start
  pr prepare
  prep prepare
  stat status
  tag tag
  vars vars
  init init
  run run
  cont continue
  users users
  reindex reindex
  redo redo
  wait wait
  fail fail
  outdate outdate
  dups duplicates
  guess guess
  collect collect
  defvar defvar
  bash-loadvars bash-loadvars
  succeed succeed
  addtag add-tag
  adddep add-deps
  add-dep add-deps
  adddir add-dir
  addremote add-remote
  path path
  getvar get-var
);
# all expanded names are also allowed:
foreach my $val (values %expand_abbrev) {
  $expand_abbrev{$val} = $val;
}

my $wait_sleep = 3;
my $startupwd = cwd();
my $debug = 0;
my $dryrun = 0;
my $reindex = 0;
my $verbose = 0;
my $manpage = 0;
my $help = 0;
my $colorize = undef; # surely colorize output
my $list_options = 0;
my $assume_abolished_ok = 0;
my $show_tree_in_traceback = 1;
my $show_tag = 0;
my $show_vars = 0;
my $show_status = 0;
my $show_log = 0;
my $show_jobid = 0;
my $list_only_steps_with_no_users = 0;
my $show_disk_usage = 0;
my $print_created_step = 0; # for machine use of eman init/clone
my $recurse = 1; # in traceback; switched off when using vars -s
my $sge = 1;
my $do_start = 0;
my $subst = undef;
my $avoid = undef;
my $reuse = undef;
my $ignore = undef; # like avoid but may include just steptype, not fully
                    # qualified steps
# Also used when cloning from a text recipe: we sometimes
# need to say that a step is already available where it actually it not but
# where we know the init phase of the depending step will solve it somehow.
# With corpman, this happens quite often when there are more ways to create a
# corpus. Cloning a traceback with exact steps leading to a corpus may fail
# beucase the corpus exists but it was created differently. So when cloning
# such a traceback, just --ignore=corpus.
my $avoid_all = 0;
my $readonly = 0; # don't save anything, e.g. when browsing sb. elses exps
$readonly = 1 if defined $ENV{"EMAN_READONLY"};
# standard filenames and filename parts
my $dirprefix = "s."; # stands for 'step'
my $indexfile = "eman.index";
my $resultsfile = "eman.results";
my $resultsconffile = "eman.results.conf";
my $seedsdir = "eman.seeds";
my $subdirs_file = "eman.subdirs";
my $maindir = undef; # the path of the directory with seeds, steps etc.
                     # guessed using chdir_to_maindir

my $qsub_available = undef;

# qsub flags we interpret
my $queue = undef;
my $priority = -100; # use a lower priority by default
my $exclude_comp = undef; # exclude a single computer
my $mem = undef; # informative memory requirements
my $disk = undef; # informative temp disk requirements
my $time = undef; # time limit
my @limits = ();  # other custom limits
my @userholds = (); # SGE jobids to wait for
# the 'environment' used to interpret qsub flags
my $env = "ufal"; # SGE environment (used for option mapping)
my $hostname = `hostname`;
if ($hostname =~ /^cluster-cn-/i) {
  $env = "rwth";
}
my $subdir = "."; # the directory where to create the experiments

my %options = (
  "help|h" => \$help,
  "verbose|v" => \$verbose,
  "debug" => \$debug,
  "dry-run!" => \$dryrun,
     # note that dry runs are not quite reliable because seeds are allowed to
     # set default values of variables, so searching for a matching step works
     # differently for cases where the seed was run (real runs) or where it was
     # not run (dry runs)
  "list-options" => \$list_options,
  "man" => \$manpage,
  "sge!" => \$sge,
  "colorize!" => \$colorize,
  "assume-abolished-ok" => \$assume_abolished_ok, # for eman start
  "tree-in-traceback!" => \$show_tree_in_traceback,
  "tag!" => \$show_tag,
  "vars!" => \$show_vars,
  "status!" => \$show_status,
  "jobid!" => \$show_jobid,
  "log!" => \$show_log,
  "only-leaves|only-leafs!" => \$list_only_steps_with_no_users,
  "disk-usage|dus!" => \$show_disk_usage,
  "read-only|readonly!" => \$readonly,
  "s|subst=s@" => \$subst,
  "avoid=s@" => \$avoid,
  "reuse=s@" => \$reuse,
  "ignore=s@" => \$ignore,
  "all-avoid!" => \$avoid_all,
  "start!" => \$do_start,
  "print-created-step!" => \$print_created_step,
  "reindex" => \$reindex,
  "queue=s"=>\$queue,
  "priority=i"=>\$priority,
  "exclude-comp=s"=>\$exclude_comp,
  "mem=s"=>\$mem, # set e.g. to 10m or 4g
  "disk=s"=>\$disk, # format: 10g
  "time=s"=>\$time, # format: hh:mm:ss
  "limit|l=s@"=>\@limits, # format, e.g.: h_stack=30M
  "hold=s@"=>\@userholds, # format: 123456
  "subdir=s"=>\$subdir,
);
GetOptions(%options) or exit 1;

my %avoid = map { (guess_step($_),1) } @$avoid if defined $avoid;
my %reuse = map { (guess_step($_),1) } @$reuse if defined $reuse;
my %ignore = map { ($_,1) } @$ignore if defined $ignore;

# colorize regex outputs if substituting and output is terminal (or wished)
if ($colorize || (!defined $colorize && -t STDOUT)) {
  my $hicolor = color("on_yellow");
  my $uncolor = color("reset");
  $subst = [ map {s/([^\/])\//$1\/$hicolor/;
                  s/\/([^\/]*$)/$uncolor\/$1/; $_;} @$subst];
}

my $command = shift;
my $cmd = recognize_command($command);
my $waserror = 0;

sub mydie($) {
  my $msg = shift;
  print STDERR $msg."\n";
  exit 1;
}

if (defined $command && !defined $cmd) {
  print STDERR "Bad command: $command\n";
  $waserror = 1;
  $help = 1;
}


# Help and usage, inspired by btred by Petr Pajas
if ($manpage) {
### show manpage on console
#  pod2usage(-exitstatus => 0, -verbose => 99, -sections => '.*');
  pod2usage(-exitstatus => 0, -verbose => 2);
}
if ($help || !defined $command) {
  pod2usage(-msg => 'eman, experiment management');
  exit $waserror;
}
if ($list_options) {
  # show all possible command line options of eman
  foreach my $o (keys %options) {
    $o=~s/=.$//;
    foreach my $oo (split /\|/,$o) {
      print sort ((length($oo)>1) ? "--$oo\n" : "-$oo\n");
    }
  }
  exit;
}

my $lock = undef;

# all subdirs need to be known before helper commands
guess_maindir();
my $oldwd = chdir_to_maindir();
my $autoreadonly = ( !$reindex && $cmd =~ /^(traceback|vars|succeed|fail|status)$/ );
$autoreadonly = 1 if defined $ENV{"EMAN_READONLY"};
  # don't warn if readonly mode came from env.vars

my @subdirs;
if (-e $subdirs_file) {
  my $subdirs_hdl = my_open($subdirs_file);
  while (<$subdirs_hdl>) {
    chomp;
    push @subdirs, $_;
  }
  close $subdirs_hdl;
} else {
  # the first time we run
  push @subdirs, $maindir;
  # create the file
  if (! $readonly && ! $autoreadonly) {
    my $subdirs_hdl = my_save($subdirs_file);
    print $subdirs_hdl "$maindir\n";
    close $subdirs_hdl;
  }
}
chdir($oldwd) or die "Failed to chdir back to $oldwd";

## Helper commands for bash scripting of seeds
## These commands do not need and manipulate index at all

if ($cmd eq "bash-loadvars") {
  my $varsstr = try_load("eman.vars");
  mydie "eman.vars not set; Did you use 'eman defvar ...' before?"
    if !defined $varsstr;
  print $varsstr."\n";
  exit 0;
}

if ($cmd eq "add-tag") {
  mydie "usage: eman add-tag TAG [SPEC ...]" if 0 == scalar @ARGV;
  my $newtag = shift;
  push @ARGV, "." if 0 == scalar @ARGV; # operate on cwd if nothing given
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    my $oldwd = chdir_to_stepdir($step);
    my $oldtag = load_tag($step);
    save("eman.tag", (defined $oldtag ? $oldtag." ".$newtag : $newtag));
    chdir($oldwd) or die "Failed to chdir back to $oldwd";
  }
  chdir_to_maindir();
  reindex_tags();
  exit $waserror;
}

if ($cmd eq "add-deps") {
  my $step = shift;
  mydie "usage: eman add-deps SPEC DEP1 DEP2 ..." if ! defined $step;
  my $s = guess_step($step); # guess the exact step
  my $olddeps = load_depsarr($s);
  my %deps = map { ($_, 1 ) } @$olddeps; # convert to hash
  foreach my $dep (@ARGV) {
    my $d = guess_step($dep);
    $deps{$d} = 1; # add this among the deps
  }
  chdir_to_stepdir($s);
  save("eman.deps", join("\n", sort {$a cmp $b} keys %deps));
  exit $waserror;
}

if ($cmd eq "defvar") {
  # assuming a sequence of defvar commands
  # construct the file eman.vars
  my $step = guess_step("."); # guess our step name
  my $vars; # ->{varname}->{'opt'}->{'help'} = ...
            # ->{varname}->{'val'} = ...the value from the environment...
            # ->{varname}->{'defined'} = 1  ... always
  my %deps = (); # the dependencies we've learned about

  # load previous eman.deps
  my $olddeps = load_depsarr($step);
  %deps = map { ($_, 1 ) } @$olddeps; # convert to hash

  my @cmds = @ARGV;
  my @var_decls;
  unshift @cmds, "defvar";
  while (scalar @cmds) {
    my $cmd = shift @cmds;
    die "Expected only 'defvar' commands, got: $cmd" if $cmd ne "defvar";
    my $varname = shift @cmds;
    push @var_decls, $varname;
    $vars->{$varname}->{'defined'} = 1;
    $vars->{$varname}->{'val'} = $ENV{$varname};
    # load all flags like 'help', 'default', ...
    while (scalar @cmds && $cmds[0] ne "defvar") {
      my $opt = shift @cmds;
      my ($optname, $optval) = split /=/, $opt, 2;
      $vars->{$varname}->{'opt'}->{$optname} = $optval;
    }
  }
  # check all the vars and prepare the eman.vars file
  my $varshelp = "The step needs the following variables:\n";
    # the info to show upon error
  my $outvars = load_vars_hash($step);
  foreach my $varname (@var_decls) {
    my $thisvarhelp = $vars->{$varname}->{'opt'}->{'help'};
    $thisvarhelp = "" if !defined $thisvarhelp;
    my $thisvardefault = $vars->{$varname}->{'opt'}->{'default'};
    my $usevalue;
    if (defined $vars->{$varname}->{'val'}) {
      # user specified the value
      $usevalue = $vars->{$varname}->{'val'};
    } elsif (defined $vars->{$varname}->{'opt'}->{'inherit'}) {
      # value can be inherited from a particular step
      my $stepvar = $vars->{$varname}->{'opt'}->{'inherit'};
      my ($stepname, $fromvar) = split ':', $stepvar;
      if (!defined $vars->{$stepname}->{'opt'}->{'type'}
          || ($vars->{$stepname}->{'opt'}->{'type'} ne 'reqstep'
          && $vars->{$stepname}->{'opt'}->{'type'} ne 'optstep')) {
        $varshelp .= "    !!! $stepname is not a step\n";
        $waserror = 1;
      }
      $fromvar = $varname if ! defined $fromvar;
      if (defined $outvars->{$stepname}) {
        # the error message when undefined not necessary, the
        # outvar->{stepname} will complain anyway
        my $parent_vars_str = load_vars_str($outvars->{$stepname});
        if (defined $parent_vars_str) {
          my ($var) = grep { $_ =~ m/^$fromvar=/ }
                      split(/\n/, $parent_vars_str);
          if (defined $var) {
            $usevalue = (split('=', $var, 2))[1];
            $usevalue = var_bash_unescape($usevalue);
          }
        }
      }
    } elsif (defined $vars->{$varname}->{'opt'}->{'same_as'}) {
      my $same_as = $vars->{$varname}->{'opt'}->{'same_as'};
      $usevalue = $outvars->{$same_as};
    }

    # try default value for the variable
    $usevalue = $thisvardefault if ! defined $usevalue;

    $varshelp .= "  $varname ... $thisvarhelp"
      .(defined $vars->{$varname}->{'opt'}->{'inherit'}
          ? " [inherited from $vars->{$varname}->{opt}->{inherit}]" : "")
      .(defined $thisvardefault ? " [$thisvardefault]" : "")
      ."\n";
    if (defined $usevalue) {
      # ok, we got the value
      $outvars->{$varname} = $usevalue;
      my $type = $vars->{$varname}->{'opt'}->{'type'};
      if (defined $type) {
        # do some consistency checks and other bits
        if ($type eq "reqstep"
            || ($type eq "optstep" && $usevalue)) {
          $deps{$usevalue} = 1;
          if (!step_valid($usevalue)) {
            $varshelp .= "    !!! $usevalue is not a valid step\n";
            $waserror = 1;
          }
        }
      }
    } else {
      # value missed
      $varshelp .= "    !!! $varname was not defined.\n";
      $waserror = 1;
    }
  }
  if ($waserror) {
    print STDERR $varshelp;
  } else {
    # if eman.vars already exist, load them (but overrite them with the current ones)
    save_vars_hash($step, $outvars);
    save("eman.deps", join("\n", sort {$a cmp $b} keys %deps));
  }
  exit $waserror;
}
## End of commands that don't manipulate index.


## Decide if we will lock the index
$oldwd = chdir_to_maindir();
  # for "tb | clone"
if ($readonly || $autoreadonly
    || (-e $indexfile && ! -w $indexfile) || ! -w '.') {
  $readonly = 1;
  print STDERR "Read-only mode.\n" if !$autoreadonly;
} else {
  # obtain lock for index file, keep it locked until we know
  # the command is read-only
# We are not locking any more, we will simply create the index somewhere else
# and move it to its place atomically.
#  $lock = File::NFSLock->new($indexfile, LOCK_EX, 10, 30*60);
#  die "Failed to obtain lock for $indexfile, try --read-only."
#    if !defined $lock;
}

# Load and update index, possibly also saving it
my $idx;
if ($cmd eq "reindex" || $reindex) {
  # do not load any saved values
} else {
  $idx = loadidx();
}
# routines for autotags
my $autotag_rules = undef; # to be loaded by load_autotag_rules("eman.autotags");
# autotag_rules->{steptype} = [ [list of regexes producing one tag],
#   [list of regexes producing another tag] ]


foreach my $subdir (@subdirs) {
  my @steps = glob("$subdir/$dirprefix*.*.[0-9]*");
  foreach my $s (@steps) {
#    print STDERR "indexing $s\n";
    next if defined $idx->{basename($s)."path"}; # && defined $idx->{$s."jid"};
                                # now avoiding costly regeneration of metadata
                                # use --reindex if you miss jobids
    next if ! stepdir_valid($s);
    add_stepdir_to_index($s);

    my $stepname = basename($s);

    # mark that this step uses its deps
    my $deps = load_depsarr($stepname);
    if (defined $deps) {
      foreach my $d (@$deps) {
        $idx->{'USED_BY'}->{$d}->{$stepname} = 1;
      }
    }
    print STDERR "$stepname: $idx->{$stepname}\n" if $debug;
  }
}

if ($cmd eq "retag" || $cmd eq "reindex") {
  # reindex implies also refreshing autotags
  if (-e "eman.autotags") {
    $autotag_rules = load_autotag_rules("eman.autotags");
  }
  reindex_tags();
  exit 1 if $waserror;
}

#print STDERR "done here\n";

saveidx($idx) if ! $readonly;
chdir($oldwd) or die "Failed to chdir back to $oldwd";
## End of updating the index

exit 0 if $cmd eq "reindex"; # the job has been done already
exit 0 if $cmd eq "retag"; # the job has been done already


## handle all the various commands

# the following commands are read-only
if ($cmd eq "guess") {
  # just guessing step directories
  $lock->unlock() if defined $lock;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    print $step."\n";
  }
  exit 0;
}

if ($cmd eq "tabulate") {
  # beautifying all collected results
  $lock->unlock() if defined $lock;
  $waserror = !tabulate();
  exit $waserror;
}

if ($cmd eq "collect") {
  # collecting results from all experiments
  $lock->unlock() if defined $lock;
  $waserror = !collect();
  exit $waserror;
}

if ($cmd eq "list") {
  # listing steps of the given types
  $lock->unlock() if defined $lock;
  $waserror = !list([@ARGV]);
  exit $waserror;
}

if ($cmd eq "status") {
  # listing steps of the given types including status
  $lock->unlock() if defined $lock;
  $show_status = 1;
  $waserror = !list([@ARGV]);
  exit $waserror;
}

if ($cmd eq "tag") {
  # listing steps of the given types including tag
  $lock->unlock() if defined $lock;
  $show_tag = 1;
  $waserror = !list([@ARGV]);
  exit $waserror;
}

if ($cmd eq "vars") {
  # listing steps of the given types including variables
  $lock->unlock() if defined $lock;
  $show_vars = 1;
  if(defined $subst && scalar (@$subst) > 0) {
    # actually use traceback if we are doing substitutions
    $recurse = 0;
    $cmd = "traceback";
  } else {
    $waserror = !list([@ARGV]);
    exit $waserror;
  }
}

if ($cmd eq "duplicates") {
  # listing steps with identical variables
  $lock->unlock() if defined $lock;
  $waserror = !list_duplicates();
  exit $waserror;
}

if ($cmd eq "traceback") {
  $lock->unlock() if defined $lock;
  mydie "usage: eman traceback SPEC ..." if 0 == scalar @ARGV;
  $show_vars = 1 if defined $subst && scalar (@$subst) > 0;
    # so that there is something to substitute
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    traceback("", $step);
  }
  exit 0;
}

if ($cmd eq "users") {
  $lock->unlock() if defined $lock;
  mydie "usage: eman users SPEC ..." if 0 == scalar @ARGV;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    my $users = $idx->{'USED_BY'}->{$step};
    next if !defined $users;
    foreach my $u (keys %$users) {
      print_short($u);
    }
  }
  exit 0;
}

if ($cmd eq "wait") {
  $lock->unlock() if defined $lock;
  mydie "usage: eman wait SPEC ..." if 0 == scalar @ARGV;
  my %steps = map { my $s = guess_step($_); ($s, load_status($s)) } @ARGV;
  # check if any steps have no chance
  my @no_chance = grep { $steps{$_}
                         !~ /^(STARTING|RUNNING|DONE|FAILED|OUTDATED)$/ }
                  keys %steps;
  if (0 < scalar @no_chance) {
    print STDERR "Won't wait for these, not running:\n";
    foreach my $s (@no_chance) {
      print STDERR "  $s\t$steps{$s}\n";
    }
    $waserror = 1;
  }
  my @queue = grep { $steps{$_} =~ /^(STARTING|RUNNING)$/ } keys %steps;
  print STDERR "Waiting for ".scalar(@queue)." jobs.\n";
  while (0 < scalar @queue) {
    sleep $wait_sleep;
    my @newqueue = ();
    foreach my $step (@queue) {
      my $s = load_status($step);
      if ($s !~ /^(STARTING|RUNNING|DONE|FAILED|OUTDATED)$/ ) {
        print STDERR "Got unexpected status: $step\t$s\n";
        $waserror = 1;
        next;
      }
      push @newqueue, $step if $s =~ /^(STARTING|RUNNING)$/;
    }
    @queue = @newqueue;
  }
  exit $waserror;
}

if ($cmd eq "select") {
  $waserror = ! select_steps(@ARGV);
  exit $waserror;
}

if ($cmd eq "path") {
  my $stepname = $ARGV[0];
  guess_maindir();
  if (defined $stepname) {
    print get_stepdir($stepname), "\n";
  } else {
    print "$maindir\n";
  }
  exit $waserror;
}

if ($cmd eq "get-var") {
  my ($stepname, $varname) = @ARGV;
  mydie "Usage: eman get-var STEP VAR" if ! defined $varname;
  my @vars = grep { $_ =~ m/^$varname=/ }
             map { var_bash_unescape($_) }
             split /\n/, load_vars_str($stepname);
  if (!defined $vars[0]) {
    print "\n";
  } else {
    my $value = (split '=', $vars[0])[1];
    $value = "" if !defined $value;
    print $value, "\n";
  }
  exit $waserror;
}

if ($command eq "fail") {
  mydie "usage: eman fail SPEC ..." if 0 == scalar @ARGV;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    chdir_to_stepdir($step);
    save("eman.status", "FAILED");
    chdir_to_maindir();
  }
  exit $waserror;
}

if ($command eq "succeed") {
  mydie "usage: eman succeed SPEC ..." if 0 == scalar @ARGV;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    chdir_to_stepdir($step);
    save("eman.status", "DONE");
    chdir_to_maindir();
  }
  exit $waserror;
}

if ($command eq "outdate") {
  mydie "usage: eman outdate SPEC ..." if 0 == scalar @ARGV;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    chdir_to_stepdir($step);
    save("eman.status", "OUTDATED");
    chdir_to_maindir();
  }
  exit $waserror;
}



if ($cmd eq "abolish") {
  mydie "usage: eman abolish STEPDIR ..." if 0 == scalar @ARGV;
  foreach my $step (@ARGV) {
    my $s = canon_stepdir($step);
      # abolish is pickier wrt to input, so no guessing
    chdir_to_stepdir($s);
    for my $f (glob("*")) {
      next if $f =~ /^eman\./;
      next if $f =~ /^log\./;
      if (-d $f) {
        rmtree($f) or $waserror = 1;
      } else {
        unlink($f) or $waserror = 1;
      }
    }
    save("eman.abolished", `date`);
    save("eman.status", "ABOLISHED");
    chdir_to_maindir();
  }
  exit $waserror;
}

if ($cmd eq "prepare") {
  my $step = shift;
  mydie "usage: eman prepare STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  $waserror = ! prepare($s);
  exit $waserror;
}

if ($cmd eq "run") {
  my $step = shift;
  mydie "usage: eman run STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  $waserror = ! submit($s);
  exit $waserror;
}

if ($cmd eq "continue") {
  my $step = shift;
  mydie "usage: eman continue STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  chdir_to_stepdir($s);
  my $stat = load_status($s);
  mydie "Only FAILED steps can be continued (after you manual fixes of eman.command)."
    if $stat ne "FAILED";
  save("eman.status", "PREPARED"); # fake our status
  $waserror = ! submit($s);
  exit $waserror;
}

if ($cmd eq "start") {
  my $step = shift;
  mydie "usage: eman run STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  $waserror = ! start($s);
  exit $waserror;
}


# the following commands don't work with readonly
print STDERR "Warning: running '$cmd' in read-only mode, make sure to reindex.\n"
  if $readonly;

if ($cmd eq "init") {
  my $steptype = shift;
  mydie "usage: eman init STEPTYPE" if ! defined $steptype;
  my $s = init($steptype);
  $waserror = ! defined $s;
  $waserror = ! start($s) if defined $s && $do_start;
  print $s, "\n" if $print_created_step && defined $s;
  exit $waserror;
}

if ($cmd eq "clone") {
  my $step = shift;
  if (defined $step) {
    # clone the single dir
    my $srcstep = guess_step($step); # happily guess the exact step
    my $srcvarsstr = load_vars_str($srcstep);
    # decide which vars should be cloned
    # for vars that are already defined in the environment, use the value
    # from the environment, not the scenario
    my @srcvars = split /\n/, $srcvarsstr;
    my @usevars = map { my ($varname, $val) = split /=/, $_, 2;
                        defined $ENV{$varname}
                          ? "$varname=".var_bash_escape($ENV{$varname})
			     # prefer environment, remember to escape it
                          : $_; # use the value from the scenario
                      } @srcvars;
    my $news = init(get_steptype($srcstep), \@usevars, $srcstep);
    $waserror = 1 if ! defined $news;
    $waserror = ! start($news) if defined $news && $do_start;
    print $news, "\n" if $print_created_step && defined $news;
  } else {
    print STDERR "Loading recipe from stdin.\n";
    my $recipestr = load("-");
    my $recipe = parse_recipe([split /\n/, $recipestr]);
    print YAML::Dump($recipe) if $debug;
    my $depmap = {};
    my $newtopstep = init_by_recipe($recipe, $depmap);
    $waserror = ! start($newtopstep) if defined $newtopstep && $do_start;
    if (defined $newtopstep) {
      if ($print_created_step) {
        # we don't print the traceback if we are printing top step name
        # the traceback would mess stdout
        print $newtopstep, "\n";
      } else {
        $show_status = 1;
        traceback("NEW ", $newtopstep);
      }
    }
  }
  exit $waserror;
}

if ($command eq "redo") {
  my $step = shift;
  mydie "usage: eman redo STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  $avoid{$s} = 1; # assume the main experiment is to be redone anyway
  my $recipe = traceback_to_recipe($s);
  my $depmap = {};
  my $newtopstep = init_by_recipe($recipe, $depmap);
  $waserror = ! start($newtopstep) if defined $newtopstep && $do_start;
  if (defined $newtopstep) {
    $show_status = 1;
    traceback("OLD ", $s);
    traceback("NEW ", $newtopstep);
    print STDERR "Traceback of NEW not reliable in --dry-run.\n" if $dryrun;
  } else {
    $waserror = 1;
  }
  exit $waserror;
}


if ($cmd eq "add-dir") {
  $waserror = ! add_dir(@ARGV);
  exit $waserror;
}

if ($cmd eq "add-remote") {
  $waserror = ! add_remote_playground(@ARGV);
  exit $waserror;
}

$lock->unlock() if defined $lock;
exit $waserror;
## end of main

sub collect {
  # collect results from all experiments
  my $resconf = load($resultsconffile);
  my $outh = my_save($resultsfile);
  my $ok = 1;
  my $got;
  my %knowntag; # a local cache of tags
  foreach my $line (split /\n/, $resconf) {
    my ($name, $glob, $regexorcmd) = map { s/^ +//; s/ +$//; $_ }
                                     split /\t/, $line;
    my @files = ( map { glob($_."/".$glob) } @subdirs);
    # print STDERR "$name ($glob):\n";
    # print STDERR join("\n", @files);
    # print STDERR "\n\n";
    foreach my $f (@files) {
      my $step = guess_stepname_from_pathname($f); #$f; $step =~ s/\/.*//;
      my $name_to_res = undef;
      if ($regexorcmd =~ /^CMD:(.*)\$\$(.*)/) {
        # e.g. "CMD: du -sh $$"
        my $res = `$1 $f $2`;
        chomp $res;
        if ($name eq "*") {
          # assume the command emits name\tvalue pairs
          foreach my $pair (split /\n/, $res) {
            my ($k, $val) = split /\t/, $pair;
            $name_to_res->{$k} = $val;
          }
        } else {
          # whole output is the value
          $res =~ s/\n+/ /;
          $name_to_res->{$name} = $res;
        }
      }
      elsif ($regexorcmd =~ /^CMD: *(.*)/) {
        my $res = `cat $f | $1`;
        chomp $res;
        if ($name eq "*") {
          # assume the command emits name\tvalue pairs
          foreach my $pair (split /\n/, $res) {
            my ($k, $val) = split /\t/, $pair;
            $name_to_res->{$k} = $val;
          }
        } else {
          # whole output is the value
          $res =~ s/\n+/ /;
          $name_to_res->{$name} = $res;
        }
      } else {
        my $cont = load($f);
        if ($cont =~ /$regexorcmd/) {
          $name_to_res->{$name} = $1;
        } else {
          print STDERR "$f:Missed result for $name, no match of /$regexorcmd/";
          $ok = 0;
          next;
        }
      }
      # emit all obtained scores
      foreach my $k (keys %$name_to_res) {
        my $res = $name_to_res->{$k};
        if (defined $got->{$step}->{$k} && $got->{$step}->{$k} ne $res) {
          print STDERR "$f:Conflicting result for $k:"
            ." $res vs. previous $got->{$step}->{$k}\n";
          $ok = 0;
        } else {
          $got->{$step}->{$k} = $res;
        }
        my $tag = $knowntag{$step};
        if (!defined $knowntag{$step}) {
          $tag = compiled_tag_string($step);
        }
        $knowntag{$step} = $tag;
        print $outh $step, "\t", load_status($step), "\t",
	  $k, "\t", $res, "\t", $tag, "\n";
      }
    }
  }
  foreach my $step (keys %knowntag) {
    # emit also all tags
    print $outh $step, "\t", load_status($step), "\t",
      "TAG", "\t", $knowntag{$step}, "\n";
  }
  close $outh;
  return $ok;
}

sub parse_recipe {
  # parse traceback output with vars into a recipe
  my $lines = shift;
    # input stream of lines
  my $cutprefix = shift;
    # the depth we need to cut now
  my $recipe = shift;
    # the recipe so far

  $cutprefix = "" if ! defined $cutprefix;

  # peek at the first line, if going deeper, add one more dep,
  # if going shallower or end, return accumulator
  my $exact = "$cutprefix+- ";
  my $deeper = "$cutprefix|  +- ";
  my $shallower = substr($cutprefix, 0, -3);
  while (defined $lines && defined $lines->[0]) {
    if ($lines->[0] =~ /^\Q$exact\E([^ ]+)$/) {
      if (defined $recipe->{"name"}) {
        # this is actually one more dependency of our father, ie. our brother,
        # not us. Return and have the father start the brother
        last;
      }
      my $name = $1;
      print STDERR "$cutprefix:Exact at: $lines->[0]\n" if $debug;
      $recipe->{"name"} = $name;
      $recipe->{"vars"} = [];
      $recipe->{"deps"} = [];
      shift @$lines;
      my $tailexact = "$cutprefix|  | ";
      while (defined $lines->[0] && $lines->[0] =~ /^\Q$tailexact\E(.*)/) {
        my $line = $1;
        my $thisline = shift @$lines;
        next if $line =~ /^Job:/; # skip tag, jobid and other things
        if ($line =~ /^[A-Za-z_0-9]+=/) {
          # let's hope this is a variable
          push @{$recipe->{"vars"}}, $line;
        print STDERR "$cutprefix:    got var: $line\n" if $debug;
        } else {
          mydie "Bad recipe, strange line: $thisline";
        }
      }
      next; # now read deps etc
      # return parse_recipe($lines, $cutprefix, $recipe);
    }

    if (defined $lines && defined $lines->[0]
        && $lines->[0] =~ /^\Q$deeper/) {
      # Delving deeper by one level
      print STDERR "$cutprefix:Deeper at: $lines->[0]\n" if $debug;
      my $dep = parse_recipe($lines, $cutprefix."|  ");
      push @{$recipe->{"deps"}}, $dep;
      print STDERR "$cutprefix:New dep for $recipe->{name}: $dep->{name}\n" if $debug;
      print STDERR "$cutprefix:Deeper tail at: ".($lines->[0]||"EOF")."\n" if $debug;
      next; # read further deps
      # return parse_recipe($lines, $cutprefix, $recipe);
    }

    if (! defined $lines->[0]
      || $lines->[0] =~ /^(\|  )*\+- /) {
      # Going shallower
      print STDERR "$cutprefix:Return from $recipe->{name} at: ".($lines->[0]||"EOF")."\n" if $debug;
      last;
    }

    mydie "Bad recipe, unexpected line: $lines->[0]";
  }
  return $recipe;
}

sub init_by_recipe {
  # given a recipe; a recipe has the following form:
  #      $recipe = { "name"=>'s.type.abcdef.2010',
  #                  "vars"=>['X=x', 'Y=y'], "deps"=>[recipe1, recipe2]}
  # initializes a fresh tree using the variables and dependences
  # we attempt to reuse existing steps unless they failed or are '--avoid'ed
  my $recipe = shift;
  my $depmap = shift;
  confess "implementation error: undef depmap" if !defined $depmap;

  my $thisname = $recipe->{"name"};
  my $thissteptype = get_steptype($thisname);

  if ($reuse{$thisname}) {
    print STDERR "Forced to --reuse: $thisname\n";
    return $thisname;
  }
  if ($ignore{$thisname} || $ignore{$thissteptype}) {
    print STDERR "Ignoring (kind of reusing): $thisname\n";
    return $thisname;
  }

  # print "INIT_BY_RECIPE: $thisname\n";

  # handle all dependencies
  my $olddeps = $recipe->{"deps"};
  my @newdeps = ();
  if (defined $olddeps && scalar @$olddeps > 0) {
    foreach my $d (@$olddeps) {
      # print "DEPMAP1: ".join(" ", %$depmap)."\n" if defined $depmap;
      my $newd = init_by_recipe($d, $depmap);
      return undef if !defined $newd;
      push @newdeps, $newd;
      my $oldd = $d->{"name"};
      # print "OLDD $oldd\n";
      # print "NEWD $newd\n";
      if ($newd ne $oldd) {
        $depmap->{$oldd} = $newd;
      }
      # print "DEPMAP2: ".join(" ", %$depmap)."\n" if defined $depmap;
    }
  }

  # perform replacements of deps in vars
  # note that previous init_by_recipe might have proposed more replacements
  my $oldvars = $recipe->{"vars"};
  # print "REPL: ".join(" ", %$depmap)."\n" if defined $depmap;
  # print "VARSBEF: @$oldvars\n";
  my @newvars = map {
      foreach my $oldd (keys %$depmap) {
        my $newd = $depmap->{$oldd};
        #print "VARSOLDD $oldd\n";
        #print "VARSNEWD $newd\n";
        s/\Q$oldd\E/$newd/g;
      }
      $_;
    } ( @$oldvars );
  # print "VARSAFT: @newvars\n";
  # env. vars override the recipe (for usecases like V=x eman redo)
  @newvars = map { my ($varname, $val) = split /=/, $_, 2;
                   defined $ENV{$varname}
                     ? "$varname=".var_bash_escape($ENV{$varname})
                 # prefer environment
                     : $_; # use the value from the scenario
                 } @newvars;

  # check if such a step exists already
  my $knownstep;
  my $hash = get_hash_from_vars_deps($thisname, \@newvars, \@newdeps);
  if ($debug) {
    print STDERR "CHECKING $hash:\n";
    print STDERR join("\n", @newvars)."\n";
    print STDERR join("\n", @newdeps)."\n";
  }
  # find suitable known step
  $avoid{$thisname}=1 if $avoid_all;
    # --all-avoid forbids reusing *input* steps
    # but it does not prohibit reusing freshly created steps
  if (defined $idx->{$thisname} && $idx->{$thisname} eq $hash
      && step_good_to_reuse($thisname)) {
    print STDERR "The given $thisname actually fits.\n" if $debug;
    $knownstep = $thisname;
  } else {
    $knownstep = find_usable_step_given_hash($hash);
  }

  if (defined $knownstep) {
    print STDERR "Reusing existing step: $knownstep\n";
    # print "LEAVING INIT_BY_RECIPE: $thisname\n";
    return $knownstep;
  } else {
    # init a new step using the vars
    print STDERR "Initing new step $thissteptype (for $thisname in the recipe).\n";
    my $newstep = init($thissteptype, \@newvars, $thisname);
    return undef if ! defined $newstep;
    # Double check that initing the new step did not lead to exacty the known
    # step. This can happen due to default or blank variable values -- they are
    # not mentioned in the traceback (so we don't find the known step in the
    # first place).
    my $oldknownstep = find_usable_step_given_hash($idx->{$newstep});
    if (defined $oldknownstep && $oldknownstep ne $newstep) {
      print STDERR "The new $newstep is identical to $oldknownstep. Removing the new $newstep.\n";
      rmtree($newstep) or die "Warning: failed to remove $newstep.";
      remove_step_from_index($newstep);
      $newstep = $oldknownstep;
    }

    # print "LEAVING INIT_BY_RECIPE: $thisname\n";
    return $newstep;
  }
}

sub find_usable_step_given_hash {
  my $hash = shift;

  my $knownstep = undef; # output placeholder
  my $knownsteps = $idx->{$hash};
  my $knownstep_ctime;
  if (defined $knownsteps) {
    my @usable = ();
    foreach my $k (@$knownsteps) {
      print STDERR "Considering old: $k\n" if $debug;
      next if $avoid{$k};
        # an explicit wish to ignore this step
      if ($reuse{$k}) {
        # an explicit wish to use this step, ignore all other options
        print STDERR "Forced to reuse $k\n" if $verbose;
        @usable = ($k);
        $knownstep = $k;
        last;
      }
      if (step_good_to_reuse($k)) {
        push @usable, $k;
        my $this_ctime = -C $k;
        # of all the usable, select the oldest
        if (!defined $knownstep || $knownstep_ctime < $this_ctime) {
          $knownstep_ctime = $this_ctime;
          $knownstep = $k;
        }
      } else {
        print STDERR "Ignoring unusable $k\n" if $verbose;
      }
    }

    if (1<scalar(@usable)) {
      print STDERR "Selecting $knownstep of all the usable: @usable\n"
        if $verbose;
    }
  }
  return $knownstep;
}

sub step_good_to_reuse {
  my $step = shift;
  my $stepdir = get_stepdir($step);
  return (defined $stepdir && -d $stepdir
    && step_valid($step)
    && load_status($step) !~ /FAILED|NONEXISTENT|OUTDATED|ABOLISHED/
  );
}


my $init_dryrun_no = 0;
sub init {
  my $steptype = shift;
  my $varsarr = shift; # optional array of strings VAR="sd sdf"
                       # to be passed to the seed
  my $derived_from = shift;
  my $seed = $seedsdir."/".$steptype;
  mydie "Seed $seed not found." if ! -e $seed;
  mydie "Bad seed name, '.' not allowed." if $steptype =~ /\./;
  my $timestamp = `date '+%Y%m%d-%H%M'`; chomp $timestamp;
  mydie "Bad timestamp: $timestamp" if $timestamp !~ /^[-0-9]+$/;
  my $s;
  my $stepname;
  if ($dryrun) {
    $init_dryrun_no = 0 if !defined $init_dryrun_no;
    $init_dryrun_no++;
    $stepname = "s.fake.$init_dryrun_no";
    print STDERR "$stepname: ", join(" ", @$varsarr), "\n";
    add_fake_step_to_index($stepname, $varsarr);
    return $stepname;
  }
  add_dir($subdir);
  $s = mkdiruniq(abs_path($subdir)."/".$dirprefix.$steptype.".", ".".$timestamp);
  $stepname = basename($s);
  # populate the directory with all relevant files
  quietsystem("cp $seed $s/eman.seed") or die;
  my $oldwd = mychdir($s);
  quietsystem("set > eman.init_env") or die;
  save("eman.derived_from", $derived_from) if defined $derived_from;
  my $ok = 1;
  my $preservedir = 0;
  my @varsoverride = ();
  @varsoverride = @$varsarr if defined $varsarr;
  $ok = safesystem("INIT_ONLY=yes @varsoverride EMAN_READONLY=yes ./eman.seed >&2");
  if ($ok) {
    $preservedir = 1;
    print STDERR "Step $stepname inited, checking required files, supplying defaults.\n"
      if $verbose;

    # tag: can be blank, non-blank must be valid
    my $tag = try_load("eman.tag");
    if (defined $tag) {
      if ($tag =~ /[\s\n]/ ) {
        $ok = 0;
        print STDERR "No whitespace allowed in $stepname/eman.tag: $tag\n";
      }
    } else {
      save("eman.tag", ""); # save blank tag
    }

    # deps: can be blank, non-blank must be valid
    my $deps = try_load("eman.deps");
    if (defined $deps) {
      foreach my $d (split /\n/, $deps) {
        if (!step_valid($d)) {
          print STDERR "Invalid dependence: $d\n";
          $ok = 0;
        }
      }
    } else {
      save("eman.deps", ""); # save blank dependencies
    }

    # vars: must exist (blank vars make no sense)
    if (! defined try_load("eman.vars")) {
      print STDERR "$seedsdir/$steptype did not create eman.vars for $stepname\n";
      $ok = 0;
    }
  }

  if ($ok) {
    save("eman.status", "INITED");
    mychdir($oldwd);
    add_stepdir_to_index($s); # so that further cloning can use that
    print STDERR "Inited: $stepname\n";
  } elsif ($preservedir) {
    print STDERR "Failed to init the step. Check and delete: $stepname\n";
    $waserror = 1;
    save("eman.status", "INITFAILED");
  } else {
    print STDERR "Failed to init the step. Removing $stepname\n";
    mychdir($startupwd);
    rmtree($s) or die "Failed to remove $stepname";
  }
  mychdir($oldwd);
  return $ok ? $stepname : undef;
}

sub prepare {
  my $s = shift;
  my $status = load_status($s);
  if ($status =~ /^(PREPARED|DONE)$/
    || $assume_abolished_ok && $status eq "ABOLISHED") {
    print STDERR "$s already prepared.\n";
    return 1;
  }
  mydie "Only inited steps can be prepared: $s is $status"
    if $status ne "INITED" && $status ne "PREPFAILED";

  my $prevdir = chdir_to_stepdir($s);
  my $ok = 1;
  $ok = safesystem("eval \$(cat eman.vars) EMAN_READONLY=yes ./eman.seed >&2");
  print STDERR "Step $s prepared, checking required files.\n" if $verbose;
  if (! -e "eman.command") {
    $ok = 0;
    print STDERR "Step $s prepared badly. No eman.command\n"
  }
  if ($ok) {
    print STDERR "Step $s prepared.\n";
    save("eman.status", "PREPARED");
  } else {
    save("eman.status", "PREPFAILED");
  }
  mychdir($prevdir);
  return $ok;
}

sub start {
  # 1. check if all predecessors done, prepared or inited
  #    if *failed, fail
  # 2. walk back, make sure all are prepared (if not, prepare
  #    if failed, fail
  # 3. walk back, if done, ok, if prepared, submit
  #    subshould
  # check predecessors and if none of them failed
  # so that we wait for them
  my $s = shift;

  my $all_ok = fold_back($s,
                 sub {
                   my $this = shift;
                   my $aku = shift;
                   return 0 if !$aku; # propagate failure
                   my $stat = load_status($this);
                   if ($stat =~ /FAILED|OUTDATED/ || $stat eq "NONEXISTENT") {
                     return 0;
                   } else {
                     return 1;
                   }
                 },
                 1, # seed value
               );
  if (!$all_ok) {
    print STDERR "Cannot start $s, some deps have failed:\n";
    brief_traceback("  ", $s);
    return 0;
  }

  # now prepare all that need preparation
  my $prep_ok = fold_back($s,
    sub {
      my $this = shift;
      my $aku = shift;
      return 0 if !$aku; # propagate failure
      my $stat = load_status($this);
      return 1 if $stat =~ /^(PREPARED|DONE|RUNNING|STARTING)$|^WAITING/;
      return 1 if $assume_abolished_ok && $stat eq "ABOLISHED";
      return prepare($this);
    },
    1, # seed value
  );
  if (!$prep_ok) {
    print STDERR "Cannot start $s, failed to prepare some deps:\n";
    brief_traceback("  ", $s);
    return 0;
  }

  # finally submit bits that need to run
  my $start_ok = fold_back($s,
    sub {
      my $this = shift;
      my $aku = shift;
      return 0 if !$aku; # propagate failure
      my $stat = load_status($this);
      return 1 if $stat =~ /^(DONE|RUNNING|STARTING)$|^WAITING/;
      return 1 if $assume_abolished_ok && $stat eq "ABOLISHED";

      # convert each prerequisite name to jobid
      my @holds = ();
      my $deps = load_depsarr($this);
      if (defined $deps) {
        foreach my $dep (@$deps) {
          next if load_status($dep) eq "DONE";
          my $depid = load_jobid($dep);
          die "Failed to get jobid of $dep" if !defined $depid;
          push @holds, $depid;
        }
      }

      return submit($this, \@holds);
    },
    1, # seed value
  );
  if (!$start_ok) {
    print STDERR "Cannot start $s, failed to submit some steps.\n";
    return 0;
  }

  return 1;
}

sub fold_back {
  my $step = shift;
  my $sub = shift;
  my $aku = shift;

  my $deps = load_depsarr($step);
  foreach my $dep (@$deps) {
    $aku = fold_back($dep, $sub, $aku);
  }
  return $sub->($step, $aku);
}


sub brief_traceback {
  my $prefix = shift;
  my $s = shift;

  my @mem = ($show_status, $show_vars, $show_log);
  $show_status = 1;
  $show_vars = 0;
  $show_log = 0;
  traceback($prefix, $s);
  ($show_status, $show_vars, $show_log) = @mem;
}


sub submit {
  # assume all predecessors are DONE or their jobids are provided
  # so that we wait for them
  my $s = shift;
  my $holdjids = shift;
  my $status = load_status($s);
  mydie "Only prepared steps can be submitted, $s is $status"
    if $status ne "PREPARED";

  my $prevdir = chdir_to_stepdir($s);
  save("eman.status", "STARTING");
  my $ok = 1;
  my $jid = undef;
  # XXX should split holdjids into holds (for sge) and active waiting loops
  my @sgeholds = ();
  my @plainholds = ();
  foreach my $jid (@$holdjids) {
    if ($jid =~ /^[0-9]+$/) {
      # this is SGE job id
      push @sgeholds, "-hold_jid $jid";
    } else {
      push @plainholds, $jid;
    }
  }

  my $oldsgeholds = $ENV{"HOLDS"};
  $oldsgeholds ||= "";
  my $sgeholdsstr = join(" ", ($oldsgeholds, @sgeholds));

  # just to be sure
  quietsystem("chmod +x eman.command")
    or print STDERR "Failed to ensure executable bit for eman.command in $s\n";

  if (!defined $qsub_available) {
    $qsub_available = `which qsub 2>/dev/null` =~ /\//;
      # check if there is such an executable at all
    if ($qsub_available) {
      # check whether it is SGE qsub or PBS qsub
      my $sgeversion = `qsub -help nonexistent-file 2>&1 | grep GE 2>/dev/null`;
      $qsub_available = 0 if $sgeversion !~ /GE/;
    }
  }
  if ($sge && !$qsub_available) {
    print STDERR "Disabling SGE by default, failed to find qsub.\n";
    $sge = 0;
  }

  if (! $sge) {
    # avoid sun grid engine
    # XXX must wait for running jobs
    my $waitscript = "";
    $waitscript = "$eman --reindex wait @plainholds; "
      if 0 < scalar @plainholds;

    save("eman.wrapcommand", 'echo Host:PID: `hostname`:$$ ; '.$waitscript.'./eman.command 2>&1; echo PID: $$ > eman.wrapcommand.done');
    save("eman.status", "RUNNING"); # set status before starting to avoid race
    $ok = safesystem("( nohup /bin/bash ./eman.wrapcommand > log 2>&1 & )");
    if ($ok) {
      # get process id
      my $now = time();
      while (! defined $jid && time()-$now < 60) {
        if (-e "log") {
          my $hdl = my_open("log");
          my $nl = 0;
          while(<$hdl>) {
            $nl++;
            last if $nl > 10;
            if (/^Host:PID: (.+)$/) {
              $jid = $1;
              last;
            }
          }
          close $hdl;
        }
        sleep 1;
      }
      if (! defined $jid) {
        $ok = 0;
        print STDERR "Failed to get process id from the file log.\n";
      }
    }
  } else {
    # use sge
    die "Unimplemented to wait for some non-sge jobs: @plainholds"
      if 0 < scalar @plainholds;

    my @opts = ("-hard");
    push @opts, ("-j", "y");
    push @opts, ("-cwd");
    push @opts, ("-S", "/bin/bash");
    push @opts, ("-p", $priority);
    # interpret SGE options
    if (defined $queue) {
      push @opts, ("-q", $queue);
    }
    if (defined $exclude_comp) {
      die "Cannot use --queue and --exclude-comp at the same time"
        if defined $queue;
      push @opts, ("-q", "*@*&!$exclude_comp");
    }
    if (defined $time) {
      push @opts, ('-l', "h_rt=".$time);
    }
    if (defined $mem) {
      if ($env eq "rwth") {
        push @opts, ('-l', "h_vmem=".$mem);
      } else {
        # UFAL setup
        push @opts, ('-l', "mf=".$mem);
      }
    }
    if (defined $disk) {
      if ($env eq "rwth") {
        die "Unsupported --disk at rwth.";
      } else {
        # UFAL setup
        push @opts, ('-l', "mnthf=".$disk);
      }
    }
    # add all other directives --limit
    push @opts, map {('-l', $_)} @limits;
    # add all job holds
    push @opts, map {('-hold_jid', $_)} @userholds;

    save("eman.status", "RUNNING"); # set status before starting to avoid race
    $ok = safesystem("( qsub  -C '' $sgeholdsstr -N $s -o log.o\\\$JOB_ID @opts ./eman.command 2>&1 ) > log");
    if ($ok) {
      # get job id
      my $hdl = my_open("log");
      my $nl = 0;
      while(<$hdl>) {
        $nl++;
        last if $nl > 10;
        if (/Your job ([0-9]+) .*has been submitted/) {
          $jid = $1;
          last;
        }
      }
      close $hdl;
    }
  }

  if (defined $jid) {
    save("eman.jobid", $jid);
  } else {
    die "Failed to get jobid of the just submitted $s";
  }

  if ($ok) {
    print STDERR "Step $s submitted as job $jid\n";
  } else {
    save("eman.status", "FAILED");
  }
  mychdir($prevdir);
  return $ok;
}

sub list_duplicates {
  my $waserror = 0;

  my %hashcount; # how many different steps have the same hash
  my %share_hash; # the steps themselves
  foreach my $s (keys %$idx) {
    next if $s !~ /\Q$dirprefix\E([^\.]+)\..*/;
      # this is not a step
    my $hash = $idx->{$s};
    push @{$share_hash{$hash}}, $s;
    $hashcount{$hash} ++;
  }

  foreach my $hash (sort {$hashcount{$a} <=> $hashcount{$b}}
                    grep { $hashcount{$_} > 1 }
                    keys %hashcount) {
    print "\n";
    my $ok = list($share_hash{$hash});
    $waserror = 1 if !$ok;
  }
  return $waserror;
}

sub list {
  my $args = shift;
  # listing steps of the given types
  my $only_some_steptypes = 0;
  my %requested_steptype;
  if (0 < scalar @$args) {
    $only_some_steptypes = 1;
    %requested_steptype = map { ($_, 1) } @$args;
  }
  my %steps_to_list = ();
  foreach my $s (all_steps()) {
    next if ! step_valid($s);
    my $steptype = get_steptype($s);
    next if $only_some_steptypes && !defined $requested_steptype{$steptype};
    # mark that we accepted this argument
    $requested_steptype{$steptype} = 2
      if defined $requested_steptype{$steptype};
    $steps_to_list{$s} = 1;
  }
  my @not_found = ();
  foreach my $req (keys %requested_steptype) {
    if ($requested_steptype{$req} == 1) {
      my $guess = guess_step($req);
      if (defined $guess) {
        # this was not a steptype but a specific experiment
        $steps_to_list{$guess} = 1;
      } else {
        push @not_found, $req;
      }
    }
  }
  foreach my $s (sort { if (-e $a && -e $b) { -C $b <=> -C $a } else { -1 } }
                 keys %steps_to_list) {
    if ($list_only_steps_with_no_users) {
      my $users = $idx->{'USED_BY'}->{$s};
      next if defined $users;
    }
    print_short($s);
  }
  my $ok = 1;
  foreach my $req (@not_found) {
    $ok = 0;
    print STDERR "No steps of type: $req\n";
  }
  return $ok;
}

sub print_short {
  my $s = shift;

  print $s;
  print "\t", load_status($s) if $show_status;
  print "\t", compiled_tag_string($s) if $show_tag;
  print "\t", (load_jobid($s) || "") if $show_jobid;
  print "\t", show_disk_usage($s) if $show_disk_usage;
  print "\n";
  print_vars("  ", $s) if $show_vars;
  print_log("  ", $s) if $show_log;
}
sub print_vars {
  my $prefix = shift;
  my $s = shift;
  my $v = load_vars_str($s);
  return if !defined $v;
  foreach my $l (split /\n/, $v) {
    # perform substitutions, if defined and step not reused
    if (defined $subst && ! $reuse{$s}) {
      foreach my $s (@$subst) {
        eval '$l =~ s'.$s;
      }
    }
    print "$prefix$l\n";
  }
}
sub print_log {
  my $prefix = shift;
  my $s = shift;
  my $stepdir = get_stepdir($s);
  my $logtext = `tail -n3 $stepdir/log.* 2> /dev/null`;
  chomp $logtext;
  foreach my $l (split /\n/, $logtext) {
    print "$prefix$l\n";
  }
}

sub traceback_to_recipe {
  # construct a recipe from a traceback
  my $step = shift;
  mydie "Can't create traceback, $step nonexistent."
    if ! -e get_stepdir($step);
  my $recipe = { "name" => $step,
                 "vars" => [ split /\n/, load_vars_str($step) ],
                 "deps" => [],
               };
  my $deps = load_depsarr($step);
  foreach my $dep (@$deps) {
    push @{$recipe->{"deps"}}, traceback_to_recipe($dep);
  }
  return $recipe;
}
sub traceback {
  my $prefix = shift;
  my $step = shift;

  return if $avoid{$step} || $ignore{$step};
    # explicit avoiding of individual steps
  return if $ignore{get_steptype($step)}; # avoiding steps of a given type

  my $indent = $show_tree_in_traceback ? "+- " : "";
  print "$prefix$indent$step\n";
  my @kws; # space-delimited keywords
  if ($show_jobid) {
    my $jid = load_jobid($step);
    push @kws, $jid if defined $jid && $jid ne "-";
  }
  push @kws, load_status($step) || "" if $show_status;
  push @kws, compiled_tag_string($step) || "" if $show_tag;
  $indent = $show_tree_in_traceback ? "|  | " : "";
  print $prefix.$indent."Job: @kws\n" if 0 < scalar @kws;
  my $deps = load_depsarr($step);
  # if this step is reused, all deps are also reused
  # (this is useful in 'tb -s')
  if ($reuse{$step}) {
    foreach my $dep (@$deps) {
      $reuse{$dep} = 1;
    }
  }
  print_vars($prefix.$indent, $step) if $show_vars;
  print_log($prefix.$indent, $step) if $show_log;
  $indent = $show_tree_in_traceback ? "|  " : "";
  return if !$recurse;
  foreach my $dep (@$deps) {
    traceback($prefix.$indent, $dep);
  }
}


sub recognize_command {
  my $command = shift;
  return undef if !defined $command;
  $command = $expand_abbrev{$command};
  # no implicit acceptance. Always list the command in expand_abbrev, even if
  # it has no abbreviation (map it to itself)
  return $command;
}

sub mkdiruniq {
  my $prefix = shift;
  my $suffix = shift;

  my $dirnum = 1;
  my $tryname = mkdiruniq2($prefix, $suffix, $dirnum);
  while (-e $tryname) {
    $dirnum++;
    $tryname = mkdiruniq2($prefix, $suffix, $dirnum);
  }
  if (mkdir($tryname)) {
    return $tryname;
  } else {
    print STDERR "Failed to create the directory $tryname, $!";
    exit 1;
  }
}
sub mkdiruniq2 {
  my $prefix = shift;
  my $suffix = shift;
  my $num = shift;
  my $forhash = $prefix.$suffix.$num;
  my $hash = substr(md5_hex($forhash), 0, 8);
  return $prefix.$hash.$suffix;
}

sub absolutize_within_maindir {
  # return the absolute path to the file given
  # using a path relative to main directory
  my $fn = shift;
  return $fn if $fn =~ /^[\/~]/; # absolute path is already ok
  guess_maindir();
  return File::Spec->catfile($maindir, $fn); # this is the real meaning of absolutize_within_maindir
}

sub get_stepdir {
  my $step = shift;
  # given a step name, scan all the subdirs and return full path
  # to the step's directory
  return $idx->{$step . "path"} if defined $idx->{$step . "path"};
  # scan all subdirs
  for my $dir (@subdirs) {
    my $path = File::Spec->catfile($dir, $step);
    return $path if -e $path;
  }
  return undef;
}

sub absolutize_within_stepdir {
  # return the full path of a file given relative to the stepdir of a step
  my $step = shift;
  my $fn = shift;
  return File::Spec->catfile(get_stepdir($step), $fn);
}

sub step_valid {
  my $step = shift;
  my $stepdir = get_stepdir($step);
  return 0 if !defined $stepdir;
  if ($debug) {
    print STDERR "Checking validity of $step, CWD: ", cwd(), "\n";
    print STDERR "  stepdir: ", $stepdir, "\n";
    print STDERR "  maindir: ", $maindir, "\n";
  }
  return stepdir_valid($stepdir);
}

sub stepdir_valid {
  # checks if the given directory feels like an eman step
  my $stepdir = shift;
  return -e File::Spec->catfile($stepdir, "eman.seed")
    && -e File::Spec->catfile($stepdir, "eman.vars");
}

sub get_steptype {
  my $step = shift;
  my $oldstep = $step;
  $step =~ s/^(|.*\/)\Q$dirprefix\E([^.]*).*/$2/;
  confess "Failed to get steptype from: $step" if $step eq $oldstep;
  return $step;
}

sub load_status {
  my $step = shift;
  return try_load(absolutize_within_stepdir($step, "eman.status")) || "NONEXISTENT";
}
sub load_tag {
  my $step = shift;
  return try_load(absolutize_within_stepdir($step, "eman.tag"));
}
sub load_tag_hash {
  my $step = shift;
  my $tagstr = load_tag($step);
  return {} if ! defined $tagstr;
  my %out = map { ($_, 1) } grep { /./ && $_ ne " "} split /(\s|\n)+/, $tagstr;
  return \%out;
}

sub compiled_tag_string {
  # used when displaying tags, includes autotags and manual tags
  my $step = shift;
  # my $tags = load_tag_hash($step);
  my $tags = $idx->{"STEP_TO_ALLTAGS"}->{$step};
  return join(" ",
    ( sort {$a cmp $b} keys %$tags ),
    # ( sort {$a cmp $b} keys %$autotags ),
  );
}
  

sub load_depsarr {
  my $step = shift;
  my $depsstr = try_load(absolutize_within_stepdir($step, "eman.deps"));
  my $depsarr;
  if (defined $depsstr) {
    my @deps = split /\n/, $depsstr;
    $depsarr = [];
    my %seen = ();
    foreach my $d (@deps) {
      next if $seen{$d};
      push @$depsarr, $d;
      $seen{$d} = 1;
    }
  }
  return $depsarr;

}
sub load_vars_str {
  my $step = shift;
  return try_load(absolutize_within_stepdir($step, "eman.vars"));
}
sub load_vars_hash {
  # load (and unescape) eman variables
  my $step = shift;
  my $varsstr = load_vars_str($step);
  my %varshash = ();
  if (defined $varsstr) {
    foreach my $pair (split /\n/, $varsstr) {
      next if $pair eq "";
      my ($varname, $val) = split(/=/, $pair, 2);
      $varshash{$varname} = var_bash_unescape($val);
    }
  }
  return \%varshash;
}
sub save_vars_hash {
  # overwrite all saved vars with the given hash
  my $step = shift;
  my $outvars = shift;

  my $vars_str = "";
  foreach my $varname (sort {$a cmp $b} keys %$outvars) {
    $vars_str .= "$varname=".var_bash_escape($outvars->{$varname})."\n";
  }
  #print STDERR "Saving $vars_str\n";
  #print STDERR "Saving into ", absolutize_within_stepdir($step, "eman.vars"), "\n";
  save(absolutize_within_stepdir($step, "eman.vars"), $vars_str);
}


sub load_jobid {
  my $step = shift;
  return try_load(absolutize_within_stepdir($step, "eman.jobid"));
}
sub show_disk_usage {
  my $step = shift;
  my $du = `du -sh $step 2>/dev/null | cut -f1`;
  chomp $du;
  return $du;
}

sub canon_stepdir {
  my $step = shift;
  # interprets uniquely supplied steps
  my $s = $step;
  $s = $1 if $step =~ /^.*\/([^\/]+)\/?/;
  $s = guess_step_from_hashdate($s);
  mydie "Not a valid step: $step" if !defined $s;
  return $s;
}

sub guess_maindir {
  # ensure the variable maindir is set
  return if defined $maindir;
  die "../$seedsdir and ./$seedsdir exist, I'm confused."
    if -e "../$seedsdir" && -e "./$seedsdir";
  # search upwards in the tree
  my $up = "./";
  while ( -d $up && ! -e $up.$seedsdir) {
    $up .= "../";
  }
  die "Failed to guess eman main dir (failed to find '$seedsdir' up in the CWD path.)"
    if ! -e $up.$seedsdir;
  # store the absolute path of the maindir
  $maindir = abs_path($up);  # touch filesystem
}

sub guess_stepname_from_dir {
  my $dir = shift;
  # given a subdir of a stepdir, return the stepdir name (or undef)
  # search upwards in the tree
  # since subdirectories are supported, this is a heuristic based on stepname format
  my $oldwd = cwd();
  chdir $dir or die "Failed to guess stepdir from $dir (not a dir)";
  my $up = "./";
  my $out = undef;
  while ( -d $up && ! -e $up."/".$seedsdir) {
    my $bup = basename(abs_path($up));
    $out = $bup if $bup =~ m/^$dirprefix.*\d{8,8}-\d{4,4}$/;
    $up .= "../";
  }
  if (! -e $up."/".$seedsdir) {
    $out = undef;
  }
  chdir($oldwd) or die "Failed chdir back to $oldwd";
  return $out;
}

sub guess_stepname_from_pathname {
  my $pathname = shift;
  if ( -d $pathname ) {
    return guess_stepname_from_dir($pathname);
  } else {
    return guess_stepname_from_dir(dirname($pathname));
  }
}


sub chdir_to_maindir {
  my $oldwd = cwd();
  guess_maindir();
  mychdir($maindir);
  return $oldwd;
}
sub chdir_to_stepdir {
  my $step = shift;
  my $oldwd = cwd();
  my $path = get_stepdir($step);
  if (-e $path) {
    chdir($path) or die "Failed to chdir to $path";
  } else {
    confess "Stepdir for $step not found.";
  }
  return $oldwd;
}
sub mychdir {
  my $d = shift;
  my $oldwd = cwd();
  chdir($d) or confess "Failed to chdir to $d";
  return $oldwd;
}

sub guess_step {
  my $key = shift;
  my $step = guess_step_from_hashdate($key);
  if (!defined $step) {
    # guess from jobid
    $step = $idx->{"jid$key"};
  }
  if (!defined $step && -e $resultsfile) {
    # guess from results file
    my $resultstext = load($resultsfile);

    my @resultsmatches = grep { /$key/ } split /\n/, $resultstext;
    my $step_to_text;
    foreach my $l (@resultsmatches) {
      my ($step, $rest) = split /\t/, $l, 2;
      if (defined $step_to_text->{$step}) {
        push @{$step_to_text->{$step}}, $rest;
      } else {
        $step_to_text->{$step} = [ $rest ];
      }
    }

    my @steps = keys %$step_to_text;
    if (1<scalar(@steps)) {
      print STDERR "Ambiguous in results file: $key:\n";
      foreach my $s (@steps) {
        print STDERR "$s:\n";
        print STDERR join("", map { "  $_\n" } @{$step_to_text->{$s}});
      }
      exit 1;
    }
    $step = $steps[0]; # pick the first and only
  }
  if (!defined $step) {
    # guess from dir listing
    my @dirs;
    for my $subdir (@subdirs) {
      push @dirs, grep { /$key/ } glob("$subdir/$dirprefix*.*.[0-9]*");
    }
    # we do not use the preloaded index, because it contains only valid exps.
    if (1<scalar(@dirs)) {
      print STDERR "Ambiguous in dir listing: $key:\n";
      print STDERR join("", map { "  $_\n" } @dirs);
      exit 1;
    }
    $step = guess_step_from_hashdate($dirs[0]) if 1==scalar @dirs;
  }
  die "Failed to guess step from: $key\nTry --reindex." if !defined $step;
  return $step;
}


sub guess_step_from_hashdate {
  # this is messy :-(
  my $key = shift;
  print STDERR "Guessing step from hash and date: $key\n" if $debug;
  for my $subdir ('.', @subdirs) {
    if (-d "$subdir/$key") {
      # directory name explicitly given, check if it is indeed a step directory
      # this branch is also used for '.', i.e. the current step dir...
      my $step = guess_stepname_from_dir("$subdir/$key");
      return $step if -e "$subdir/$key/eman.seed";
    }
  }
  # try to interpret the stepname relative to main dir
  my $dkey = absolutize_within_maindir($key);
  if (-d $dkey) {
    my $step = basename(File::Spec->rel2abs($dkey));
    return $step if -e $dkey."/eman.seed";
  }
  # scan index if there is such a step
  my %stepnames = map { ($_,1) }
                  map { s/(\Q$dirprefix\E[^\.]+\.).*/$1/; $_; }
                  grep { /^\Q$dirprefix/ } # this is a forward index
                  keys %$idx;
  foreach my $pref (keys %stepnames) {
    if (-d $pref.$key) {
      return $pref.$key;
    }
  }
  return undef; #couldn't confirm
}

sub add_hash_to_index {
  my $stepname = shift;
  my $hash = shift;
  print STDERR "ADDED: $stepname  -> $hash\n" if $debug;
  $idx->{$stepname} = $hash;
  # multiple steps can have the same hash, so the hash is mapped to a list
  if (defined $idx->{$hash} && ! grep { $_ eq $stepname } @{$idx->{$hash}}) {
    push @{$idx->{$hash}}, $stepname;
  } else {
    $idx->{$hash} = [$stepname];
  }
}
sub remove_step_from_index {
  # this is used only in init() when we realize the step was already available
  # so we assume there is no jid entry for the step
  my $stepname = shift;
  my $hash = $idx->{$stepname};
  delete $idx->{$stepname};
  delete $idx->{$stepname."path"};
  my @removed = grep { $_ ne $stepname } @{$idx->{$hash}};
  $idx->{$hash} = [ @removed ];
}


sub add_fake_step_to_index {
  # used in dry runs
  my $stepname = shift;
  my $vars = shift;
  my $hash = get_hash_from_vars_deps($stepname, $vars, undef);
  add_hash_to_index($stepname, $hash);
}

sub add_stepdir_to_index {
  my $s = shift;
  my $stepname = basename($s);
  my $hash = get_hash_from_dir($s);
  add_hash_to_index($stepname, $hash);
  my $jid = load_jobid($stepname);
  # also store jobid, if available
  if (defined $jid) {
    $idx->{$stepname} = $hash;
    $idx->{"jid$jid"} = $stepname;
    $idx->{$stepname."jid"} = $jid;
  }
  # store the path to step
  $idx->{$stepname."path"} = $s;
}
sub loadidx {
  # load the index file and hash it there and back
  my $idx;
  if (-e $indexfile) {
    $idx = Load(load($indexfile)."\n"); # YAML to Load the string
  }
  return $idx;
}
sub saveidx {
  my $idx = shift;
  my ($h, $tempname) = tempfile("eman.index.tmpXXXXXX", DIR=>$maindir);
  print STDERR "Saving index to $tempname\n" if $debug;
  binmode($h, ":utf8");
  # my $h = my_save($indexfile);
  print $h YAML::Dump($idx);
  close $h;
  print STDERR "Moving index from $tempname to $indexfile\n" if $debug;
  rename($tempname, $indexfile)
    or print STDERR "Failed to move $tempname to $indexfile";
  chmod 0644, $indexfile;
}

sub get_hash_from_dir {
  my $step = shift;

  my @vars = split /\n/, load($step."/eman.vars");
  #my @deps = split /\n/, load($step."/eman.deps");
  return get_hash_from_vars_deps($step, \@vars, undef);
}
sub get_hash_from_vars_deps {
  my $name = shift;
  my $vars = shift;
  my $deps = shift;
    # deps are totally ignored, we assume they are implied by vars
  # avoid considering the name of ourselves significant in content check
  my @usevars = @$vars;
  @usevars =
    grep { ! /^[^=]+=''$/ } grep { ! /^[^=]+=""$/ } # skip empty-valued vars
    grep { /^[^=]+=./ }  # skip empty-valued vars
    grep { /./ } # skip empty lines
    map  {s/$name/---SELF---/g; $_}
    @usevars;
  # include steptype in the hash to distinguist vars-less steps
  my $steptype = get_steptype($name);
  my $hash =  md5_hex($steptype, sort @usevars);
  print STDERR "STEPTYPE $steptype, USEVARS: @usevars\n  -> $hash\n" if 1 && $debug;
  return $hash;
}

sub all_steps {
  # returns an array of all steps mentioned anywhere
  my %steps_to_list = ();
  foreach my $s (keys %$idx) {
    next if $s !~ /^\Q$dirprefix/; # this is a reverse index
    next if $s =~ /(jid|path)$/; # this is a job id entry
    $steps_to_list{$s} = 1;
  }
  if (defined $idx->{'USED_BY'}) {
    # eagerly collect also all steps mentioned in deps
    foreach my $d (keys %{$idx->{'USED_BY'}}) {
      $steps_to_list{$d} = 1;
      my $sources = $idx->{'USED_BY'}->{$d};
      next if !defined $sources;
      foreach my $s (keys %$sources) {
        $steps_to_list{$s} = 1;
      }
    }
  }
  return keys %steps_to_list;
}

# compare steps by timestamp
sub compare_steps {
  my ( $first, $second ) = @_;
  $first =~ s/.*\.([^\/]*)\/*/$1/;
  $second =~ s/.*\.([^\/]*)\/*/$1/;
  my ( $first_date, $first_time ) = split '-', $first;
  my ( $second_date, $second_time ) = split '-', $second;
  if ($second_date != $first_date) {
    return $second_date <=> $first_date;
  } else {
    return $second_time <=> $first_time;
  }
}

# routines for autotags

# One line of the config file is called a 'rule' and it can create one autotag.
# The autotag is constructed using of sequence of regexes, each applied on the
# output of the previous one, starting with the vars string.

sub load_autotag_rules {
# autotag_rules->{steptype} = [ [list of regexes producing one tag],
#   [list of regexes producing another tag] ]
  my $inf = shift;
  my $h = my_open($inf);
  my $out;
  my $nr = 0;
  while(<$h>) {
    $nr++;
    chomp;
    next if /^\s*#/ || /^\s*$/;
    my @cols = split / *\t */;
    my $steptype = shift @cols;
    my $source = shift @cols;
    if ($source ne "var") {
      print STDERR $inf, ":", $nr, ": Bad source '$source'.\n";
      $waserror++;
    }
    $out->{$steptype}->{$source} = [] if !defined $out->{$steptype}->{$source};
    push @{$out->{$steptype}->{$source}}, [ @cols ];
    print STDERR "Autotag rules based on $source of $steptype: $_\n" if $debug;
  }
  close $h;
  return $out;
}

sub reindex_tags {
  # for all steps, removes all autotags and recreates them

  $idx->{'STEP_TO_DIRECT_AUTOTAGS'} = undef; # delete old
  $idx->{'STEP_TO_ALLTAGS'} = undef; # delete old
  # first add 'direct' tags, i.e. manual tags and autotags implied by the rules
  # to individual steps
  foreach my $step (all_steps()) {
    # first copy step manual tags to the index
    $idx->{'STEP_TO_ALLTAGS'}->{$step} = load_tag_hash($step);
    # then add the direct autotags
    my $steptype = get_steptype($step);
    next if ! defined $autotag_rules->{$steptype};
    my $varsstr = load_vars_str($step);
    next if ! defined $varsstr;
    if (defined $autotag_rules->{$steptype}->{"var"}) {
      # there are some tags to be created from individual variables
      foreach my $rule (@{$autotag_rules->{$steptype}->{"var"}}) {
        foreach my $varline (split /\n/, $varsstr) {
          next if $varline eq "";
          my $tag = $varline;
	  my $first_regex = 1;
          foreach my $regex (@{$rule}) {
            print STDERR "Eval:  \$tag =~ s$regex;\n" if $debug;
	    if ($first_regex) {
	      # the first regex is also a selector, if it does not find
	      # anything, skip the whole line
              eval "\$tag =~ s$regex  or \$tag = '';";
	      $first_regex = 0;
	    } else {
	      # all right to leave the tag unchanged
              eval "\$tag =~ s$regex;";
	    }
          }
          next if $tag eq ""; # blank tag is removed
          $idx->{'STEP_TO_DIRECT_AUTOTAGS'}->{$step}->{$tag} ++;
          $idx->{'STEP_TO_ALLTAGS'}->{$step}->{$tag} ++;
        }
      }
    }
    # if (defined $autotag_rules->{$steptype}->{"inhertags"}) {
    # this is another option: constructing tags from inherited autotags
    # however, this needs to be applied only after inheriting...
  }
  # Add indirect tags, i.e. tags inherited from steps above
  my $indexed;
  foreach my $step (all_steps()) {
    next if $indexed->{$step};
    $indexed = add_inherited_tags($indexed, $step);
  }
}

sub add_inherited_tags {
  my $indexed = shift;
  my $step = shift;
  my $deps = load_depsarr($step);
  $deps = [] if !defined $deps;
  print STDERR "$step: @$deps\n" if $debug;
  foreach my $dep (@$deps) {
    print STDERR "for $step: $dep: ", compiled_tag_string($dep), "\n" if $debug;
    # ensure all predecessors inherited theirtags
    $indexed = add_inherited_tags($indexed, $dep)
      if ! $indexed->{$dep};
    # inherit our tags from the dep
    # TODO here is the place to control what is being inherited
    # based on a not-yet-specified types of rules in eman.autotag
    foreach my $tag (keys %{$idx->{'STEP_TO_ALLTAGS'}->{$dep}}) {
      print STDERR "  + $tag\n" if $debug;
      $idx->{'STEP_TO_ALLTAGS'}->{$step}->{$tag}
        += $idx->{'STEP_TO_ALLTAGS'}->{$dep}->{$tag};
    }
  }
  $indexed->{$step} = 1;
  return $indexed;
}
# end of routines for autotags



# routines for tablemaker
package Summarizer;
sub interpret {
  my $self = shift; # supply attributes
  my $lines = shift;

  for my $f (qw/required forbidden rows cols rowsort colsort print_max_marks/) {
    # define as blank and trim
    $self->{$f} = "" if !defined $self->{$f};
    $self->{$f} =~ s/^[ \n\t]*|[ \n\t]*$//g;
  }

  $self->{reqtoksf} = [ grep { /./ } split /[ \n\t]+/, $self->{required} ];
  $self->{forbtoksf} = [ grep { /./ } split /[ \n\t]+/, $self->{forbidden} ];
  $self->{rowtoksf} = [ grep { /./ } split /[ \n\t]+/, $self->{rows} ];
  $self->{coltoksf} = [ grep { /./ } split /[ \n\t]+/, $self->{cols} ];

  $self->{blankvalue} ||= "-";
  $self->{verbose} ||= 0;

  bless $self;
  my $table = $self->scan($lines);
  return $table;
}

sub collect_tokens {
  # given a regular expression, collect all occurrences of it
  # special flags can be given using a few letters followed by ^ (not part of
  # the regexp), e.g. u^mytoken to set 'uniq' flag
  # Flags:
  #   u ... uniq, ignore repetitive occurrences of the token
  #   c ... uniq -c, count repetitive occurrences of the token
  #   i ... insensitive, ignore case # not yet implemented
  #   f ... first occurrence only, don't collect all
  my $self = shift;
  my $origtokenre = shift;
  my $line = shift;
  my @out = ();

  # remove flags from origtokenre
  $origtokenre =~ s/^([uicf])\^//;
  my $flags = $1;
  $flags = "" if ! defined $flags;

  $origtokenre =~ s/^(\^)//;
  my $match_token_start_re = (defined $1 && $1 eq "^" ? "\\s" : "");

  print STDERR "Searching for $origtokenre in $line.\n" if $debug;
  while ($line =~ /$match_token_start_re$origtokenre/) {
    my @matches = map {substr $line, $-[$_], $+[$_] - $-[$_]} (1..$#-);
    # delete this token occurrence
    my $oldline = $line;
    substr($line, $-[0], $+[0] - $-[0], "");
    die "Avoiding loop with re $origtokenre and line: $line" if $line eq $oldline;
    my $tokenre = $origtokenre;
    if ($tokenre =~ /\(/) {
      print STDERR "Token $tokenre MATCHES: @matches\n" if $debug;
      foreach my $m (@matches) {
        $tokenre =~ s/\([^\(\)]+\)/$m/;
      }
    }
    push @out, (defined $self->{tokenmap}->{$tokenre} ? $self->{tokenmap}->{$tokenre} : $tokenre);
  }

  if ($flags =~ /f/) {  # first occurrence only
    return () if 0 == scalar @out;
    return $out[0];
  } elsif ($flags =~ /u/) {  # uniq the occurrences
    return () if 0 == scalar @out;
    my %uniq = map { ($_, 1) } @out;
    return sort {$a cmp $b} keys %uniq;
  } elsif ($flags =~ /c/) {  # count the number of occurrences
    return () if 0 == scalar @out;
    return ( scalar(@out)."*".$out[0] );
  } else {
    return @out;
  }
}

sub scan {
  my $self = shift;
  my $lines = shift;

  my $out = "";

  $out .= "Common properties: ".join(" ", @{$self->{reqtoksf}})."\n";
  $out .= "Forbidden properties: ".join(" ", @{$self->{forbtoksf}})."\n";

  my $col_to_pick = $self->{data_column};

  my %coldef; my %rowdef;
  my @coldef; my @rowdef;
  my %table;
  my %tableinfo;
  my %used = ();
  LINE: foreach my $line (@$lines) {
    foreach my $r (@{$self->{reqtoksf}}) {
      if ($line !~ /$r/) {
        $out .= "Removing due to missing $r: ".$line."\n"
          if $self->{verbose} >= 3;
        next LINE;
      }
    }
    foreach my $f (@{$self->{forbtoksf}}) {
      if ($line =~ /$f/) {
        $out .= "Removing due to forbidden $f: ".$line."\n"
          if $self->{verbose} >= 3;
        next LINE;
      }
    }
    $out .= "Picking rowids and colids from: ".$line."\n"
      if $self->{verbose} >= 4;
    my @rowid = ();
    foreach my $temprt (@{$self->{rowtoksf}}) {
      my $rt = $temprt;
      push @rowid, ($self->collect_tokens($rt, $line));
    }
    my @colid = ();
    foreach my $ct (@{$self->{coltoksf}}) {
      push @colid, ($self->collect_tokens($ct, $line));
    }
    
    my $rowid = "@rowid";
    my $colid = "@colid";
    $out .= "  got: $rowid   and   $colid\n"
      if $self->{verbose} >= 4;
    if (!defined $rowdef{$rowid}) {
      push @rowdef, $rowid;
      $rowdef{$rowid} = 1;
    }
    if (!defined $coldef{$colid}) {
      push @coldef, $colid;
      $coldef{$colid} = 1;
    }
    my $pos = "$rowid\t$colid";
    my $value = main::field($line, $col_to_pick);
    my $thisinfo = $line;
    if (defined $table{$pos} 
        && ($table{$pos} ne $value || $self->{verbose} >= 2)) {
      $out .= "Replaced: ".$tableinfo{$pos}."\n";
      $out .= "    With: ".$thisinfo."\n";
      delete $used{"@rowid\t@colid\t$tableinfo{$pos}"};
    }
    if (defined $self->{collectdelim}) {
      $table{$pos} .= $self->{collectdelim} if defined $table{$pos};
      $table{$pos} .= $value;
    } else {
      $table{$pos} = $value;
      # $out.="REGISTERING: $pos  ==> $value\n";
    }
    $tableinfo{$pos} = $thisinfo;
    $used{"@rowid\t@colid\t$line"} = 1;
  }
  $out .= "\n".join("", map {"Using: ".$_."\n"} sort keys %used)
    if ($self->{verbose} || defined $rowdef{""} || defined $coldef{""})
      && ($self->{verbose} >= 1);
  $out .= "\n";
  my @sortedrowdef;
  if (defined $self->{rowsort}) {
    @sortedrowdef = sort { # $out.="SORT\na: $a\t$self->{rowsort}\n";
          ( take_just_number($table{"$b\t$self->{rowsort}"}) || 0 )
      <=> ( take_just_number($table{"$a\t$self->{rowsort}"}) || 0 ) } @rowdef;
  } else {
    @sortedrowdef = @rowdef;
  }
  my @sortedcoldef;
  if (defined $self->{colsort}) {
    @sortedcoldef = sort { # $out.="SORT\na: $a\t$self->{colsort}\n";
          ( take_just_number($table{"$self->{colsort}\t$b"}) || 0 )
      <=> ( take_just_number($table{"$self->{colsort}\t$a"}) || 0 ) } @coldef;
  } else {
    @sortedcoldef = @coldef;
  }
  # Prepare the table
  my @tab;
  my @mark;
  my $firstcolwidth = 0;
  my @colwidth = map {length($_)} @coldef;
  for(my $r=0; $r<=$#sortedrowdef; $r++) {
    my $row = $sortedrowdef[$r];
    $firstcolwidth = length($row) if length($row) > $firstcolwidth;
    my $val_to_colidx = undef;
    for(my $c=0; $c<=$#sortedcoldef; $c++) {
      my $col = $sortedcoldef[$c];
      my $pos = "$row\t$col";
      my $thisval = defined $table{$pos} ? $table{$pos} : $self->{"blankvalue"};
      $tab[$r][$c] = $thisval;
      push @{$val_to_colidx->{$thisval}}, $c;
      $colwidth[$c] = length($thisval) if length($thisval) > $colwidth[$c];
    }
    my @sortedvals = sort {take_just_number($b)<=>take_just_number($a)}
                     keys %$val_to_colidx;
    foreach my $c (@{$val_to_colidx->{$sortedvals[0]}}) {
      $mark[$r][$c] = "^"; # mark this node as horizontal maximum
    }
  }
  for(my $c=0; $c<=$#sortedcoldef; $c++) {
    my $val_to_rowidx = undef;
    for(my $r=0; $r<=$#sortedrowdef; $r++) {
      push @{$val_to_rowidx->{$tab[$r][$c]}}, $r;
    }
    my @sortedvals = sort {take_just_number($b)<=>take_just_number($a)}
                       keys %$val_to_rowidx;
    foreach my $r (@{$val_to_rowidx->{$sortedvals[0]}}) {
      $mark[$r][$c] = defined$mark[$r][$c]?"*":">";
        # mark this node as ultimate or vertical maximum
    }
  }

  # Print column headers
  $out .= " " x $firstcolwidth; # pad the first column of the first row
  for(my $c=0; $c<=$#sortedcoldef; $c++) {
    my $col = $sortedcoldef[$c];
    my $pad = " " x ($colwidth[$c] - length($col));
    $out .= "\t$col$pad";
    $out .= " " if $self->{print_max_marks};
  }
  $out .= "\n";

  # Print the table
  for(my $r=0; $r<=$#sortedrowdef; $r++) {
    my $row = $sortedrowdef[$r];
    my $pad = " " x ($firstcolwidth - length($row));
    $out .= "$row$pad";
    for(my $c=0; $c<=$#sortedcoldef; $c++) {
      my $thisval = $tab[$r][$c];
      my $pad = " " x ($colwidth[$c] - length($thisval));
      $out .= "\t$pad$thisval";
      if ($self->{print_max_marks}) {
        $out .= defined $mark[$r][$c] ? $mark[$r][$c] : " ";
      }
    }
    $out .= "\n";
  }
  $out .= "\n";
  return $out;
}
sub take_just_number {
  my $s = shift;
  return if !defined $s;
  my $outs = $s;
  $outs =~ s/[^-.0-9].*//;
  return 0 if $outs eq "-";
  return $outs if $outs ne "";
  return $s;
}
package main;


sub tabulate {
  # convert eman.tabulate into eman.niceresults
  my @results = grep { /./ } split /\n/, load("eman.results");
  my $inf = "eman.tabulate";
  my $h = my_open($inf);
  my $outh = my_save("eman.niceresults");
  my $nr = 0;
  my $waserror = 0;
  while (<$h>) {
    $nr++;
    if (/^TABLE$/) {
      my $startnr = $nr;
      my $gotend = 0;
      my $specs = {};
      while (<$h>) {
        $nr++;
        next if /^\s*#/ || /^\s*$/; # skip comments and blank lines
        chomp;
        if (/^ENDTABLE$/) {
          $gotend = 1;
          last;
        }
        if (/^TABLE/) {
          print STDERR "$inf:$nr: Warning TABLE within TABLE starting at $startnr\n";
          $waserror ++;
          next;
        }
        if (/^(forbidden|required|cols|rows|rowsort|colsort|verbose|print_max_marks):(.*)$/) {
          my $k = $1;
          my $v = $2;
          $specs->{$k} .= "\n" if defined $specs->{$k};
          $specs->{$k} .= $v;
        } else {
          print STDERR "$inf:$nr:Unrecognized line: $_\n";
          $waserror ++;
        }
      }
      die "$inf:$nr: End of file in TABLE starting at $startnr" if ! $gotend;
      $specs->{"data_column"} = 3;
      foreach my $attr (qw(rows cols)) {
        if (!defined $specs->{$attr}) {
          print STDERR "$inf:$nr:Required attribute $attr missing.\n";
          $waserror ++;
        }
      }
      print $outh Summarizer::interpret($specs, \@results);
    } else {
      print $outh $_;
    }
  }
  close $h;
  close $outh;
  return ! $waserror;
}
# end of routines for tablemaker


sub select_steps {
  my @args = @_;
  my @steps = sort { compare_steps($a, $b) } grep { $_ !~ m/(jid|path)/ } all_steps();
  my $error = 0; # select without arguments lists all steps
  while (@args) {
    my $cmd = shift @args;
    given ($cmd) {
      when ("d") { @steps = grep { load_status($_) eq 'DONE' } @steps; }
      when ("f") { @steps = grep { load_status($_) eq 'FAILED' } @steps; }
      when ("l") {
        my $n = shift @args;
        if (! $n) {
          $error = 1;
          last;
        }
        @steps  = @steps[0 .. min($n - 1, $#steps)];
      }
      when ("lh") { @steps = @steps[0 .. min(9, $#steps)]; }
      when ("s") {
        my $status = shift @args;
        if (! $status) {
          $error = 1;
          last;
        }
        @steps = grep { load_status($_) eq $status } @steps;
      }
      when ("t") {
        my $type = shift @args;
        if (! $type) {
          $error = 1;
          last;
        }
        @steps = grep { get_steptype($_) eq $type } @steps;
      }
      when ("v") {
        my $varexpr = shift @args;
        if (! $varexpr) {
          $error = 1;
          last;
        }
        my @new_steps;
        for my $step (@steps) {
          my $varsstr = load_vars_str($step);
          next if ! $varsstr;
          my @vars = split /\n/, $varsstr;
          push @new_steps, $step if grep { $_ eq $varexpr } @vars;
        }
        @steps = @new_steps;
      }
      when ("vre") {
        my $varexpr = shift @args;
        if (! $varexpr) {
          $error = 1;
          last;
        }
        my @new_steps;
        for my $step (@steps) {
          my $varsstr = load_vars_str($step);
          next if ! $varsstr;
          my @vars = split /\n/, $varsstr;
          push @new_steps, $step if grep { $_ =~ $varexpr } @vars;
        }
        @steps = @new_steps;
      }
      default { $error = 1; }
    }
  }

  if ($error) {
    mydie "usage: eman select <command> [arg] [<command> [arg][...]]";
  } else {
    if ($steps[0]) {
      return list([@steps]);
    } else {
      return 1;
    }
  }
}

sub add_dir {
  my $dir = shift;
  mydie "No directory given." if ! $dir;
  if (-e $dir) {
    mydie "$dir is not a directory" if ! -d $dir;
  } else {
    mkpath($dir);
    mydie "Failed to create directory: $dir" if ! -d $dir;
  }
  my @current = split /\n/, try_load($subdirs_file);
  $dir = abs_path($dir);
  return if grep { $_ eq $dir } @current; # do not add dirs multiple times
  open(my $subdirs_hdl, ">>$subdirs_file") or mydie "Cannot open $subdirs_file";
  print $subdirs_hdl $dir, "\n";
  close $subdirs_hdl;
}

sub add_remote_playground {
  my $dir = shift;
  my $alias = shift;
  mydie "Usage: eman addremote DIR ALIAS" if ! $dir || ! $alias;
  mydie "$dir is not a directory" if ! -d $dir;
  mydie "$dir is not an eman playground" if ! -d "$dir/$seedsdir";
  mydie "$alias already exists" if -e $alias;
  symlink abs_path($dir), $alias;
  open(my $subdirs_hdl, ">>$subdirs_file") or mydie "Cannot open $subdirs_file";
  print $subdirs_hdl abs_path($alias), "\n";
  close $subdirs_hdl;
}

sub try_load {
  my $f = shift;
  my $h = try_open($f);
  return undef if !defined $h;
  my $o = "";
  $o .= $_ while (<$h>);
  close $h;
  chomp $o;
  return $o;
}
sub load {
  my $f = shift;
  my $h = my_open($f);
  my $o = "";
  $o .= $_ while (<$h>);
  close $h if $f ne "-";
  chomp $o;
  return $o;
}
sub save {
  my $f = shift;
  my $data = shift;
  my $h = my_save($f);
  print $h $data;
  print $h "\n" if $data ne "" && $data !~ /\n$/m;
  close $h;
}

sub try_open {
  my $f = shift;
  if ($f eq "-") {
    binmode(STDIN, ":utf8");
    return *STDIN;
  }

  return undef if ! -e $f;

  my $opn;
  my $hdl;
  my $ft = `file $f`;
  # file might not recognize some files!
  if ($f =~ /\.gz$/ || $ft =~ /gzip compressed data/) {
    $opn = "zcat $f |";
  } elsif ($f =~ /\.bz2$/ || $ft =~ /bzip2 compressed data/) {
    $opn = "bzcat $f |";
  } else {
    $opn = "$f";
  }
  open $hdl, $opn or return undef;
  binmode $hdl, ":utf8";
  return $hdl;
}
sub my_open {
  my $f = shift;
  if ($f eq "-") {
    binmode(STDIN, ":utf8");
    return *STDIN;
  }

  confess "Not found: $f" if ! -e $f;

  my $opn;
  my $hdl;
  my $ft = `file $f`;
  # file might not recognize some files!
  if ($f =~ /\.gz$/ || $ft =~ /gzip compressed data/) {
    $opn = "zcat $f |";
  } elsif ($f =~ /\.bz2$/ || $ft =~ /bzip2 compressed data/) {
    $opn = "bzcat $f |";
  } else {
    $opn = "$f";
  }
  open $hdl, $opn or confess "Can't open '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}

sub my_save {
  my $f = shift;

  my $opn;
  my $hdl;
  # file might not recognize some files!
  if ($f =~ /\.gz$/) {
    $opn = "| gzip -c > $f";
  } elsif ($f =~ /\.bz2$/) {
    $opn = "| bzip2 > $f";
  } else {
    $opn = "> $f";
  }
  mkpath( dirname($f) );
  open $hdl, $opn or confess "Can't write to '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}


sub safesystem {
  print STDERR "Executing: @_\n";
  return quietsystem(@_);
}
sub quietsystem {
  system(@_);
  if ($? == -1) {
      print STDERR "Failed to execute: @_\n  $!\n";
      exit(1);
  }
  elsif ($? & 127) {
      printf STDERR "Execution of: @_\n  died with signal %d, %s coredump\n",
          ($? & 127),  ($? & 128) ? 'with' : 'without';
      exit(1);
  }
  else {
    my $exitcode = $? >> 8;
    print STDERR "Exit code: $exitcode\n" if $exitcode;
    return ! $exitcode;
  }
}

sub field {
  my $l = shift;
  my $i = shift;
  chomp $l;
  my @f = split /\t/, $l;
  return $f[$i];
}

sub var_bash_escape {
  my $s = shift;
  return $s if $s =~ /^[-[:alnum:]:._+,]*$/;
  $s =~ s/\\/\\\\/g;
  $s =~ s/"/\\"/g;
  return '"'.$s.'"';
}

sub var_bash_unescape {
  # the reverse of *our* escaping, not all possible escaping
  my $s = shift;
  return $s if $s !~ /^"/;
  $s =~ s/^"//;
  $s =~ s/"$//;
  $s =~ s/\\(["\\])/$1/g;
  return $s;
}


__END__

=head1 eman

eman, experiment manager

=head1 SYNOPSIS

  VAR=val eman init STEPTYPE # create new step of the given type
  VAR=val eman clone SPEC    # create new step based on STEPDIR

  eman clone < traceback     # create step by cloning incl. predecessors
  eman redo SPEC             # equals 'eman tb --vars SPEC | eman clone'
                             # good predecessors are reused by default
    --reuse=SPEC             #   reuse the given step (incl. predecs.)
    --avoid=SPEC             #   don't reuse the given step in the clone
    --all-avoid              #   avoid all input steps
    --start                  # after init/clone/redo, submit to queue

  eman prepare SPEC          # prepare inited step
  eman run SPEC              # run prepared step
  eman continue SPEC         # continue a single step that failed
  eman start SPEC            # prepare and run, incl. all predecessors

  eman guess SPEC            # guess a *single* step based on the jobid
                             # or a substring of the hash, the tag, the
                             # date or final score

  eman list STEPTYPE ...     # list all steps of the given type
  eman status SPEC/STEPTYPE  # like 'list --status', abbr. 'stat'
  eman vars SPEC/STEPTYPE    # like 'list --vars'
  eman tag SPEC/STEPTYPE     # like 'list --tag'
  eman users SPEC ...        # list all steps that use the given step
  eman traceback SPEC ...    # show tree of the steps and predecessors
    -s /foo/bar/             #   and modify vars; can be repeated
                             #   implies --vars
                             #   highlights diff if to terminal
 #eman traceforward SPEC ... # show tree of the steps and successors
  eman duplicates            # show groups of 2+ steps having same vars
    --tag --vars --status    #   include relevant information
    --log --jobid            #   and the tail of the log or SGE job ID

  eman abolish SPEC ...      # destroy all step files except
                             #   metadata => can still be cloned
  eman collect               # collect results of all experiments
  eman reindex               # re-create index of steps

  eman wait SPEC ...         # block until the jobs are FAILED or DONE
                             # die if FAILED nor DONE is reachable

  eman select QUERY          # output steps matching the QUERY;
                             #   query syntax is documented below

  eman addremote DIR ALIAS   # add a remote eman playground as ALIAS
                             # you can use remote steps, clone them etc.
  eman adddir DIR            # add a subdirectory for steps

SPEC is a text snippet capable of identifying a step uniquely.
You can even use '.' and '`pwd`' as SPEC.
Commands marked with '#' are not yet implemented.

=head1 DESCRIPTION

Eman is an experiment manager, useful mainly for deriving steps and
step chains, i.e. complex experiment scenarios.

In the following:

 a step        ... is a single unit of work
 an experiment ... is a directed acyclic graph (DAG) of depending steps.
                   an experiment can be also called a workflow.
                   eman currently displays DAGs as trees, repeating
                   shared steps
 a step seed   ... is a recipe to build individual steps

=head2 Why Should You Use eman?

Eman is designed to speed up your 'experimental loop' and broaden the range of
explored experiment configurations while maintaining the reproducibility of all
the various experiment runs. The specific subject of your experiments is not
important for eman---all commands to run etc. are encoded in your custom
'seeds'.



=head2 Structure of a Step Directory

Each step is represented as a single directory s.STEPTYPE.HASH.TIMESTAMP.
Apart from any files needed or produced by the step, the following files are
always present in the step directory:

 *eman.tag           ... one-line "readable" summary of vars
                         Often manually edited to contain special flags.
 #eman.vars          ... the variables configuring the step
 *eman.deps          ... list of prerequisites of this step
 *eman.status        ... the status of the step
  eman.jobid         ... the jobid of the most recent (re)run
  eman.seed          ... the script used to init and prepare the step
 #eman.command       ... the script used to run the step
  eman.derived_from  ... the name of the step used when deriving
  eman.init_env      ... all environment variables at init time

Files marked with '#' have to be provided by your 'seed' scripts. Files marked
with '*' can be provided by your 'seed' scripts. Other files are created by
eman.

=head2 Special Files in Directory of Steps

In the directory containing all your steps, eman uses the following files:

 #eman.seeds         ... the directory of all step seeds
  eman.index         ... index of steps for quick check for identities
 #eman.results.conf  ... name wildcard pattern and regex to extract result
  eman.results       ... collected results from all steps

Again, you are responsible for providing the items marked '#'.

=head2 Life Cycle of Individual Steps

Each (successful) step goes through these core phases:

  init    ... become part of structure of experiments, depend on other
              steps and allow other steps depend on me
  prepare ... quickly check that all input files exist
  run     ... long computation, submitted to cluster

Other than that, steps are considered immutable. You can modify
existing steps as you like (changing status, variables, contents) but
you are sacrificing the reproducibility of your experiments. Our best
practice involves a lot of hacking of existing steps in early stages of
implementation interleaved with frequent cloning and reruning of the
experiments from scratch. Later, once all new tweaks are exposed as
variables of the respective steps, we absolutely avoid modifying
existing steps and use cloning only.

The progress of a step is achieved by eman following this procedure:

1. The commands 'eman init STEPTYPE' and 'eman clone s.STEPTYPE....'
create a timestamped step directory, e.g. s.test.hash1234.20101115-1213.

2. The file eman.seeds/STEPTYPE is copied there as eman.seed.

3. The seed is run and expected to 'init' (i.e. produce the file
eman.vars and optionally eman.deps). The seed may also produce
eman.status with the content 'DONE' or 'PREPARED' to skip some of the
following phases (XXX unimplemented). By default, the status becomes
'INITED'.

4. The seed is run and expected to 'prepare' (i.e. produce the file
eman.command). The status becomes 'PREPARED'.

5. eman.command is run and expected to write 'DONE' or 'FAILED' to
eman.status.

The following statuses are recognized:
  NONEXISTENT        ... not created yet / irreversibly deleted
  INITED             ... the step was just created
  INITFAILED         ... the initialization failed
  PREPARED           ... prepared using 'eman prepare'
  PREPFAILED         ... 'eman prepare' failed
  WAITING: ...       ... submitted by 'eman start', prereqs still run
                         (not used; waiting jobs are marked 'running')
  STARTING           ... just before 'running'
  RUNNING            ... running
  FAILED             ... the run failed
  DONE               ... the run succeeded
  ABOLISHED          ... has just vars, deps but no more content
  OUTDATED           ... you can manually set this to prevent reuse

=head1 STEP AND EXPERIMENT CLONING

The support for cloning steps and whole experiments (sequences of steps)
is a key feature of eman. Cloning could be also called 'deriving',
because we allow the clone to bear different variable values.

Cloning a step (the command 'eman clone SPEC') means creating a
completely new step and providing it with variables from the source
step and possibly adding or modifying some.

Cloning a sequence of steps (the commands 'eman clone < traceback' and
'eman redo') is slightly trickier: imagine we change a variable in an
early step in the sequence. All the following steps in the experiment
then have to be instructed to use this modified step. Eman achieves this
by explicitly replacing the original step name with the name of the new
step in variables of subsequent steps. The immutability of steps
naturally requires to clone the subsequent steps as well.

=head1 USAGE PATTERNS

eman traceback SPEC -s '/.../.../'
  # preview the experiment with some vars replaced
  # append "--colorize | less" to preview

eman traceback SPEC -s '/.../.../' | eman clone
  # clone the whole subtree of steps replacing some vars

VAR=x eman redo SPEC
  # clone the top step (and unusable predecessors) replacing VAR
  # with some new value x

eman abolish `eman list STEPTYPE --status | grep FAILED | cut -f1`
  # clean up, i.e. remove all content files of all failing steps

eman stat `qstat | cut -c 1-8 | skip 2`
  # show status of all running/held jobs in SGE
  # WARNING: This only works if there are no non-eman cluster jobs.
  # Otherwise, eman will just say "Failed to guess step from: $job_id".
  # the skip command is available here:
  #   http://www.cuni.cz/~obo/textutils/#skip

=head2 Eman `select' query syntax

You can use the following filters in eman select:

  t <type>         ... only steps of type <type>
  l <count>        ... latest <count> steps
  lh               ... latest 10 steps
  d                ... only DONE steps
  f                ... only FAILED steps
  s <status>       ... only steps with status <status>
  v <VAR>=<value>  ... only steps with variable <VAR> that
                       has value <value>
  vre <regex>      ... only steps where the variable file matches <regex>

The result (and speed) depends on the order of fitlers, e.g.:

eman select t mert l 10 # output last 10 merts
eman select l 10 t mert # output merts that were among 10 latest steps

=head2 If a Cluster Node Completely Dies

A cluster node completely dies when (your) job takes too much RAM. Assuming
2472256 is the SGE job ID of the failed (but still allegedly running) job, this
is probably what you want to do:

  qdel 2472256                         # remove it from the cluster
  eman fail 2472256                    # mark it FAILED for eman
  eman redo 2472256 --start --mem 20g  # re-run it with some more memory

=head1 COMMON PROBLEMS

=head2 Outdated Index File

If you run e.g. 'eman users ...', get a step directory, but subsequent eman
commands fail to find it ("Failed to guess step from:..."), try running:

  eman reindex

The step may indeed be a zombie, a removed directory.

=head2 Multiple Step Instances, Some Failed, Some OK

By cloning, you can easily end up with several instances of the same step (i.e.
two distinct step directories with identical variables). Sometimes, some of the instances may be even failed and some may be finished successfully.

When such a step is
further used in an experiment, and you clone the experiment, eman will
automatically use the oldest plausible instance (FAILED, OUTDATED and ABOLISHED
instances are not considered plausible).

To pick a specific instance of a step manually (including implausible
instances), use --reuse. To avoid some instances, use --avoid.

You may wish to use 'eman dups' every now and then to get rid (or abolish) some of the unused instances.


=head1 WRITING SEEDS: CORE CONVENTIONS

Seeds (in eman.seeds) have to follow some conventions.

- executable

- respond to environment variables

- exit code 0 for success, other for failure

- init and prepare by default

- init only if $INIT_ONLY==yes

=head2 When Initing

- create the file: eman.vars

- optionally also create: eman.tag, eman.deps

Note that for reliable cloning, deps must be directly determined from
the vars. It is actually best to include the full name of the dependence
in one of the variables.

=head2 When Preparing

- create the file: eman.command

=head1 WRITING SEEDS: TIPS

=head2 Inheriting Variables

It is often useful to propagate a value of a variable from a dependence to the
current step. This can be easily achieved:

  INHERITED=`cat ../$DEPENDENCE/eman.vars | grep TO_INHERIT | cut -d= -f2`
  echo INHERITED=$INHERITED >> eman.vars # save as our variable

Note that your seed can be asked to perform the init before the $DEPENDENCE was
prepared and likewise, it can be asked to prepare before $DEPENDENCE was run.
So avoid asking for files in $DEPENDENCE too early.

Note DZ: The complicated code above is probably outdated.
There is now support for variable inheriting directly in eman.
This is an example of what to include in the seed of the inheriting step:

  eman defvar INHERITED inherit=PREVIOUSSTEP
  eman defvar INHERITED2 inherit=PREVIOUSSTEP:VARIABLE


=head2 Inheriting Dependencies

Consider the following traceback:

  +- s.tm.ABC.20101127-1856
  |  | ALIGN=s.align.DEF.20101127-1856
  |  | BINARIES=s.binaries.GHI.20101127-1856
  |  +- s.align.DEF.20101127-1856
  |  |  | BINARIES=s.binaries.GHI.20101127-1856
  |  |  +- s.binaries.GHI.20101127-1856
  |  +- s.binaries.GHI.20101127-1856

The step 'binaries' is used by 'tm' directly but could be 'inherited' from
'align', so that we don't have to specify it when initing 'tm' and also the
traceback is simpler:

  +- s.tm.ABC.20101127-1856
  |  +- s.align.DEF.20101127-1856
  |  |  +- s.binaries.GHI.20101127-1856

The best technique to achieve this simplification is:

1. 'align' should have BINARIES as a variable as well as a dependence.

2. 'tm' should have BINARIES only as a variable and not as a dependence.

3. The seed of 'tm' should use the given ALIGN to copy BINARIES from there.

4. For best flexibility, 'tm' should allow for using a different 'binaries'
step. If and only if this happens, 'tm' should add the extra dependence:

  +- s.tm.ABC.20101127-1856
  |  | ALIGN=s.align.DEF.20101127-1856
  |  | BINARIES=s.binaries.JKL.20101130-1100
  |  +- s.align.DEF.20101127-1856
  |  |  | BINARIES=s.binaries.GHI.20101127-1856
  |  |  +- s.binaries.GHI.20101127-1856
  |  +- s.binaries.GHI.20101120-1100

Here a is proposed bash solution for the 'tm' seed:

  INHERITED=`cat ../$ALIGN/eman.vars | grep BINARIES | cut -d= -f2`
  if [ -z "$BINARIES" ] || [ "$BINARIES" == "$INHERITED" ]; then
    # inheriting
    BINARIES=$INHERITED
  else
    # using our own
    echo $BINARIES >> eman.deps
  fi
  # surely store the var
  echo BINARIES=$BINARIES >> eman.vars

The topic of inherited dependencies is related to the question whether we see
the experiment as a tree or a directed acyclic graph.

=head1 SEE ALSO

Eman is somewhat similar but also different from other experiment managements
systems.

While other experiment management systems treat the whole experiment
as the main goal (allowing to represent variations within the experiment and
reusing parts of previous experiment runs), eman works primarily with the
individual steps. The complete experiments emerge rather as side-effects.
Later, they can be easily displayed using 'eman traceback' as well as reused or
modified using 'eman clone|redo'. We like to say that this make eman more
flexible.

Essentially, an eman traceback can be seen as a sample workflow and 'eman clone
< traceback' can be used to instantiate the workflow.

A feature very natural for eman but still unique compared to other systems is
the command-line interface to construct variations of steps or experiments. The
exploration of the space of configurations can thus be quickly automated.

Related experiment or workflow management systems:

=head2 LoonyBin

  http://www.cs.cmu.edu/~jhclark/loonybin/

LoonyBin is a clickable Java tool. The good sides of LoonyBin are: support
for multiple clusters and schedulers.

=head2 Moses Experiment Management System

  http://www.statmt.org/moses/?n=FactoredTraining.EMS

Moses EMS (experiment.perl) is centered around a single (customizable)
experiment which consists of steps.

=head2 Other

There are also the following workflow management systems: DAGMan, Pegasus,
Dryad.

=head1 AUTHOR

Ondrej Bojar <obo@matfyz.cz>

Copyright 2010, 2011 Ondrej Bojar, All rights reserved.

=cut

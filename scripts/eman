#!/usr/bin/perl
# eman, experiment manager
#
# Ondrej Bojar, bojar@ufal.mff.cuni.cz

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

my $debug = 0;
my $manpage = 0;
my $help = 0;
my $list_options = 0;
my $show_tags = 1;
my $show_vars = 1;
my $show_status = 0;
my $show_log = 0;
my $reindex = 0;
my $redo = undef;
my $dirprefix = "e.";

my %options = (
  "help|h" => \$help,
  "list-options" => \$list_options,
  "man" => \$manpage,
  "tags!" => \$show_tags,
  "vars!" => \$show_vars,
  "status!" => \$show_status,
  "log!" => \$show_log,
  "reindex!" => \$reindex,
  "redo:s@" => \$redo,
);
GetOptions(%options) or exit 1;

my $redo_all = (defined $redo && scalar(@$redo) == 0);
my %redo = map { ($_,1) } @$redo if defined $redo;

my $command = shift;
my $cmd = recognize_command($command);
my $waserror = 0;

if (defined $command && !defined $cmd) {
  print STDERR "Bad command: $command\n";
  $waserror = 1;
  $help = 1;
}


# Help and usage, inspired by btred by Petr Pajas
if ($manpage) {
### show manpage on console
#  pod2usage(-exitstatus => 0, -verbose => 99, -sections => '.*');
  pod2usage(-exitstatus => 0, -verbose => 2);
}
if ($help || !defined $command) {
  pod2usage(-msg => 'eman, experiment management');
  exit $waserror;
}
if ($list_options) {
  foreach my $o (keys %options) {
    $o=~s/=.$//;
    foreach my $oo (split /\|/,$o) {
      print sort ((length($oo)>1) ? "--$oo\n" : "-$oo\n");
    }
  }
  exit;
}


# update md5 indices
my $idx = loadidx() unless $reindex; # ignore saved values
my @dirs = glob("$dirprefix*.*.[0-9]*");
foreach my $d (@dirs) {
  next if defined $idx->{$d};
  next if ! step_valid($d);
  my $hash = get_hash_from_dir($d);
  $idx->{$d} = $hash;
  $idx->{$hash} = $d;
  print STDERR "$d: $idx->{$d}\n" if $debug;
}
saveidx($idx);


## handle all the various commands



if ($cmd eq "guess") {
  # just guessing step directories
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    print $step."\n";
  }
  exit 0;
}

sub recognize_command {
  my $command = shift;
  return undef if !defined $command;
  return $command if $command =~ /^(init|clone|prepare|run|start|list|traceback|users|abolish|reindex|guess)$/;
  # todo: abbreviations, e.g. cl pr ls tb rm
  return undef; # unrecognized
}


__END__

=head1 eman

eman, experiment manager

=head1 SYNOPSIS

  VAR=val eman init STEPTYPE  # create new step of the given type
  VAR=val eman clone STEPDIR  # create new step based on STEPDIR
  eman clone < traceback      # create step by cloning incl. predecessors
    --redo                    #   clone even DONE steps
    --redo=STEPDIR            #   clone the given step unconditionally
    --start                   # after init/clone, submit to queue
  
  eman prepare STEPDIR        # prepare inited
  eman run STEPDIR            # run prepared
  eman continue STEPDIR       # continue something that failed
  eman start STEPDIR          # prepare and run, incl. all predecessors
  
  eman guess TEXT             # guess a *single* step based on a
                              # substring of the hash, the tag, the date
                              # or final score

  eman list STEPTYPE          # list all steps of the given type
  eman traceback STEPDIR      # show tree of the steps and predecessors
  eman users STEPDIR          # show tree of the steps and successors
    --tags --vars --status    #   include relevant information
    --log --jobid             #   and the tail of the log or SGE job ID
  
  eman abolish STEPDIR        # destroy all step files except
                              #   metadata => can still be cloned

  eman reindex                # re-create index of steps

Whereever STEPDIR is expected, you may also use `pwd` if in the step dir.

=head1 DESCRIPTION

eman is an experiment manager, useful mainly for deriving steps and
step chains, i.e. complex experiment scenarios.

=head2 Structure of an Experiment Directory

We call each step in a (complex) pipeline an 'step'.
Each step is represented as a single directory s.STEPTYPE.HASH.TIMESTAMP.
Apart from any files needed for the step, the following files are always
present in the step directory:

  eman.tag           ... one-line "readable" summary of vars
                         Often manually editted to contain special flags.
  eman.vars          ... the variables configuring the step
  eman.deps          ... list of prerequisites of this step
  eman.status        ... the status of the step
  eman.seed          ... the script used to init the step
  eman.command       ... the script used for preparation and run
  eman.derived-from  ... the name of the step used when deriving

=head2 Experiment Life Cycle

1. The commands 'eman init' and 'eman clone' create a timestamped step
directory, e.g. s.test.hash1234.20101115-1213.

2. The file eman.seeds/STEPTYPE is copied there as eman.seed.

3. The seed is run and expected to produce: eman.vars and eman.command

4. eman.deps are constructed from eman.vars and eman.command

5. eman.status is set to INITED if everything was successful

The file eman.status in a step directory contains one line status:
  UNBORN             ... not created yet
  INITED             ... the step was just created
  INITFAILED         ... the initialization failed
  PREPARED           ... prepared using 'eman prepare'
  PREPFAILED         ... 'eman prepare' failed
  WAITING: ...       ... submitted by 'eman start', prereqs still run
  RUNNING            ... running
  FAILED             ... the running failed
  DONE               ... the running succeeded

=head1 USAGE PATTERNS

eman traceback STEPDIR | sed 's/.../.../' | eman clone
  # clone the whole subtree of steps replacing some vars

eman abolish `eman list STEPTYPE --status | grep FAILED`
  # clean up, i.e. remove all content files of all failing steps

=head1 AUTHOR

Ondrej Bojar <obo@matfyz.cz>

Copyright 2010 Ondrej Bojar, All rights reserved.

=cut

#!/usr/bin/perl
# eman, experiment manager
#
# More info: 'eman --help' or 'eman --man'
#
# Ondrej Bojar, bojar@ufal.mff.cuni.cz

use strict;
use warnings;
use Carp;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Path;
use Cwd;
use Digest::MD5 qw(md5_hex);

# command name abbreviations
my %expand_abbrev = qw(
  ls list
  cl clone
  tb traceback
  tr traceback
  rm abolish
  st start
  pr prepare
  prep prepare
);

my $startupwd = cwd();
my $debug = 0;
my $verbose = 0;
my $manpage = 0;
my $help = 0;
my $list_options = 0;
my $show_tag = 1;
my $show_vars = 1;
my $show_status = 0;
my $show_log = 0;
my $show_jobid = 0;
my $reindex = 0;
my $redo = undef;
# standard filenames and filename parts
my $dirprefix = "s."; # stands for 'step'
my $indexfile = relative_to_stepsdir("eman.index");
my $resultsfile = relative_to_stepsdir("eman.results");
my $seedsdir = relative_to_stepsdir("eman.seeds");

my %options = (
  "help|h" => \$help,
  "verbose|v" => \$verbose,
  "list-options" => \$list_options,
  "man" => \$manpage,
  "tag!" => \$show_tag,
  "vars!" => \$show_vars,
  "status!" => \$show_status,
  "jobid!" => \$show_jobid,
  "log!" => \$show_log,
  "reindex!" => \$reindex,
  "redo:s@" => \$redo,
);
GetOptions(%options) or exit 1;

my $redo_all = (defined $redo && scalar(@$redo) == 0);
my %redo = map { ($_,1) } @$redo if defined $redo;

my $command = shift;
my $cmd = recognize_command($command);
my $waserror = 0;

sub mydie($) {
  my $msg = shift;
  print STDERR $msg."\n";
  exit 1;
}

if (defined $command && !defined $cmd) {
  print STDERR "Bad command: $command\n";
  $waserror = 1;
  $help = 1;
}


# Help and usage, inspired by btred by Petr Pajas
if ($manpage) {
### show manpage on console
#  pod2usage(-exitstatus => 0, -verbose => 99, -sections => '.*');
  pod2usage(-exitstatus => 0, -verbose => 2);
}
if ($help || !defined $command) {
  pod2usage(-msg => 'eman, experiment management');
  exit $waserror;
}
if ($list_options) {
  foreach my $o (keys %options) {
    $o=~s/=.$//;
    foreach my $oo (split /\|/,$o) {
      print sort ((length($oo)>1) ? "--$oo\n" : "-$oo\n");
    }
  }
  exit;
}


# update md5 indices
my $idx = loadidx() unless $reindex; # ignore saved values
my @dirs = glob("$dirprefix*.*.[0-9]*");
foreach my $d (@dirs) {
  next if defined $idx->{$d};
  next if ! step_valid($d);
  my $hash = get_hash_from_dir($d);
  $idx->{$d} = $hash;
  $idx->{$hash} = $d;
  print STDERR "$d: $idx->{$d}\n" if $debug;
}
saveidx($idx);


## handle all the various commands



if ($cmd eq "guess") {
  # just guessing step directories
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    print $step."\n";
  }
  exit 0;
}

if ($cmd eq "list") {
  # listing steps of the given types
  my $only_some_steptypes = 0;
  my %requested_steptype;
  if (0 < scalar @ARGV) {
    $only_some_steptypes = 1;
    %requested_steptype = map { ($_, 1) } @ARGV;
  }
  foreach my $s (sort {$a cmp $b} keys %$idx) {
    next if $s !~ /^\Q$dirprefix/; # this is a reverse index
    my $steptype = get_steptype($s);
    next if $only_some_steptypes && !defined $requested_steptype{$steptype};
    # mark that we accepted this argument
    $requested_steptype{$steptype} = 2
      if defined $requested_steptype{$steptype};
    print $s;
    print "\t".load_status($s) if $show_status;
    print "\t".load_tag($s) if $show_tag;
    print "\t".load_jobid($s) if $show_jobid;
    print "\n";
    print_vars("  ", $s) if $show_vars;
    print_log("  ", $s) if $show_log;
  }
  foreach my $req (keys %requested_steptype) {
    if ($requested_steptype{$req} == 1) {
      $waserror = 1;
      print STDERR "No steps of type: $req\n";
    }
  }
  exit $waserror;
}

if ($cmd eq "traceback") {
  mydie "usage: eman traceback SPEC ..." if 0 == scalar @ARGV;
  foreach my $key (@ARGV) {
    my $step = guess_step($key);
    traceback("", $step);
  }
  exit 0;
}

if ($cmd eq "init") {
  my $steptype = shift;
  mydie "usage: eman init STEPTYPE" if ! defined $steptype;
  my $s = init($steptype);
  $waserror = ! defined $s;
  exit $waserror;
}

if ($cmd eq "clone") {
  my $step = shift;
  if (defined $step) {
    # clone the single dir
    my $srcstep = guess_step($step); # happily guess the exact step
    my $srcvarsstr = load_vars($srcstep);
    # decide which vars should be cloned
    # (do not clone those set in the environment)
    my @srcvars = split /\n/, $srcvarsstr;
    my @usevars = grep { my ($varname, undef) = split /=/, $_, 2;
                         ! defined $ENV{$varname} } @srcvars;
    my $news = init(get_steptype($srcstep), \@usevars);
    $waserror = 1 if ! defined $news;
  } else {
    die "Cloning based on traceback unimplemented";
  }
  exit $waserror;
}

if ($cmd eq "prepare") {
  my $step = shift;
  mydie "usage: eman prepare STEPDIR" if ! defined $step;
  my $s = guess_step($step); # happily guess the exact step
  $waserror = ! prepare($s);
  exit $waserror;
}




if ($cmd eq "abolish") {
  my $step = shift;
  mydie "usage: eman abolish STEPDIR ..." if ! defined $step;
  my $s = canon_stepdir($step); # abolish is pickier wrt to input
  chdir_to_stepdir($s);
  for my $f (glob("*")) {
    next if $f =~ /^eman\./;
    next if $f =~ /^log\./;
    if (-d $f) {
      rmtree($f) or $waserror = 1;
    } else {
      unlink($f) or $waserror = 1;
    }
  }
  save("eman.abolished", `date`);
  exit $waserror;
}


sub init {
  my $steptype = shift;
  my $varsarr = shift; # optional array of strings VAR="sd sdf"
                       # to be passed to the seed
  my $seed = $seedsdir."/".$steptype;
  mydie "Seed $seed not found." if ! -e $seed;
  mydie "Bad seed name, '.' not allowed." if $steptype =~ /\./;
  my $timestamp = `date '+%Y%m%d-%H%M'`; chomp $timestamp;
  mydie "Bad timestamp: $timestamp" if $timestamp !~ /^[-0-9]+$/;
  my $s = mkdiruniq($dirprefix.$steptype.".", ".".$timestamp);
  # populate the directory with all relevant files
  quietsystem("cp $seed $s/eman.seed") or die;
  quietsystem("set > $s/eman.init_env") or die;
  my $oldwd = chdir_to_stepdir($s);
  my $ok = 1;
  my $preservedir = 0;
  my @varsoverride = ();
  @varsoverride = @$varsarr if defined $varsarr;
  $ok = safesystem("INIT_ONLY=yes @varsoverride ./eman.seed >&2");
  if ($ok) {
    $preservedir = 1;
    print STDERR "Step $s inited, checking required files, supplying defaults.\n"
      if $verbose;

    # tag: can be blank, non-blank must be valid
    my $tag = try_load("eman.tag");
    if (defined $tag) {
      if ($tag =~ /[\s\n]/ ) {
        $ok = 0;
	print STDERR "No whitespace allowed in $s/eman.tag: $tag\n";
      }
    } else {
      save("eman.tag", ""); # save blank tag
    }

    # deps: can be blank, non-blank must be valid
    my $deps = try_load("eman.deps");
    if (defined $deps) {
      foreach my $d (split /\n/, $deps) {
        if (!step_valid($d)) {
	  print STDERR "Invalid dependence: $d\n";
	  $ok = 0;
	}
      }
    } else {
      save("eman.deps", ""); # save blank tag
    }

    # vars: must exist (blank vars make no sense)
    if (! defined try_load("eman.vars")) {
      print STDERR "$seedsdir/$steptype did not create eman.vars for $s\n";
      $ok = 0;
    }
  }

  if ($ok) {
    save("eman.status", "INITED");
    print STDERR "Inited: $s\n";
  } elsif ($preservedir) {
    print STDERR "Failed to init the step. Check and delete: $s\n";
    $waserror = 1;
    save("eman.status", "INITFAILED");
  } else {
    print STDERR "Failed to init the step. Removing $s\n";
    mychdir($startupwd);
    rmtree($s) or die "Failed to remove $s";
  }
  mychdir($oldwd);
  return $ok ? $s : undef;
}

sub prepare {
  my $s = shift;
  my $status = load_status($s);
  mydie "Only inited steps can be prepared" if $status ne "INITED";

  my $prevdir = chdir_to_stepdir($s);
  # XXX need to export all variables
  my $ok = 1;
  $ok = safesystem("eval \$(cat eman.vars) RUN=no ./eman.seed");
  print STDERR "Step $s prepared, checking required files.\n" if $verbose;
  if (! -e "eman.command") {
    $ok = 0;
    print STDERR "Step $s prepared badly. No eman.command\n"
  }
  if ($ok) {
    print STDERR "Step $s prepared.\n";
    save("eman.status", "PREPARED");
  } else {
    save("eman.status", "PREPFAILED");
  }
  mychdir($prevdir);
  return $ok;
}

sub print_step {
  my $prefix = shift;
  my $s = shift;

}
sub print_vars {
  my $prefix = shift;
  my $s = shift;
  my $v = load_vars($s);
  foreach my $l (split /\n/, $v) {
    print "$prefix$l\n";
  }
}
sub print_log {
  my $prefix = shift;
  my $s = shift;
  my $stepdir = relative_to_stepsdir($s);
  my $logtext = `tail -n3 $stepdir/log.* 2> /dev/null`;
  chomp $logtext;
  foreach my $l (split /\n/, $logtext) {
    print "$prefix$l\n";
  }
}

sub traceback {
  my $prefix = shift;
  my $step = shift;
  print "$prefix+- $step\n";
  my @kws; # space-delimited keywords
  if (defined $show_jobid) {
    my $jid = load_jobid($step);
    push @kws, $jid if defined $jid && $jid ne "-";
  }
  push @kws, load_status($step) if $show_status;
  push @kws, load_tag($step) if $show_tag;
  print "$prefix|  | Job: @kws\n";
  print_vars("$prefix|  | ", $step) if $show_vars;
  print_log("$prefix|  | ", $step) if $show_log;
  my $deps = load_depsarr($step);
  foreach my $dep (@$deps) {
    traceback("$prefix|  ", $dep);
  }
}


sub recognize_command {
  my $command = shift;
  return undef if !defined $command;
  $command = $expand_abbrev{$command} if defined $expand_abbrev{$command};
  return $command if $command =~ /^(init|clone|prepare|run|start|list|traceback|users|abolish|reindex|guess)$/;
  return undef; # unrecognized
}

sub mkdiruniq {
  my $prefix = shift;
  my $suffix = shift;
  
  my $dirnum = 1;
  my $tryname = mkdiruniq2($prefix, $suffix, $dirnum);
  while (-e $tryname) {
    $dirnum++;
    $tryname = mkdiruniq2($prefix, $suffix, $dirnum);
  }
  if (mkdir($tryname)) {
    return $tryname;
  } else {
    print STDERR "Failed to create the directory $tryname, $!";
    exit 1;
  }
}
sub mkdiruniq2 {
  my $prefix = shift;
  my $suffix = shift;
  my $num = shift;
  my $forhash = $prefix.$suffix.$num;
  my $hash = substr(md5_hex($forhash), 0, 8);
  return $prefix.$hash.$suffix;
}



sub relative_to_stepsdir {
  my $fn = shift;
  if (-e "eman.index") {
    # assume we are in stepsdir
    return $fn;
  } elsif (-e "../eman.index") {
    # assume we are in a dir of a step
    return $fn if $fn =~ /^\//; # do not mangle absolute paths
    return "../".$fn;
  }
}

sub step_valid {
  my $step = shift;
  return -d relative_to_stepsdir($step)
    && -e relative_to_stepsdir("$step/eman.seed")
    && -e relative_to_stepsdir("$step/eman.vars");
}

sub get_steptype {
  my $step = shift;
  my $oldstep = $step;
  $step =~ s/\Q$dirprefix\E([^\.]+)\..*/$1/;
  confess "Failed to get steptype from: $step" if $step eq $oldstep;
  return $step;
}

sub load_status {
  my $step = shift;
  return try_load(relative_to_stepsdir("$step/eman.status"));
}
sub load_tag {
  my $step = shift;
  return try_load(relative_to_stepsdir("$step/eman.tag"));
}
sub load_depsarr {
  my $step = shift;
  my $depsstr = try_load(relative_to_stepsdir("$step/eman.deps"));
  my $depsarr = [ split /\n/, $depsstr ];
  return $depsarr;

}
sub load_vars {
  my $step = shift;
  return try_load(relative_to_stepsdir("$step/eman.vars"));
}
sub load_jobid {
  my $step = shift;
  my @logs = glob(relative_to_stepsdir("$step/log.o[0-9]*"));
  return "-" if 0 == scalar @logs;
  my @ids = sort {$b <=> $a} map { s/^.*log.o([0-9]+)$/$1/; $_ } @logs;
  return $ids[0];
}

sub canon_stepdir {
  my $step = shift;
  # interprets uniquely supplied steps
  my $s = $step;
  $s = $1 if $step =~ /^.*\/([^\/]+)\/?/;
  $s = guess_step_from_hashdate($s);
  mydie "Not a valid step: $step" if !defined $s;
  return $s;
}

sub chdir_to_stepdir {
  my $stepdir = shift;
  die "../$stepdir and ./$stepdir exist, I'm confused."
    if -e "../$stepdir" && -e "./$stepdir";
  my $oldwd = cwd();
  if (-e $stepdir) {
    chdir($stepdir) or die "Failed to chdir to $stepdir";
  } elsif (-e "../$stepdir") {
    chdir("../$stepdir") or die "Failed to chdir to $stepdir";
  } else {
    die "Neither ./$stepdir nor ../$stepdir exist.";
  }
  return $oldwd;
}
sub mychdir {
  my $d = shift;
  chdir($d) or confess "Failed to chdir to $d";
}

sub guess_step {
  my $key = shift;
  my $step = guess_step_from_hashdate($key);
  if (!defined $step && -e $resultsfile) {
    # guess from results file
    my $resultstext = load($resultsfile);
    
    my @resultsmatches = grep { /$key/ } split /\n/, $resultstext;
    if (1<scalar(@resultsmatches)) {
      print STDERR "Ambiguous in results file: $key:\n";
      print STDERR join("", map { "  $_\n" } @resultsmatches);
      exit 1;
    }
    
    print STDERR scalar(@resultsmatches)." matches in results file\n" if $debug;
    if (1==scalar @resultsmatches) {
      my $f = field($resultsmatches[0], 1);
      $f =~ s/\<.*//;
      $step = guess_step_from_hashdate($f);
    }
  }
  if (!defined $step) {
    # guess from dir listing
    my @dirs = grep { /$key/ } glob("$dirprefix*.*.[0-9]*");
    # we do not use the preloaded index, because it contains only valid exps.
    if (1<scalar(@dirs)) {
      print STDERR "Ambiguous in dir listing: $key:\n";
      print STDERR join("", map { "  $_\n" } @dirs);
      exit 1;
    }
    $step = guess_step_from_hashdate($dirs[0]) if 1==scalar @dirs;
  }
  die "Failed to guess step from: $key" if !defined $step;
  return $step;
}  

sub guess_step_from_hashdate {
  my $key = shift;
  print STDERR "Guessing step from hash and date: $key\n" if $debug;
  return $key if -d $key; # full dirname was given, this is it
  my %stepnames = map { ($_,1) }
                  map { s/(\Q$dirprefix\E[^\.]+\.).*/$1/; $_; }
                  grep { /^\Q$dirprefix/ } # this is a forward index
                  keys %$idx;
  foreach my $pref (keys %stepnames) {
    if (-d $pref.$key) {
      return $pref.$key;
    }
  }
  return undef; #couldn't confirm
}


sub loadidx {
  # load the index file and hash it there and back
  my %idx;
  if (-e $indexfile) {
    %idx = map { my ($d, $md5) = split /\t/; ($d, $md5, $md5, $d) }
             split /\n/, load($indexfile);
  }
  return \%idx;
}
sub saveidx {
  my $idx = shift;
  my $h = my_save($indexfile);
  foreach my $k (keys %$idx) {
    print $h "$k\t$idx->{$k}\n";
  }
  close $h;
}

sub get_hash_from_dir {
  my $exp = shift;

  my @vars = split /\n/, load($exp."/eman.vars");
  my @deps = split /\n/, load($exp."/eman.deps");
  return md5_hex(sort @vars, sort @deps);
}
sub get_hash_from_vars_deps {
  my $vars = shift;
  my $deps = shift;
  return md5_hex(sort @$vars, sort @$deps);
}
sub try_load {
  my $f = shift;
  my $h = try_open($f);
  return undef if !defined $h;
  my $o = "";
  $o .= $_ while (<$h>);
  close $h;
  chomp $o;
  return $o;
}
sub load {
  my $f = shift;
  my $h = my_open($f);
  my $o = "";
  $o .= $_ while (<$h>);
  close $h;
  chomp $o;
  return $o;
}
sub save {
  my $f = shift;
  my $data = shift;
  my $h = my_save($f);
  print $h $data;
  print $h "\n" if $data ne "" && $data !~ /\n$/m;
  close $h;
}

sub try_open {
  my $f = shift;
  if ($f eq "-") {
    binmode(STDIN, ":utf8");
    return *STDIN;
  }

  return undef if ! -e $f;

  my $opn;
  my $hdl;
  my $ft = `file $f`;
  # file might not recognize some files!
  if ($f =~ /\.gz$/ || $ft =~ /gzip compressed data/) {
    $opn = "zcat $f |";
  } elsif ($f =~ /\.bz2$/ || $ft =~ /bzip2 compressed data/) {
    $opn = "bzcat $f |";
  } else {
    $opn = "$f";
  }
  open $hdl, $opn or return undef;
  binmode $hdl, ":utf8";
  return $hdl;
}
sub my_open {
  my $f = shift;
  if ($f eq "-") {
    binmode(STDIN, ":utf8");
    return *STDIN;
  }

  confess "Not found: $f" if ! -e $f;

  my $opn;
  my $hdl;
  my $ft = `file $f`;
  # file might not recognize some files!
  if ($f =~ /\.gz$/ || $ft =~ /gzip compressed data/) {
    $opn = "zcat $f |";
  } elsif ($f =~ /\.bz2$/ || $ft =~ /bzip2 compressed data/) {
    $opn = "bzcat $f |";
  } else {
    $opn = "$f";
  }
  open $hdl, $opn or confess "Can't open '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}

sub my_save {
  my $f = shift;

  my $opn;
  my $hdl;
  # file might not recognize some files!
  if ($f =~ /\.gz$/) {
    $opn = "| gzip -c > $f";
  } elsif ($f =~ /\.bz2$/) {
    $opn = "| bzip2 > $f";
  } else {
    $opn = "> $f";
  }
  mkpath( dirname($f) );
  open $hdl, $opn or confess "Can't write to '$opn': $!";
  binmode $hdl, ":utf8";
  return $hdl;
}


sub safesystem {
  print STDERR "Executing: @_\n";
  return quietsystem(@_);
}
sub quietsystem {
  system(@_);
  if ($? == -1) {
      print STDERR "Failed to execute: @_\n  $!\n";
      exit(1);
  }
  elsif ($? & 127) {
      printf STDERR "Execution of: @_\n  died with signal %d, %s coredump\n",
          ($? & 127),  ($? & 128) ? 'with' : 'without';
      exit(1);
  }
  else {
    my $exitcode = $? >> 8;
    print STDERR "Exit code: $exitcode\n" if $exitcode;
    return ! $exitcode;
  }
}


__END__

=head1 eman

eman, experiment manager

=head1 SYNOPSIS

  VAR=val eman init STEPTYPE  # create new step of the given type
  VAR=val eman clone STEPDIR  # create new step based on STEPDIR
  eman clone < traceback      # create step by cloning incl. predecessors
    --redo                    #   clone even DONE steps
    --redo=STEPDIR            #   clone the given step unconditionally
    --start                   # after init/clone, submit to queue
  
  eman prepare SPEC           # prepare inited
  eman run SPEC               # run prepared
  eman continue SPEC          # continue something that failed
  eman start SPEC             # prepare and run, incl. all predecessors
  
  eman guess SPEC             # guess a *single* step based on a
                              # substring of the hash, the tag, the date
                              # or final score

  eman list STEPTYPE          # list all steps of the given type
  eman traceback SPEC ...     # show tree of the steps and predecessors
  eman users SPEC ...         # show tree of the steps and successors
    --tag --vars --status     #   include relevant information
    --log --jobid             #   and the tail of the log or SGE job ID
  
  eman abolish STEPDIR ...    # destroy all step files except
                              #   metadata => can still be cloned
  eman collect                # collect results of all experiments
  eman reindex                # re-create index of steps

Use "`pwd`" as STEPDIR when you actually are in a step directory.

=head1 DESCRIPTION

eman is an experiment manager, useful mainly for deriving steps and
step chains, i.e. complex experiment scenarios.

=head2 Structure of a Step Directory

We call each step in a (complex) pipeline an 'step'.
Each step is represented as a single directory s.STEPTYPE.HASH.TIMESTAMP.
Apart from any files needed for the step, the following files are always
present in the step directory:

  eman.tag           ... one-line "readable" summary of vars
                         Often manually editted to contain special flags.
  eman.vars          ... the variables configuring the step
  eman.deps          ... list of prerequisites of this step
  eman.status        ... the status of the step
  eman.seed          ... the script used to init the step
  eman.command       ... the script used for preparation and run
  eman.derived-from  ... the name of the step used when deriving
  eman.init_env      ... all environment variable at init time

=head2 Special Files in Directory of Steps

In the directory containing all your steps, eman creates these files:

  eman.seeds         ... the directory of all step seeds
  eman.index         ... index of steps for quick check for identities
  eman.results       ... collected results from all steps

=head2 Life Cycle of Individual Steps

1. The commands 'eman init' and 'eman clone' create a timestamped step
directory, e.g. s.test.hash1234.20101115-1213.

2. The file eman.seeds/STEPTYPE is copied there as eman.seed.

3. The seed is run and expected to produce: eman.vars and eman.command

4. eman.deps are constructed from eman.vars and eman.command

5. eman.status is set to INITED if everything was successful

The file eman.status in a step directory contains one line status:
  UNBORN             ... not created yet
  INITED             ... the step was just created
  INITFAILED         ... the initialization failed
  PREPARED           ... prepared using 'eman prepare'
  PREPFAILED         ... 'eman prepare' failed
  WAITING: ...       ... submitted by 'eman start', prereqs still run
  RUNNING            ... running
  FAILED             ... the running failed
  DONE               ... the running succeeded

=head1 USAGE PATTERNS

eman traceback STEPDIR | sed 's/.../.../' | eman clone
  # clone the whole subtree of steps replacing some vars

eman abolish `eman list STEPTYPE --status | grep FAILED`
  # clean up, i.e. remove all content files of all failing steps

=head1 AUTHOR

Ondrej Bojar <obo@matfyz.cz>

Copyright 2010 Ondrej Bojar, All rights reserved.

=cut
